
Yek.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000212  00800100  000048de  00004972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000262  00800312  00800312  00004b84  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00004b84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e68  00000000  00000000  00004bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000227b3  00000000  00000000  00005a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005dc5  00000000  00000000  000281f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009ee9  00000000  00000000  0002dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002cd4  00000000  00000000  00037ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007b82  00000000  00000000  0003ab78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000127b6  00000000  00000000  000426fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001118  00000000  00000000  00054eb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b8 c2       	rjmp	.+1392   	; 0x572 <__ctors_end>
       2:	00 00       	nop
       4:	d3 c2       	rjmp	.+1446   	; 0x5ac <__bad_interrupt>
       6:	00 00       	nop
       8:	d1 c2       	rjmp	.+1442   	; 0x5ac <__bad_interrupt>
       a:	00 00       	nop
       c:	cf c2       	rjmp	.+1438   	; 0x5ac <__bad_interrupt>
       e:	00 00       	nop
      10:	cd c2       	rjmp	.+1434   	; 0x5ac <__bad_interrupt>
      12:	00 00       	nop
      14:	cb c2       	rjmp	.+1430   	; 0x5ac <__bad_interrupt>
      16:	00 00       	nop
      18:	c9 c2       	rjmp	.+1426   	; 0x5ac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c7 c2       	rjmp	.+1422   	; 0x5ac <__bad_interrupt>
      1e:	00 00       	nop
      20:	c5 c2       	rjmp	.+1418   	; 0x5ac <__bad_interrupt>
      22:	00 00       	nop
      24:	c3 c2       	rjmp	.+1414   	; 0x5ac <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <__vector_10>
      2c:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__vector_11>
      30:	bd c2       	rjmp	.+1402   	; 0x5ac <__bad_interrupt>
      32:	00 00       	nop
      34:	bb c2       	rjmp	.+1398   	; 0x5ac <__bad_interrupt>
      36:	00 00       	nop
      38:	b9 c2       	rjmp	.+1394   	; 0x5ac <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b7 c2       	rjmp	.+1390   	; 0x5ac <__bad_interrupt>
      3e:	00 00       	nop
      40:	b5 c2       	rjmp	.+1386   	; 0x5ac <__bad_interrupt>
      42:	00 00       	nop
      44:	b3 c2       	rjmp	.+1382   	; 0x5ac <__bad_interrupt>
      46:	00 00       	nop
      48:	b1 c2       	rjmp	.+1378   	; 0x5ac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	af c2       	rjmp	.+1374   	; 0x5ac <__bad_interrupt>
      4e:	00 00       	nop
      50:	ad c2       	rjmp	.+1370   	; 0x5ac <__bad_interrupt>
      52:	00 00       	nop
      54:	20 c6       	rjmp	.+3136   	; 0xc96 <__vector_21>
      56:	00 00       	nop
      58:	a9 c2       	rjmp	.+1362   	; 0x5ac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a7 c2       	rjmp	.+1358   	; 0x5ac <__bad_interrupt>
      5e:	00 00       	nop
      60:	a5 c2       	rjmp	.+1354   	; 0x5ac <__bad_interrupt>
      62:	00 00       	nop
      64:	a3 c2       	rjmp	.+1350   	; 0x5ac <__bad_interrupt>
      66:	00 00       	nop
      68:	a1 c2       	rjmp	.+1346   	; 0x5ac <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9f c2       	rjmp	.+1342   	; 0x5ac <__bad_interrupt>
      6e:	00 00       	nop
      70:	9d c2       	rjmp	.+1338   	; 0x5ac <__bad_interrupt>
      72:	00 00       	nop
      74:	9b c2       	rjmp	.+1334   	; 0x5ac <__bad_interrupt>
      76:	00 00       	nop
      78:	99 c2       	rjmp	.+1330   	; 0x5ac <__bad_interrupt>
      7a:	00 00       	nop
      7c:	97 c2       	rjmp	.+1326   	; 0x5ac <__bad_interrupt>
      7e:	00 00       	nop
      80:	95 c2       	rjmp	.+1322   	; 0x5ac <__bad_interrupt>
      82:	00 00       	nop
      84:	93 c2       	rjmp	.+1318   	; 0x5ac <__bad_interrupt>
      86:	00 00       	nop
      88:	91 c2       	rjmp	.+1314   	; 0x5ac <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8f c2       	rjmp	.+1310   	; 0x5ac <__bad_interrupt>
      8e:	00 00       	nop
      90:	8d c2       	rjmp	.+1306   	; 0x5ac <__bad_interrupt>
      92:	00 00       	nop
      94:	8b c2       	rjmp	.+1302   	; 0x5ac <__bad_interrupt>
      96:	00 00       	nop
      98:	89 c2       	rjmp	.+1298   	; 0x5ac <__bad_interrupt>
      9a:	00 00       	nop
      9c:	87 c2       	rjmp	.+1294   	; 0x5ac <__bad_interrupt>
      9e:	00 00       	nop
      a0:	85 c2       	rjmp	.+1290   	; 0x5ac <__bad_interrupt>
      a2:	00 00       	nop
      a4:	83 c2       	rjmp	.+1286   	; 0x5ac <__bad_interrupt>
      a6:	00 00       	nop
      a8:	81 c2       	rjmp	.+1282   	; 0x5ac <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     136:	dc 01                                               ..

00000138 <u8x8_font_chroma48medium8_r>:
     138:	20 7f 00 00 00 00 00 00 00 00 00 00 00 5e 00 00      ............^..
     148:	00 00 00 00 06 00 00 06 00 00 00 24 7e 24 24 7e     ...........$~$$~
     158:	24 00 00 24 6b 2a 2a 6b 12 00 00 46 26 10 08 64     $..$k**k...F&..d
     168:	62 00 00 34 4a 4a 54 20 50 00 00 00 00 00 06 00     b..4JJT P.......
     178:	00 00 00 00 00 3c 42 00 00 00 00 00 00 42 3c 00     .....<B......B<.
     188:	00 00 00 2a 1c 3e 1c 2a 00 00 00 08 08 3e 08 08     ...*.>.*.....>..
     198:	00 00 00 00 40 30 00 00 00 00 00 08 08 08 08 08     ....@0..........
     1a8:	08 00 00 00 00 40 00 00 00 00 00 40 20 10 08 04     .....@.....@ ...
     1b8:	02 00 00 3c 62 52 4a 46 3c 00 00 40 44 7e 40 40     ...<bRJF<..@D~@@
     1c8:	00 00 00 64 52 52 52 52 4c 00 00 24 42 4a 4a 4a     ...dRRRRL..$BJJJ
     1d8:	34 00 00 38 24 22 22 7e 20 00 00 2e 4a 4a 4a 4a     4..8$""~ ...JJJJ
     1e8:	32 00 00 3c 4a 4a 4a 4a 30 00 00 02 02 62 12 0a     2..<JJJJ0....b..
     1f8:	06 00 00 34 4a 4a 4a 4a 34 00 00 0c 52 52 52 52     ...4JJJJ4...RRRR
     208:	3c 00 00 00 00 24 00 00 00 00 00 00 40 24 00 00     <....$......@$..
     218:	00 00 00 00 08 14 22 00 00 00 00 14 14 14 14 14     ......".........
     228:	14 00 00 00 00 22 14 08 00 00 00 04 02 52 0a 04     .....".......R..
     238:	00 00 00 18 24 5a 5a 24 18 00 00 7c 12 12 12 12     ....$ZZ$...|....
     248:	7c 00 00 7e 4a 4a 4a 4a 34 00 00 3c 42 42 42 42     |..~JJJJ4..<BBBB
     258:	24 00 00 7e 42 42 42 42 3c 00 00 7e 4a 4a 4a 42     $..~BBBB<..~JJJB
     268:	42 00 00 7e 0a 0a 0a 02 02 00 00 3c 42 42 52 52     B..~.......<BBRR
     278:	34 00 00 7e 08 08 08 08 7e 00 00 00 42 7e 42 00     4..~....~...B~B.
     288:	00 00 00 20 40 40 40 40 3e 00 00 7e 08 08 08 14     ... @@@@>..~....
     298:	62 00 00 7e 40 40 40 40 40 00 00 7e 04 08 08 04     b..~@@@@@..~....
     2a8:	7e 00 00 7e 04 08 10 20 7e 00 00 3c 42 42 42 42     ~..~... ~..<BBBB
     2b8:	3c 00 00 7e 12 12 12 12 0c 00 00 3c 42 52 62 42     <..~.......<BRbB
     2c8:	3c 00 00 7e 12 12 12 32 4c 00 00 24 4a 4a 4a 4a     <..~...2L..$JJJJ
     2d8:	30 00 00 02 02 7e 02 02 00 00 00 3e 40 40 40 40     0....~.....>@@@@
     2e8:	3e 00 00 1e 20 40 40 20 1e 00 00 7e 20 10 10 20     >... @@ ...~ .. 
     2f8:	7e 00 00 42 24 18 18 24 42 00 00 02 04 78 04 02     ~..B$..$B....x..
     308:	00 00 00 42 62 52 4a 46 42 00 00 00 7e 42 42 00     ...BbRJFB...~BB.
     318:	00 00 00 02 04 08 10 20 40 00 00 00 00 42 42 7e     ....... @....BB~
     328:	00 00 00 00 00 04 02 04 00 00 80 80 80 80 80 80     ................
     338:	80 80 00 00 00 02 04 00 00 00 00 20 54 54 54 78     ........... TTTx
     348:	00 00 00 7e 48 48 48 30 00 00 00 38 44 44 44 28     ...~HHH0...8DDD(
     358:	00 00 00 30 48 48 48 7e 00 00 00 38 54 54 54 48     ...0HHH~...8TTTH
     368:	00 00 00 00 08 7c 0a 02 00 00 00 18 a4 a4 a4 7c     .....|.........|
     378:	00 00 00 7e 08 08 08 70 00 00 00 00 48 7a 40 00     ...~...p....Hz@.
     388:	00 00 00 40 80 80 88 7a 00 00 00 7e 10 10 28 44     ...@...z...~..(D
     398:	00 00 00 00 42 7e 40 00 00 00 00 7c 04 78 04 78     ....B~@....|.x.x
     3a8:	00 00 00 7c 04 04 04 78 00 00 00 38 44 44 44 38     ...|...x...8DDD8
     3b8:	00 00 00 fc 44 44 44 38 00 00 00 38 44 44 44 fc     ....DDD8...8DDD.
     3c8:	00 00 00 7c 08 04 04 04 00 00 00 48 54 54 54 24     ...|.......HTTT$
     3d8:	00 00 00 00 04 3e 44 00 00 00 00 3c 40 40 20 7c     .....>D....<@@ |
     3e8:	00 00 00 1c 20 40 20 1c 00 00 00 1c 60 1c 60 1c     .... @ .....`.`.
     3f8:	00 00 00 44 28 10 28 44 00 00 00 1c a0 a0 a0 7c     ...D(.(D.......|
     408:	00 00 00 44 64 54 4c 44 00 00 00 00 08 36 41 00     ...DdTLD.....6A.
     418:	00 00 00 00 00 ff 00 00 00 00 00 00 41 36 08 00     ............A6..
     428:	00 00 08 04 04 08 10 10 08 00 00 00 00 00 00 00     ................
     438:	00 00                                               ..

0000043a <_ZZN12Adafruit_BLE7readNVMEjPcjE3__c>:
     43a:	41 54 2b 4e 56 4d 52 45 41 44 00                    AT+NVMREAD.

00000445 <_ZZN12Adafruit_BLE7readNVMEjPhjE3__c>:
     445:	41 54 2b 4e 56 4d 52 45 41 44 52 41 57 3d 00        AT+NVMREADRAW=.

00000454 <_ZZN12Adafruit_BLE8writeNVMEjlE3__c>:
     454:	41 54 2b 4e 56 4d 57 52 49 54 45 00                 AT+NVMWRITE.

00000460 <_ZZN12Adafruit_BLE8writeNVMEjPKcE3__c>:
     460:	41 54 2b 4e 56 4d 57 52 49 54 45 00                 AT+NVMWRITE.

0000046c <_ZZN12Adafruit_BLE8writeNVMEjPKhjE3__c>:
     46c:	41 54 2b 4e 56 4d 57 52 49 54 45 00                 AT+NVMWRITE.

00000478 <_ZZN12Adafruit_BLE10setAdvDataEPhhE3__c>:
     478:	41 54 2b 47 41 50 53 45 54 41 44 56 44 41 54 41     AT+GAPSETADVDATA
     488:	00                                                  .

00000489 <_ZZN12Adafruit_BLE6updateEmE3__c_2>:
     489:	41 54 2b 47 41 54 54 43 48 41 52 52 41 57 3d 00     AT+GATTCHARRAW=.

00000499 <_ZZN12Adafruit_BLE6updateEmE3__c_1>:
     499:	41 54 2b 42 4c 45 4d 49 44 49 52 58 52 41 57 00     AT+BLEMIDIRXRAW.

000004a9 <_ZZN12Adafruit_BLE6updateEmE3__c_0>:
     4a9:	41 54 2b 42 4c 45 55 41 52 54 52 58 00              AT+BLEUARTRX.

000004b6 <_ZZN12Adafruit_BLE6updateEmE3__c>:
     4b6:	41 54 2b 45 56 45 4e 54 53 54 41 54 55 53 00        AT+EVENTSTATUS.

000004c5 <_ZZN12Adafruit_BLE16isVersionAtLeastEPKcE3__c>:
     4c5:	41 54 49 3d 34 00                                   ATI=4.

000004cb <_ZZN12Adafruit_BLE4infoEvE3__c>:
     4cb:	41 54 49 00                                         ATI.

000004cf <_ZZN12Adafruit_BLE10disconnectEvE3__c>:
     4cf:	41 54 2b 47 41 50 44 49 53 43 4f 4e 4e 45 43 54     AT+GAPDISCONNECT
     4df:	00                                                  .

000004e0 <_ZZN12Adafruit_BLE11isConnectedEvE3__c>:
     4e0:	41 54 2b 47 41 50 47 45 54 43 4f 4e 4e 00           AT+GAPGETCONN.

000004ee <_ZZN12Adafruit_BLE4echoEbE3__c>:
     4ee:	41 54 45 00                                         ATE.

000004f2 <_ZZN12Adafruit_BLE12factoryResetEbE3__c>:
     4f2:	41 54 2b 46 41 43 54 4f 52 59 52 45 53 45 54 00     AT+FACTORYRESET.

00000502 <_ZZN12Adafruit_BLE5resetEbE3__c_0>:
     502:	41 54 5a 00                                         ATZ.

00000506 <_ZZN12Adafruit_BLE5resetEbE3__c>:
     506:	41 54 5a 00                                         ATZ.

0000050a <_ZZN12Adafruit_BLE16install_callbackEbaaE3__c_1>:
     50a:	2c 30 78 00                                         ,0x.

0000050e <_ZZN12Adafruit_BLE16install_callbackEbaaE3__c_0>:
     50e:	41 54 2b 45 56 45 4e 54 44 49 53 41 42 4c 45 3d     AT+EVENTDISABLE=
     51e:	30 78 00                                            0x.

00000521 <_ZZN12Adafruit_BLE16install_callbackEbaaE3__c>:
     521:	41 54 2b 45 56 45 4e 54 45 4e 41 42 4c 45 3d 30     AT+EVENTENABLE=0
     531:	78 00                                               x.

00000533 <_ZZ17ble_setKeyboardOnE3__c>:
     533:	41 54 2b 42 6c 65 4b 65 79 62 6f 61 72 64 45 6e     AT+BleKeyboardEn
     543:	3d 4f 6e 00                                         =On.

00000547 <_ZZ12ble_setHIDEnE3__c>:
     547:	41 54 2b 42 6c 65 48 49 44 45 6e 3d 4f 6e 00        AT+BleHIDEn=On.

00000556 <_ZZ11ble_setNameE3__c>:
     556:	41 54 2b 47 41 50 44 45 56 4e 41 4d 45 3d 59 65     AT+GAPDEVNAME=Ye
     566:	6b 20 4b 65 79 62 6f 61 72 64 00 00                 k Keyboard..

00000572 <__ctors_end>:
     572:	11 24       	eor	r1, r1
     574:	1f be       	out	0x3f, r1	; 63
     576:	cf ef       	ldi	r28, 0xFF	; 255
     578:	da e0       	ldi	r29, 0x0A	; 10
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	cd bf       	out	0x3d, r28	; 61

0000057e <__do_copy_data>:
     57e:	13 e0       	ldi	r17, 0x03	; 3
     580:	a0 e0       	ldi	r26, 0x00	; 0
     582:	b1 e0       	ldi	r27, 0x01	; 1
     584:	ee ed       	ldi	r30, 0xDE	; 222
     586:	f8 e4       	ldi	r31, 0x48	; 72
     588:	02 c0       	rjmp	.+4      	; 0x58e <__do_copy_data+0x10>
     58a:	05 90       	lpm	r0, Z+
     58c:	0d 92       	st	X+, r0
     58e:	a2 31       	cpi	r26, 0x12	; 18
     590:	b1 07       	cpc	r27, r17
     592:	d9 f7       	brne	.-10     	; 0x58a <__do_copy_data+0xc>

00000594 <__do_clear_bss>:
     594:	25 e0       	ldi	r18, 0x05	; 5
     596:	a2 e1       	ldi	r26, 0x12	; 18
     598:	b3 e0       	ldi	r27, 0x03	; 3
     59a:	01 c0       	rjmp	.+2      	; 0x59e <.do_clear_bss_start>

0000059c <.do_clear_bss_loop>:
     59c:	1d 92       	st	X+, r1

0000059e <.do_clear_bss_start>:
     59e:	a4 37       	cpi	r26, 0x74	; 116
     5a0:	b2 07       	cpc	r27, r18
     5a2:	e1 f7       	brne	.-8      	; 0x59c <.do_clear_bss_loop>
     5a4:	0e 94 07 19 	call	0x320e	; 0x320e <main>
     5a8:	0c 94 6d 24 	jmp	0x48da	; 0x48da <_exit>

000005ac <__bad_interrupt>:
     5ac:	29 cd       	rjmp	.-1454   	; 0x0 <__vectors>

000005ae <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     5ae:	29 2f       	mov	r18, r25
     5b0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     5b2:	22 30       	cpi	r18, 0x02	; 2
     5b4:	31 05       	cpc	r19, r1
     5b6:	71 f0       	breq	.+28     	; 0x5d4 <CALLBACK_USB_GetDescriptor+0x26>
     5b8:	23 30       	cpi	r18, 0x03	; 3
     5ba:	31 05       	cpc	r19, r1
     5bc:	81 f0       	breq	.+32     	; 0x5de <CALLBACK_USB_GetDescriptor+0x30>
     5be:	21 30       	cpi	r18, 0x01	; 1
     5c0:	31 05       	cpc	r19, r1
     5c2:	a1 f4       	brne	.+40     	; 0x5ec <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     5c4:	82 e1       	ldi	r24, 0x12	; 18
     5c6:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     5c8:	26 e2       	ldi	r18, 0x26	; 38
     5ca:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     5cc:	fa 01       	movw	r30, r20
     5ce:	31 83       	std	Z+1, r19	; 0x01
     5d0:	20 83       	st	Z, r18
	return Size;
}
     5d2:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
     5d4:	8e e3       	ldi	r24, 0x3E	; 62
     5d6:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     5d8:	28 ee       	ldi	r18, 0xE8	; 232
     5da:	30 e0       	ldi	r19, 0x00	; 0
			break;
     5dc:	f7 cf       	rjmp	.-18     	; 0x5cc <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
     5de:	99 27       	eor	r25, r25
     5e0:	81 30       	cpi	r24, 0x01	; 1
     5e2:	91 05       	cpc	r25, r1
     5e4:	71 f0       	breq	.+28     	; 0x602 <CALLBACK_USB_GetDescriptor+0x54>
     5e6:	38 f0       	brcs	.+14     	; 0x5f6 <CALLBACK_USB_GetDescriptor+0x48>
     5e8:	02 97       	sbiw	r24, 0x02	; 2
     5ea:	71 f0       	breq	.+28     	; 0x608 <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	eb cf       	rjmp	.-42     	; 0x5cc <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     5f6:	e4 ee       	ldi	r30, 0xE4	; 228
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
     5fa:	84 91       	lpm	r24, Z
     5fc:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     5fe:	9f 01       	movw	r18, r30
					break;
     600:	e5 cf       	rjmp	.-54     	; 0x5cc <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     602:	ea ec       	ldi	r30, 0xCA	; 202
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	f9 cf       	rjmp	.-14     	; 0x5fa <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     608:	ec ea       	ldi	r30, 0xAC	; 172
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	f6 cf       	rjmp	.-20     	; 0x5fa <CALLBACK_USB_GetDescriptor+0x4c>

0000060e <u8x8_get_glyph_data>:

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	dc 01       	movw	r26, r24
     614:	1c 96       	adiw	r26, 0x0c	; 12
     616:	ed 91       	ld	r30, X+
     618:	fc 91       	ld	r31, X
     61a:	1d 97       	sbiw	r26, 0x0d	; 13
     61c:	84 91       	lpm	r24, Z
     61e:	31 96       	adiw	r30, 0x01	; 1
     620:	e4 91       	lpm	r30, Z
     622:	68 17       	cp	r22, r24
     624:	68 f1       	brcs	.+90     	; 0x680 <u8x8_get_glyph_data+0x72>
     626:	e6 17       	cp	r30, r22
     628:	58 f1       	brcs	.+86     	; 0x680 <u8x8_get_glyph_data+0x72>
     62a:	68 1b       	sub	r22, r24
     62c:	77 0b       	sbc	r23, r23
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	66 0f       	add	r22, r22
     632:	77 1f       	adc	r23, r23
     634:	8a 95       	dec	r24
     636:	e1 f7       	brne	.-8      	; 0x630 <u8x8_get_glyph_data+0x22>
     638:	cb 01       	movw	r24, r22
     63a:	02 96       	adiw	r24, 0x02	; 2
     63c:	ea 01       	movw	r28, r20
     63e:	66 5f       	subi	r22, 0xF6	; 246
     640:	7f 4f       	sbci	r23, 0xFF	; 255
     642:	1c 96       	adiw	r26, 0x0c	; 12
     644:	ed 91       	ld	r30, X+
     646:	fc 91       	ld	r31, X
     648:	1d 97       	sbiw	r26, 0x0d	; 13
     64a:	e8 0f       	add	r30, r24
     64c:	f9 1f       	adc	r31, r25
     64e:	e4 91       	lpm	r30, Z
     650:	e9 93       	st	Y+, r30
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	86 17       	cp	r24, r22
     656:	97 07       	cpc	r25, r23
     658:	a1 f7       	brne	.-24     	; 0x642 <u8x8_get_glyph_data+0x34>
     65a:	51 96       	adiw	r26, 0x11	; 17
     65c:	8c 91       	ld	r24, X
     65e:	88 23       	and	r24, r24
     660:	61 f0       	breq	.+24     	; 0x67a <u8x8_get_glyph_data+0x6c>
     662:	fa 01       	movw	r30, r20
     664:	9a 01       	movw	r18, r20
     666:	28 5f       	subi	r18, 0xF8	; 248
     668:	3f 4f       	sbci	r19, 0xFF	; 255
     66a:	81 91       	ld	r24, Z+
     66c:	df 01       	movw	r26, r30
     66e:	11 97       	sbiw	r26, 0x01	; 1
     670:	80 95       	com	r24
     672:	8c 93       	st	X, r24
     674:	2e 17       	cp	r18, r30
     676:	3f 07       	cpc	r19, r31
     678:	c1 f7       	brne	.-16     	; 0x66a <u8x8_get_glyph_data+0x5c>
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret
     680:	fa 01       	movw	r30, r20
     682:	ca 01       	movw	r24, r20
     684:	08 96       	adiw	r24, 0x08	; 8
     686:	11 92       	st	Z+, r1
     688:	e8 17       	cp	r30, r24
     68a:	f9 07       	cpc	r31, r25
     68c:	e1 f7       	brne	.-8      	; 0x686 <u8x8_get_glyph_data+0x78>
     68e:	e5 cf       	rjmp	.-54     	; 0x65a <u8x8_get_glyph_data+0x4c>

00000690 <u8x8_ascii_next>:
     690:	66 23       	and	r22, r22
     692:	29 f0       	breq	.+10     	; 0x69e <u8x8_ascii_next+0xe>
     694:	6a 30       	cpi	r22, 0x0A	; 10
     696:	19 f0       	breq	.+6      	; 0x69e <u8x8_ascii_next+0xe>
     698:	86 2f       	mov	r24, r22
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	08 95       	ret
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	9f ef       	ldi	r25, 0xFF	; 255
     6a2:	08 95       	ret

000006a4 <u8x8_SetFont>:
     6a4:	fc 01       	movw	r30, r24
     6a6:	75 87       	std	Z+13, r23	; 0x0d
     6a8:	64 87       	std	Z+12, r22	; 0x0c
     6aa:	08 95       	ret

000006ac <u8x8_DrawGlyph>:
     6ac:	cf 92       	push	r12
     6ae:	df 92       	push	r13
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	28 97       	sbiw	r28, 0x08	; 8
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	7c 01       	movw	r14, r24
     6ce:	d6 2e       	mov	r13, r22
     6d0:	c4 2e       	mov	r12, r20
     6d2:	ae 01       	movw	r20, r28
     6d4:	4f 5f       	subi	r20, 0xFF	; 255
     6d6:	5f 4f       	sbci	r21, 0xFF	; 255
     6d8:	62 2f       	mov	r22, r18
     6da:	99 df       	rcall	.-206    	; 0x60e <u8x8_get_glyph_data>
     6dc:	8e 01       	movw	r16, r28
     6de:	0f 5f       	subi	r16, 0xFF	; 255
     6e0:	1f 4f       	sbci	r17, 0xFF	; 255
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	4c 2d       	mov	r20, r12
     6e6:	6d 2d       	mov	r22, r13
     6e8:	c7 01       	movw	r24, r14
     6ea:	7d d0       	rcall	.+250    	; 0x7e6 <u8x8_DrawTile>
     6ec:	28 96       	adiw	r28, 0x08	; 8
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	df 90       	pop	r13
     706:	cf 90       	pop	r12
     708:	08 95       	ret

0000070a <u8x8_draw_string>:
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	ec 01       	movw	r28, r24
     71a:	e6 2e       	mov	r14, r22
     71c:	d4 2e       	mov	r13, r20
     71e:	1d 8a       	std	Y+21, r1	; 0x15
     720:	89 01       	movw	r16, r18
     722:	f1 2c       	mov	r15, r1
     724:	f8 01       	movw	r30, r16
     726:	61 91       	ld	r22, Z+
     728:	8f 01       	movw	r16, r30
     72a:	ea 81       	ldd	r30, Y+2	; 0x02
     72c:	fb 81       	ldd	r31, Y+3	; 0x03
     72e:	ce 01       	movw	r24, r28
     730:	09 95       	icall
     732:	8f 3f       	cpi	r24, 0xFF	; 255
     734:	98 07       	cpc	r25, r24
     736:	61 f0       	breq	.+24     	; 0x750 <u8x8_draw_string+0x46>
     738:	8e 3f       	cpi	r24, 0xFE	; 254
     73a:	2f ef       	ldi	r18, 0xFF	; 255
     73c:	92 07       	cpc	r25, r18
     73e:	91 f3       	breq	.-28     	; 0x724 <u8x8_draw_string+0x1a>
     740:	28 2f       	mov	r18, r24
     742:	4d 2d       	mov	r20, r13
     744:	6e 2d       	mov	r22, r14
     746:	ce 01       	movw	r24, r28
     748:	b1 df       	rcall	.-158    	; 0x6ac <u8x8_DrawGlyph>
     74a:	e3 94       	inc	r14
     74c:	f3 94       	inc	r15
     74e:	ea cf       	rjmp	.-44     	; 0x724 <u8x8_draw_string+0x1a>
     750:	8f 2d       	mov	r24, r15
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	08 95       	ret

00000762 <u8x8_DrawString>:
}


uint8_t u8x8_DrawString(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
  u8x8->next_cb = u8x8_ascii_next;
     762:	e8 e4       	ldi	r30, 0x48	; 72
     764:	f3 e0       	ldi	r31, 0x03	; 3
     766:	dc 01       	movw	r26, r24
     768:	13 96       	adiw	r26, 0x03	; 3
     76a:	fc 93       	st	X, r31
     76c:	ee 93       	st	-X, r30
  return u8x8_draw_string(u8x8, x, y, s);
     76e:	12 97       	sbiw	r26, 0x02	; 2
     770:	cc cf       	rjmp	.-104    	; 0x70a <u8x8_draw_string>

00000772 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
     772:	fc 01       	movw	r30, r24
     774:	71 83       	std	Z+1, r23	; 0x01
     776:	60 83       	st	Z, r22
     778:	fb 01       	movw	r30, r22
     77a:	22 89       	ldd	r18, Z+18	; 0x12
     77c:	fc 01       	movw	r30, r24
     77e:	20 8b       	std	Z+16, r18	; 0x10
     780:	08 95       	ret

00000782 <u8x8_d_helper_display_init>:
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	ec 01       	movw	r28, r24
     788:	ea 85       	ldd	r30, Y+10	; 0x0a
     78a:	fb 85       	ldd	r31, Y+11	; 0x0b
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	68 e2       	ldi	r22, 0x28	; 40
     794:	09 95       	icall
     796:	ee 81       	ldd	r30, Y+6	; 0x06
     798:	ff 81       	ldd	r31, Y+7	; 0x07
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	64 e1       	ldi	r22, 0x14	; 20
     7a2:	ce 01       	movw	r24, r28
     7a4:	09 95       	icall
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	6b e4       	ldi	r22, 0x4B	; 75
     7aa:	ce 01       	movw	r24, r28
     7ac:	21 d2       	rcall	.+1090   	; 0xbf0 <u8x8_gpio_call>
     7ae:	e8 81       	ld	r30, Y
     7b0:	f9 81       	ldd	r31, Y+1	; 0x01
     7b2:	44 81       	ldd	r20, Z+4	; 0x04
     7b4:	69 e2       	ldi	r22, 0x29	; 41
     7b6:	ce 01       	movw	r24, r28
     7b8:	1b d2       	rcall	.+1078   	; 0xbf0 <u8x8_gpio_call>
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	6b e4       	ldi	r22, 0x4B	; 75
     7be:	ce 01       	movw	r24, r28
     7c0:	17 d2       	rcall	.+1070   	; 0xbf0 <u8x8_gpio_call>
     7c2:	e8 81       	ld	r30, Y
     7c4:	f9 81       	ldd	r31, Y+1	; 0x01
     7c6:	44 81       	ldd	r20, Z+4	; 0x04
     7c8:	69 e2       	ldi	r22, 0x29	; 41
     7ca:	ce 01       	movw	r24, r28
     7cc:	11 d2       	rcall	.+1058   	; 0xbf0 <u8x8_gpio_call>
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	6b e4       	ldi	r22, 0x4B	; 75
     7d2:	ce 01       	movw	r24, r28
     7d4:	0d d2       	rcall	.+1050   	; 0xbf0 <u8x8_gpio_call>
     7d6:	e8 81       	ld	r30, Y
     7d8:	f9 81       	ldd	r31, Y+1	; 0x01
     7da:	45 81       	ldd	r20, Z+5	; 0x05
     7dc:	69 e2       	ldi	r22, 0x29	; 41
     7de:	ce 01       	movw	r24, r28
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	05 c2       	rjmp	.+1034   	; 0xbf0 <u8x8_gpio_call>

000007e6 <u8x8_DrawTile>:
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <u8x8_DrawTile+0xa>
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <u8x8_DrawTile+0xc>
     7f2:	1f 92       	push	r1
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	6c 83       	std	Y+4, r22	; 0x04
     7fa:	4d 83       	std	Y+5, r20	; 0x05
     7fc:	2b 83       	std	Y+3, r18	; 0x03
     7fe:	1a 83       	std	Y+2, r17	; 0x02
     800:	09 83       	std	Y+1, r16	; 0x01
     802:	dc 01       	movw	r26, r24
     804:	14 96       	adiw	r26, 0x04	; 4
     806:	ed 91       	ld	r30, X+
     808:	fc 91       	ld	r31, X
     80a:	9e 01       	movw	r18, r28
     80c:	2f 5f       	subi	r18, 0xFF	; 255
     80e:	3f 4f       	sbci	r19, 0xFF	; 255
     810:	41 e0       	ldi	r20, 0x01	; 1
     812:	6f e0       	ldi	r22, 0x0F	; 15
     814:	09 95       	icall
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <u8x8_SetupMemory>:
     82a:	dc 01       	movw	r26, r24
     82c:	14 96       	adiw	r26, 0x04	; 4
     82e:	ed 91       	ld	r30, X+
     830:	fc 91       	ld	r31, X
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	69 e0       	ldi	r22, 0x09	; 9
     83a:	09 94       	ijmp

0000083c <u8x8_InitDisplay>:
     83c:	dc 01       	movw	r26, r24
     83e:	14 96       	adiw	r26, 0x04	; 4
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	6a e0       	ldi	r22, 0x0A	; 10
     84c:	09 94       	ijmp

0000084e <u8x8_SetPowerSave>:
     84e:	46 2f       	mov	r20, r22
     850:	dc 01       	movw	r26, r24
     852:	14 96       	adiw	r26, 0x04	; 4
     854:	ed 91       	ld	r30, X+
     856:	fc 91       	ld	r31, X
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	6b e0       	ldi	r22, 0x0B	; 11
     85e:	09 94       	ijmp

00000860 <u8x8_SetFlipMode>:
     860:	46 2f       	mov	r20, r22
     862:	dc 01       	movw	r26, r24
     864:	14 96       	adiw	r26, 0x04	; 4
     866:	ed 91       	ld	r30, X+
     868:	fc 91       	ld	r31, X
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	6d e0       	ldi	r22, 0x0D	; 13
     870:	09 94       	ijmp

00000872 <u8x8_ClearDisplayWithTile>:
}

void u8x8_ClearDisplayWithTile(u8x8_t *u8x8, const uint8_t *buf)
{
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <u8x8_ClearDisplayWithTile+0x10>
     882:	00 d0       	rcall	.+0      	; 0x884 <u8x8_ClearDisplayWithTile+0x12>
     884:	1f 92       	push	r1
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	8c 01       	movw	r16, r24
  u8x8_tile_t tile;
  uint8_t h;

  tile.x_pos = 0;
     88c:	1c 82       	std	Y+4, r1	; 0x04
  tile.cnt = 1;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	8b 83       	std	Y+3, r24	; 0x03
  tile.tile_ptr = (uint8_t *)buf;		/* tile_ptr should be const, but isn't */
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	69 83       	std	Y+1, r22	; 0x01
  
  h = u8x8->display_info->tile_height;
     896:	d8 01       	movw	r26, r16
     898:	ed 91       	ld	r30, X+
     89a:	fc 91       	ld	r31, X
     89c:	f1 88       	ldd	r15, Z+17	; 0x11
  tile.y_pos = 0;
     89e:	1d 82       	std	Y+5, r1	; 0x05
  do
  {
    u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, u8x8->display_info->tile_width, (void *)&tile);
     8a0:	f8 01       	movw	r30, r16
     8a2:	a0 81       	ld	r26, Z
     8a4:	b1 81       	ldd	r27, Z+1	; 0x01
     8a6:	c4 80       	ldd	r12, Z+4	; 0x04
     8a8:	d5 80       	ldd	r13, Z+5	; 0x05
     8aa:	9e 01       	movw	r18, r28
     8ac:	2f 5f       	subi	r18, 0xFF	; 255
     8ae:	3f 4f       	sbci	r19, 0xFF	; 255
     8b0:	50 96       	adiw	r26, 0x10	; 16
     8b2:	4c 91       	ld	r20, X
     8b4:	6f e0       	ldi	r22, 0x0F	; 15
     8b6:	c8 01       	movw	r24, r16
     8b8:	f6 01       	movw	r30, r12
     8ba:	09 95       	icall
    tile.y_pos++;
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	8f 5f       	subi	r24, 0xFF	; 255
     8c0:	8d 83       	std	Y+5, r24	; 0x05
  } while( tile.y_pos < h );
     8c2:	8f 15       	cp	r24, r15
     8c4:	68 f3       	brcs	.-38     	; 0x8a0 <u8x8_ClearDisplayWithTile+0x2e>
}
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	08 95       	ret

000008e0 <u8x8_ClearDisplay>:

void u8x8_ClearDisplay(u8x8_t *u8x8)
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	28 97       	sbiw	r28, 0x08	; 8
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
     8f4:	be 01       	movw	r22, r28
     8f6:	6f 5f       	subi	r22, 0xFF	; 255
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	28 e0       	ldi	r18, 0x08	; 8
     8fc:	fb 01       	movw	r30, r22
     8fe:	11 92       	st	Z+, r1
     900:	2a 95       	dec	r18
  u8x8_ClearDisplayWithTile(u8x8, buf);
     902:	e9 f7       	brne	.-6      	; 0x8fe <u8x8_ClearDisplay+0x1e>
}
     904:	b6 df       	rcall	.-148    	; 0x872 <u8x8_ClearDisplayWithTile>
     906:	28 96       	adiw	r28, 0x08	; 8
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
     918:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
     91a:	dc 01       	movw	r26, r24
     91c:	18 96       	adiw	r26, 0x08	; 8
     91e:	ed 91       	ld	r30, X+
     920:	fc 91       	ld	r31, X
     922:	46 2f       	mov	r20, r22
     924:	67 e1       	ldi	r22, 0x17	; 23
     926:	09 94       	ijmp

00000928 <u8x8_byte_SendByte>:
}

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	1f 92       	push	r1
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
     934:	ae 01       	movw	r20, r28
     936:	4f 5f       	subi	r20, 0xFF	; 255
     938:	5f 4f       	sbci	r21, 0xFF	; 255
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	ed df       	rcall	.-38     	; 0x918 <u8x8_byte_SendBytes>
}
     93e:	0f 90       	pop	r0
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
     946:	dc 01       	movw	r26, r24
     948:	18 96       	adiw	r26, 0x08	; 8
     94a:	ed 91       	ld	r30, X+
     94c:	fc 91       	ld	r31, X
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	68 e1       	ldi	r22, 0x18	; 24
     956:	09 94       	ijmp

00000958 <u8x8_byte_EndTransfer>:
}

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
     958:	dc 01       	movw	r26, r24
     95a:	18 96       	adiw	r26, 0x08	; 8
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	69 e1       	ldi	r22, 0x19	; 25
     968:	09 94       	ijmp

0000096a <u8x8_i2c_data_transfer>:
	  b <<= 4;
	  *ptr++= b;
	  i--;
	} while( i > 0 );
	arg_int -= 8;
	u8x8_byte_SendBytes(u8x8, 16, buf); 
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	ec 01       	movw	r28, r24
     976:	16 2f       	mov	r17, r22
     978:	7a 01       	movw	r14, r20
     97a:	e5 df       	rcall	.-54     	; 0x946 <u8x8_byte_StartTransfer>
     97c:	60 e4       	ldi	r22, 0x40	; 64
     97e:	ce 01       	movw	r24, r28
     980:	d3 df       	rcall	.-90     	; 0x928 <u8x8_byte_SendByte>
     982:	e8 85       	ldd	r30, Y+8	; 0x08
     984:	f9 85       	ldd	r31, Y+9	; 0x09
     986:	97 01       	movw	r18, r14
     988:	41 2f       	mov	r20, r17
     98a:	67 e1       	ldi	r22, 0x17	; 23
     98c:	ce 01       	movw	r24, r28
     98e:	09 95       	icall
     990:	ce 01       	movw	r24, r28
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	dd cf       	rjmp	.-70     	; 0x958 <u8x8_byte_EndTransfer>

0000099e <u8x8_cad_SendCmd>:
     99e:	46 2f       	mov	r20, r22
     9a0:	dc 01       	movw	r26, r24
     9a2:	16 96       	adiw	r26, 0x06	; 6
     9a4:	ed 91       	ld	r30, X+
     9a6:	fc 91       	ld	r31, X
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	65 e1       	ldi	r22, 0x15	; 21
     9ae:	09 94       	ijmp

000009b0 <u8x8_cad_SendArg>:
     9b0:	46 2f       	mov	r20, r22
     9b2:	dc 01       	movw	r26, r24
     9b4:	16 96       	adiw	r26, 0x06	; 6
     9b6:	ed 91       	ld	r30, X+
     9b8:	fc 91       	ld	r31, X
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	66 e1       	ldi	r22, 0x16	; 22
     9c0:	09 94       	ijmp

000009c2 <u8x8_cad_SendData>:
     9c2:	9a 01       	movw	r18, r20
     9c4:	dc 01       	movw	r26, r24
     9c6:	16 96       	adiw	r26, 0x06	; 6
     9c8:	ed 91       	ld	r30, X+
     9ca:	fc 91       	ld	r31, X
     9cc:	46 2f       	mov	r20, r22
     9ce:	67 e1       	ldi	r22, 0x17	; 23
     9d0:	09 94       	ijmp

000009d2 <u8x8_cad_StartTransfer>:
     9d2:	dc 01       	movw	r26, r24
     9d4:	16 96       	adiw	r26, 0x06	; 6
     9d6:	ed 91       	ld	r30, X+
     9d8:	fc 91       	ld	r31, X
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	68 e1       	ldi	r22, 0x18	; 24
     9e2:	09 94       	ijmp

000009e4 <u8x8_cad_EndTransfer>:
     9e4:	dc 01       	movw	r26, r24
     9e6:	16 96       	adiw	r26, 0x06	; 6
     9e8:	ed 91       	ld	r30, X+
     9ea:	fc 91       	ld	r31, X
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	69 e1       	ldi	r22, 0x19	; 25
     9f4:	09 94       	ijmp

000009f6 <u8x8_cad_SendSequence>:
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	1f 92       	push	r1
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	7c 01       	movw	r14, r24
     a0a:	8b 01       	movw	r16, r22
     a0c:	d8 01       	movw	r26, r16
     a0e:	6c 91       	ld	r22, X
     a10:	67 31       	cpi	r22, 0x17	; 23
     a12:	21 f1       	breq	.+72     	; 0xa5c <u8x8_cad_SendSequence+0x66>
     a14:	50 f4       	brcc	.+20     	; 0xa2a <u8x8_cad_SendSequence+0x34>
     a16:	65 31       	cpi	r22, 0x15	; 21
     a18:	98 f4       	brcc	.+38     	; 0xa40 <u8x8_cad_SendSequence+0x4a>
     a1a:	0f 90       	pop	r0
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	08 95       	ret
     a2a:	6a 31       	cpi	r22, 0x1A	; 26
     a2c:	08 f1       	brcs	.+66     	; 0xa70 <u8x8_cad_SendSequence+0x7a>
     a2e:	6e 3f       	cpi	r22, 0xFE	; 254
     a30:	a1 f7       	brne	.-24     	; 0xa1a <u8x8_cad_SendSequence+0x24>
     a32:	f8 01       	movw	r30, r16
     a34:	41 81       	ldd	r20, Z+1	; 0x01
     a36:	49 83       	std	Y+1, r20	; 0x01
     a38:	69 e2       	ldi	r22, 0x29	; 41
     a3a:	c7 01       	movw	r24, r14
     a3c:	d9 d0       	rcall	.+434    	; 0xbf0 <u8x8_gpio_call>
     a3e:	0b c0       	rjmp	.+22     	; 0xa56 <u8x8_cad_SendSequence+0x60>
     a40:	f8 01       	movw	r30, r16
     a42:	41 81       	ldd	r20, Z+1	; 0x01
     a44:	49 83       	std	Y+1, r20	; 0x01
     a46:	d7 01       	movw	r26, r14
     a48:	16 96       	adiw	r26, 0x06	; 6
     a4a:	ed 91       	ld	r30, X+
     a4c:	fc 91       	ld	r31, X
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	c7 01       	movw	r24, r14
     a54:	09 95       	icall
     a56:	0e 5f       	subi	r16, 0xFE	; 254
     a58:	1f 4f       	sbci	r17, 0xFF	; 255
     a5a:	d8 cf       	rjmp	.-80     	; 0xa0c <u8x8_cad_SendSequence+0x16>
     a5c:	f8 01       	movw	r30, r16
     a5e:	81 81       	ldd	r24, Z+1	; 0x01
     a60:	89 83       	std	Y+1, r24	; 0x01
     a62:	ae 01       	movw	r20, r28
     a64:	4f 5f       	subi	r20, 0xFF	; 255
     a66:	5f 4f       	sbci	r21, 0xFF	; 255
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	c7 01       	movw	r24, r14
     a6c:	aa df       	rcall	.-172    	; 0x9c2 <u8x8_cad_SendData>
     a6e:	f3 cf       	rjmp	.-26     	; 0xa56 <u8x8_cad_SendSequence+0x60>
     a70:	0f 5f       	subi	r16, 0xFF	; 255
     a72:	1f 4f       	sbci	r17, 0xFF	; 255
     a74:	d7 01       	movw	r26, r14
     a76:	16 96       	adiw	r26, 0x06	; 6
     a78:	ed 91       	ld	r30, X+
     a7a:	fc 91       	ld	r31, X
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	c7 01       	movw	r24, r14
     a84:	09 95       	icall
     a86:	c2 cf       	rjmp	.-124    	; 0xa0c <u8x8_cad_SendSequence+0x16>

00000a88 <u8x8_cad_ssd13xx_i2c>:
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
    u8x8_byte_EndTransfer(u8x8);
}

uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	ec 01       	movw	r28, r24
     a94:	14 2f       	mov	r17, r20
     a96:	79 01       	movw	r14, r18
  uint8_t *p;
  switch(msg)
     a98:	67 31       	cpi	r22, 0x17	; 23
     a9a:	30 f4       	brcc	.+12     	; 0xaa8 <u8x8_cad_ssd13xx_i2c+0x20>
     a9c:	65 31       	cpi	r22, 0x15	; 21
     a9e:	78 f4       	brcc	.+30     	; 0xabe <u8x8_cad_ssd13xx_i2c+0x36>
     aa0:	64 31       	cpi	r22, 0x14	; 20
     aa2:	29 f1       	breq	.+74     	; 0xaee <u8x8_cad_ssd13xx_i2c+0x66>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <u8x8_cad_ssd13xx_i2c+0x2a>
  switch(msg)
     aa8:	67 31       	cpi	r22, 0x17	; 23
     aaa:	d1 f0       	breq	.+52     	; 0xae0 <u8x8_cad_ssd13xx_i2c+0x58>
     aac:	6a 31       	cpi	r22, 0x1A	; 26
     aae:	d0 f7       	brcc	.-12     	; 0xaa4 <u8x8_cad_ssd13xx_i2c+0x1c>
  }
  return 1;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
      u8x8_byte_StartTransfer(u8x8);
     abc:	08 95       	ret
      u8x8_byte_SendByte(u8x8, 0x000);
     abe:	43 df       	rcall	.-378    	; 0x946 <u8x8_byte_StartTransfer>
     ac0:	60 e0       	ldi	r22, 0x00	; 0
      u8x8_byte_SendByte(u8x8, arg_int);
     ac2:	ce 01       	movw	r24, r28
     ac4:	31 df       	rcall	.-414    	; 0x928 <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
     ac6:	61 2f       	mov	r22, r17
     ac8:	ce 01       	movw	r24, r28
     aca:	2e df       	rcall	.-420    	; 0x928 <u8x8_byte_SendByte>
	u8x8_i2c_data_transfer(u8x8, 24, p);
     acc:	ce 01       	movw	r24, r28
     ace:	44 df       	rcall	.-376    	; 0x958 <u8x8_byte_EndTransfer>
     ad0:	ef cf       	rjmp	.-34     	; 0xab0 <u8x8_cad_ssd13xx_i2c+0x28>
     ad2:	68 e1       	ldi	r22, 0x18	; 24
	arg_int-=24;
     ad4:	ce 01       	movw	r24, r28
	p+=24;
     ad6:	49 df       	rcall	.-366    	; 0x96a <u8x8_i2c_data_transfer>
     ad8:	18 51       	subi	r17, 0x18	; 24
       while( arg_int > 24 )
     ada:	88 e1       	ldi	r24, 0x18	; 24
     adc:	e8 0e       	add	r14, r24
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
     ade:	f1 1c       	adc	r15, r1
     ae0:	a7 01       	movw	r20, r14
     ae2:	19 31       	cpi	r17, 0x19	; 25
     ae4:	b0 f7       	brcc	.-20     	; 0xad2 <u8x8_cad_ssd13xx_i2c+0x4a>
     ae6:	61 2f       	mov	r22, r17
      if ( u8x8->i2c_address == 255 )
     ae8:	ce 01       	movw	r24, r28
     aea:	3f df       	rcall	.-386    	; 0x96a <u8x8_i2c_data_transfer>
     aec:	e1 cf       	rjmp	.-62     	; 0xab0 <u8x8_cad_ssd13xx_i2c+0x28>
	u8x8->i2c_address = 0x078;
     aee:	8a 89       	ldd	r24, Y+18	; 0x12
     af0:	8f 3f       	cpi	r24, 0xFF	; 255
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
     af2:	11 f4       	brne	.+4      	; 0xaf8 <u8x8_cad_ssd13xx_i2c+0x70>
     af4:	88 e7       	ldi	r24, 0x78	; 120
     af6:	8a 8b       	std	Y+18, r24	; 0x12
     af8:	e8 85       	ldd	r30, Y+8	; 0x08
     afa:	f9 85       	ldd	r31, Y+9	; 0x09
     afc:	97 01       	movw	r18, r14
}
     afe:	41 2f       	mov	r20, r17
     b00:	64 e1       	ldi	r22, 0x14	; 20
     b02:	ce 01       	movw	r24, r28
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
     b08:	1f 91       	pop	r17
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	09 94       	ijmp

00000b10 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	ec 01       	movw	r28, r24
     b1e:	04 2f       	mov	r16, r20
     b20:	79 01       	movw	r14, r18
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
     b22:	69 30       	cpi	r22, 0x09	; 9
     b24:	59 f4       	brne	.+22     	; 0xb3c <u8x8_d_ssd1306_128x32_univision+0x2c>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
     b26:	6b e2       	ldi	r22, 0x2B	; 43
     b28:	71 e0       	ldi	r23, 0x01	; 1
     b2a:	23 de       	rcall	.-954    	; 0x772 <u8x8_d_helper_display_setup_memory>
  return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
      return 1;
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
}
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	08 95       	ret
  switch(msg)
     b3c:	6d 30       	cpi	r22, 0x0D	; 13
     b3e:	09 f4       	brne	.+2      	; 0xb42 <u8x8_d_ssd1306_128x32_univision+0x32>
     b40:	3c c0       	rjmp	.+120    	; 0xbba <u8x8_d_ssd1306_128x32_univision+0xaa>
     b42:	30 f4       	brcc	.+12     	; 0xb50 <u8x8_d_ssd1306_128x32_univision+0x40>
     b44:	6a 30       	cpi	r22, 0x0A	; 10
     b46:	61 f1       	breq	.+88     	; 0xba0 <u8x8_d_ssd1306_128x32_univision+0x90>
     b48:	6b 30       	cpi	r22, 0x0B	; 11
     b4a:	81 f1       	breq	.+96     	; 0xbac <u8x8_d_ssd1306_128x32_univision+0x9c>
      return 0;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	ef cf       	rjmp	.-34     	; 0xb2e <u8x8_d_ssd1306_128x32_univision+0x1e>
  switch(msg)
     b50:	6e 30       	cpi	r22, 0x0E	; 14
     b52:	09 f4       	brne	.+2      	; 0xb56 <u8x8_d_ssd1306_128x32_univision+0x46>
     b54:	43 c0       	rjmp	.+134    	; 0xbdc <u8x8_d_ssd1306_128x32_univision+0xcc>
     b56:	6f 30       	cpi	r22, 0x0F	; 15
      u8x8_cad_StartTransfer(u8x8);
     b58:	c9 f7       	brne	.-14     	; 0xb4c <u8x8_d_ssd1306_128x32_univision+0x3c>
     b5a:	3b df       	rcall	.-394    	; 0x9d2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
     b5c:	f7 01       	movw	r30, r14
     b5e:	13 81       	ldd	r17, Z+3	; 0x03
      x *= 8;
     b60:	11 0f       	add	r17, r17
     b62:	11 0f       	add	r17, r17
     b64:	11 0f       	add	r17, r17
      x += u8x8->x_offset;
     b66:	68 89       	ldd	r22, Y+16	; 0x10
     b68:	16 0f       	add	r17, r22
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
     b6a:	61 2f       	mov	r22, r17
     b6c:	62 95       	swap	r22
     b6e:	6f 70       	andi	r22, 0x0F	; 15
     b70:	60 61       	ori	r22, 0x10	; 16
     b72:	ce 01       	movw	r24, r28
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
     b74:	14 df       	rcall	.-472    	; 0x99e <u8x8_cad_SendCmd>
     b76:	61 2f       	mov	r22, r17
     b78:	6f 70       	andi	r22, 0x0F	; 15
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
     b7a:	ce 01       	movw	r24, r28
     b7c:	10 df       	rcall	.-480    	; 0x99e <u8x8_cad_SendCmd>
     b7e:	f7 01       	movw	r30, r14
     b80:	64 81       	ldd	r22, Z+4	; 0x04
     b82:	60 6b       	ori	r22, 0xB0	; 176
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
     b84:	ce 01       	movw	r24, r28
     b86:	0b df       	rcall	.-490    	; 0x99e <u8x8_cad_SendCmd>
     b88:	f7 01       	movw	r30, r14
     b8a:	40 81       	ld	r20, Z
     b8c:	51 81       	ldd	r21, Z+1	; 0x01
     b8e:	62 81       	ldd	r22, Z+2	; 0x02
     b90:	66 0f       	add	r22, r22
     b92:	66 0f       	add	r22, r22
      } while( arg_int > 0 );
     b94:	66 0f       	add	r22, r22
      u8x8_d_helper_display_init(u8x8);
     b96:	ce 01       	movw	r24, r28
     b98:	14 df       	rcall	.-472    	; 0x9c2 <u8x8_cad_SendData>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
     b9a:	01 50       	subi	r16, 0x01	; 1
     b9c:	a9 f7       	brne	.-22     	; 0xb88 <u8x8_d_ssd1306_128x32_univision+0x78>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
     b9e:	25 c0       	rjmp	.+74     	; 0xbea <u8x8_d_ssd1306_128x32_univision+0xda>
     ba0:	f0 dd       	rcall	.-1056   	; 0x782 <u8x8_d_helper_display_init>
     ba2:	6b e5       	ldi	r22, 0x5B	; 91
     ba4:	71 e0       	ldi	r23, 0x01	; 1
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
     ba6:	ce 01       	movw	r24, r28
     ba8:	26 df       	rcall	.-436    	; 0x9f6 <u8x8_cad_SendSequence>
      if ( arg_int == 0 )
     baa:	c0 cf       	rjmp	.-128    	; 0xb2c <u8x8_d_ssd1306_128x32_univision+0x1c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
     bac:	66 e5       	ldi	r22, 0x56	; 86
     bae:	71 e0       	ldi	r23, 0x01	; 1
     bb0:	44 23       	and	r20, r20
      if ( arg_int == 0 )
     bb2:	c9 f3       	breq	.-14     	; 0xba6 <u8x8_d_ssd1306_128x32_univision+0x96>
     bb4:	61 e5       	ldi	r22, 0x51	; 81
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
     bb6:	71 e0       	ldi	r23, 0x01	; 1
     bb8:	f6 cf       	rjmp	.-20     	; 0xba6 <u8x8_d_ssd1306_128x32_univision+0x96>
     bba:	41 11       	cpse	r20, r1
	u8x8->x_offset = u8x8->display_info->default_x_offset;
     bbc:	08 c0       	rjmp	.+16     	; 0xbce <u8x8_d_ssd1306_128x32_univision+0xbe>
     bbe:	6a e4       	ldi	r22, 0x4A	; 74
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
     bc0:	71 e0       	ldi	r23, 0x01	; 1
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
     bc2:	19 df       	rcall	.-462    	; 0x9f6 <u8x8_cad_SendSequence>
     bc4:	e8 81       	ld	r30, Y
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
     bc6:	f9 81       	ldd	r31, Y+1	; 0x01
     bc8:	82 89       	ldd	r24, Z+18	; 0x12
      u8x8_cad_StartTransfer(u8x8);
     bca:	88 8b       	std	Y+16, r24	; 0x10
     bcc:	af cf       	rjmp	.-162    	; 0xb2c <u8x8_d_ssd1306_128x32_univision+0x1c>
      u8x8_cad_SendCmd(u8x8, 0x081 );
     bce:	63 e4       	ldi	r22, 0x43	; 67
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	11 df       	rcall	.-478    	; 0x9f6 <u8x8_cad_SendSequence>
     bd4:	e8 81       	ld	r30, Y
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
     bd6:	f9 81       	ldd	r31, Y+1	; 0x01
     bd8:	83 89       	ldd	r24, Z+19	; 0x13
     bda:	f7 cf       	rjmp	.-18     	; 0xbca <u8x8_d_ssd1306_128x32_univision+0xba>
     bdc:	fa de       	rcall	.-524    	; 0x9d2 <u8x8_cad_StartTransfer>
      u8x8_cad_EndTransfer(u8x8);
     bde:	61 e8       	ldi	r22, 0x81	; 129
     be0:	ce 01       	movw	r24, r28
     be2:	dd de       	rcall	.-582    	; 0x99e <u8x8_cad_SendCmd>
     be4:	60 2f       	mov	r22, r16
     be6:	ce 01       	movw	r24, r28
     be8:	e3 de       	rcall	.-570    	; 0x9b0 <u8x8_cad_SendArg>
     bea:	ce 01       	movw	r24, r28
     bec:	fb de       	rcall	.-522    	; 0x9e4 <u8x8_cad_EndTransfer>
     bee:	9e cf       	rjmp	.-196    	; 0xb2c <u8x8_d_ssd1306_128x32_univision+0x1c>

00000bf0 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
     bf0:	dc 01       	movw	r26, r24
     bf2:	1a 96       	adiw	r26, 0x0a	; 10
     bf4:	ed 91       	ld	r30, X+
     bf6:	fc 91       	ld	r31, X
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	09 94       	ijmp

00000bfe <u8x8_dummy_cb>:

uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	08 95       	ret

00000c02 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
     c02:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
     c04:	11 82       	std	Z+1, r1	; 0x01
     c06:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	95 e0       	ldi	r25, 0x05	; 5
     c0c:	95 83       	std	Z+5, r25	; 0x05
     c0e:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
     c10:	97 83       	std	Z+7, r25	; 0x07
     c12:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
     c14:	91 87       	std	Z+9, r25	; 0x09
     c16:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
     c18:	93 87       	std	Z+11, r25	; 0x0b
     c1a:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
     c1c:	11 8a       	std	Z+17, r1	; 0x11
    u8x8->device_address = 0;
     c1e:	14 8a       	std	Z+20, r1	; 0x14
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
     c20:	15 8a       	std	Z+21, r1	; 0x15
    u8x8->i2c_address = 255;
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	82 8b       	std	Z+18, r24	; 0x12
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
     c26:	87 8b       	std	Z+23, r24	; 0x17
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
     c28:	08 95       	ret

00000c2a <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	ec 01       	movw	r28, r24
     c3c:	6b 01       	movw	r12, r22
     c3e:	7a 01       	movw	r14, r20
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
     c40:	89 01       	movw	r16, r18

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
     c42:	df df       	rcall	.-66     	; 0xc02 <u8x8_SetupDefaults>
     c44:	dd 82       	std	Y+5, r13	; 0x05
  u8x8->cad_cb = cad_cb;
     c46:	cc 82       	std	Y+4, r12	; 0x04
     c48:	ff 82       	std	Y+7, r15	; 0x07
  u8x8->byte_cb = byte_cb;
     c4a:	ee 82       	std	Y+6, r14	; 0x06
     c4c:	19 87       	std	Y+9, r17	; 0x09
  u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
     c4e:	08 87       	std	Y+8, r16	; 0x08
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	95 e0       	ldi	r25, 0x05	; 5
     c54:	9b 87       	std	Y+11, r25	; 0x0b

  /* setup display info */
  u8x8_SetupMemory(u8x8);
     c56:	8a 87       	std	Y+10, r24	; 0x0a
}
     c58:	ce 01       	movw	r24, r28
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
  u8x8_SetupMemory(u8x8);
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	df cd       	rjmp	.-1090   	; 0x82a <u8x8_SetupMemory>

00000c6c <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	84 bd       	out	0x24, r24	; 36
     c70:	93 e0       	ldi	r25, 0x03	; 3
     c72:	95 bd       	out	0x25, r25	; 37
     c74:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     c78:	8d e7       	ldi	r24, 0x7D	; 125
     c7a:	87 bd       	out	0x27, r24	; 39
     c7c:	08 95       	ret

00000c7e <millis_get>:
     c7e:	2f b7       	in	r18, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <__data_end>
     c86:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <__data_end+0x1>
     c8a:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <__data_end+0x2>
     c8e:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <__data_end+0x3>
     c92:	2f bf       	out	0x3f, r18	; 63
     c94:	08 95       	ret

00000c96 <__vector_21>:

ISR(ISR_VECT)
{
     c96:	1f 92       	push	r1
     c98:	0f 92       	push	r0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	8f 93       	push	r24
     ca2:	9f 93       	push	r25
     ca4:	af 93       	push	r26
     ca6:	bf 93       	push	r27
	++milliseconds;
     ca8:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <__data_end>
     cac:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <__data_end+0x1>
     cb0:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <__data_end+0x2>
     cb4:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <__data_end+0x3>
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	a1 1d       	adc	r26, r1
     cbc:	b1 1d       	adc	r27, r1
     cbe:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <__data_end>
     cc2:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <__data_end+0x1>
     cc6:	a0 93 14 03 	sts	0x0314, r26	; 0x800314 <__data_end+0x2>
     cca:	b0 93 15 03 	sts	0x0315, r27	; 0x800315 <__data_end+0x3>
}
     cce:	bf 91       	pop	r27
     cd0:	af 91       	pop	r26
     cd2:	9f 91       	pop	r25
     cd4:	8f 91       	pop	r24
     cd6:	0f 90       	pop	r0
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	0f 90       	pop	r0
     cdc:	1f 90       	pop	r1
     cde:	18 95       	reti

00000ce0 <fram_begin>:
#include "fram.h"

void fram_begin(void){
  // activate internal pullups for twi.
  // probably not really necessary considering we have external but doesnt hurt
  PORTD |= 0b00000011;
     ce0:	8b b1       	in	r24, 0x0b	; 11
     ce2:	83 60       	ori	r24, 0x03	; 3
     ce4:	8b b9       	out	0x0b, r24	; 11
			static inline void TWI_Init(const uint8_t Prescale,
			                            const uint8_t BitLength) ATTR_ALWAYS_INLINE;
			static inline void TWI_Init(const uint8_t Prescale,
			                            const uint8_t BitLength)
			{
				TWCR |= (1 << TWEN);
     ce6:	ec eb       	ldi	r30, 0xBC	; 188
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	84 60       	ori	r24, 0x04	; 4
     cee:	80 83       	st	Z, r24
				TWSR  = Prescale;
     cf0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
				TWBR  = BitLength;
     cf4:	80 e2       	ldi	r24, 0x20	; 32
     cf6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  // initialize the twi for communication
  TWI_Init(TWI_BIT_PRESCALE_1, TWI_BITLENGTH_FROM_FREQ(1, 100000));
}
     cfa:	08 95       	ret

00000cfc <fram_write8>:

void fram_write8 (uint16_t framAddr, uint8_t value)
{
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	d8 2f       	mov	r29, r24
     d04:	19 2f       	mov	r17, r25
     d06:	c6 2f       	mov	r28, r22
  TWI_StartTransmission (0x50, 10);
     d08:	6a e0       	ldi	r22, 0x0A	; 10
     d0a:	80 e5       	ldi	r24, 0x50	; 80
     d0c:	0e 94 4d 1a 	call	0x349a	; 0x349a <TWI_StartTransmission>
  TWI_SendByte(framAddr >> 8);
     d10:	81 2f       	mov	r24, r17
     d12:	0e 94 a1 1a 	call	0x3542	; 0x3542 <TWI_SendByte>
  TWI_SendByte(framAddr & 0xFF);
     d16:	8d 2f       	mov	r24, r29
     d18:	0e 94 a1 1a 	call	0x3542	; 0x3542 <TWI_SendByte>
  TWI_SendByte(value);
     d1c:	8c 2f       	mov	r24, r28
     d1e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <TWI_SendByte>

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     d22:	84 e9       	ldi	r24, 0x94	; 148
     d24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  TWI_StopTransmission();
}
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	08 95       	ret

00000d30 <fram_read8>:
uint8_t fram_read8(uint16_t framAddr)
{
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	1f 92       	push	r1
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	18 2f       	mov	r17, r24
     d40:	09 2f       	mov	r16, r25
  uint8_t Byte1;
  TWI_StartTransmission (0x50, 10);
     d42:	6a e0       	ldi	r22, 0x0A	; 10
     d44:	80 e5       	ldi	r24, 0x50	; 80
     d46:	0e 94 4d 1a 	call	0x349a	; 0x349a <TWI_StartTransmission>
  TWI_SendByte(framAddr >> 8);
     d4a:	80 2f       	mov	r24, r16
     d4c:	0e 94 a1 1a 	call	0x3542	; 0x3542 <TWI_SendByte>
  TWI_SendByte(framAddr & 0xFF);
     d50:	81 2f       	mov	r24, r17
     d52:	0e 94 a1 1a 	call	0x3542	; 0x3542 <TWI_SendByte>
     d56:	14 e9       	ldi	r17, 0x94	; 148
     d58:	10 93 bc 00 	sts	0x00BC, r17	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  TWI_StopTransmission();
  if (TWI_StartTransmission(0xA0 | TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError) {
     d5c:	6a e0       	ldi	r22, 0x0A	; 10
     d5e:	80 ea       	ldi	r24, 0xA0	; 160
     d60:	0e 94 4d 1a 	call	0x349a	; 0x349a <TWI_StartTransmission>
     d64:	81 11       	cpse	r24, r1
     d66:	07 c0       	rjmp	.+14     	; 0xd76 <fram_read8+0x46>
    // Read three bytes, acknowledge after the third byte is received
    TWI_ReceiveByte(&Byte1, true);
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <TWI_ReceiveByte>
     d72:	10 93 bc 00 	sts	0x00BC, r17	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    // Must stop transmission afterwards to release the bus
    TWI_StopTransmission();
  }
  return Byte1;
}
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	0f 90       	pop	r0
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <fps_New>:


static FPS_GT511C3 *fps = NULL;


void fps_New() {
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
    if (fps == NULL) {
     d88:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     d8c:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     d90:	89 2b       	or	r24, r25
     d92:	59 f4       	brne	.+22     	; 0xdaa <fps_New+0x26>
        // throw it on the stack we dont need heap runtime issues
        fps = new FPS_GT511C3();
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 92 10 	call	0x2124	; 0x2124 <_Znwj>
     d9c:	ec 01       	movw	r28, r24
     d9e:	0e 94 2d 11 	call	0x225a	; 0x225a <_ZN11FPS_GT511C3C1Ev>
     da2:	d0 93 17 03 	sts	0x0317, r29	; 0x800317 <_ZL3fps+0x1>
     da6:	c0 93 16 03 	sts	0x0316, r28	; 0x800316 <_ZL3fps>
    }
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <fps_Open>:
void fps_Open() {
    fps->Open();
     db0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     db4:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     db8:	0c 94 88 11 	jmp	0x2310	; 0x2310 <_ZN11FPS_GT511C34OpenEv>

00000dbc <fps_SetLED>:
}

void fps_SetLED(bool on){
    fps->SetLED(on);
     dbc:	68 2f       	mov	r22, r24
     dbe:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     dc2:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     dc6:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <_ZN11FPS_GT511C36SetLEDEb>

00000dca <fps_IsPressFinger>:
}
bool fps_IsPressFinger(){
    return (bool) fps->IsPressFinger();
     dca:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     dce:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     dd2:	0c 94 34 13 	jmp	0x2668	; 0x2668 <_ZN11FPS_GT511C313IsPressFingerEv>

00000dd6 <fps_CaptureFinger>:
}
bool fps_CaptureFinger(bool highquality){
    return fps->CaptureFinger(highquality);
     dd6:	68 2f       	mov	r22, r24
     dd8:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     ddc:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     de0:	0c 94 c5 13 	jmp	0x278a	; 0x278a <_ZN11FPS_GT511C313CaptureFingerEb>

00000de4 <fps_Identify1_N>:
}
int fps_Identify1_N(){
    return fps->Identify1_N();
     de4:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     de8:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     dec:	0c 94 95 13 	jmp	0x272a	; 0x272a <_ZN11FPS_GT511C311Identify1_NEv>

00000df0 <fps_DeleteAll>:
}
bool fps_DeleteAll(){
    return fps->DeleteAll();
     df0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     df4:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     df8:	0c 94 6d 13 	jmp	0x26da	; 0x26da <_ZN11FPS_GT511C39DeleteAllEv>

00000dfc <fps_EnrollStart>:
}

int fps_EnrollStart(int enrollid){
    return fps->EnrollStart(enrollid);
     dfc:	bc 01       	movw	r22, r24
     dfe:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     e02:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     e06:	0c 94 14 12 	jmp	0x2428	; 0x2428 <_ZN11FPS_GT511C311EnrollStartEi>

00000e0a <fps_CheckEnrolled>:
}

bool fps_CheckEnrolled(int id){
    return fps->CheckEnrolled(id);
     e0a:	bc 01       	movw	r22, r24
     e0c:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     e10:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     e14:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <_ZN11FPS_GT511C313CheckEnrolledEi>

00000e18 <fps_Enroll1>:
}
int fps_Enroll1(){
    return fps->Enroll1();
     e18:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     e1c:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     e20:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <_ZN11FPS_GT511C37Enroll1Ev>

00000e24 <fps_Enroll2>:
}
int fps_Enroll2(){
    return fps->Enroll2();
     e24:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     e28:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     e2c:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <_ZN11FPS_GT511C37Enroll2Ev>

00000e30 <fps_Enroll3>:
}
int fps_Enroll3(){
    return fps->Enroll3();  
     e30:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL3fps>
     e34:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL3fps+0x1>
     e38:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <_ZN11FPS_GT511C37Enroll3Ev>

00000e3c <_ZN13Adafruit_FIFOC1EPvjhb>:
    len++;
    buf += m_item_size;
  }

  return len;
}
     e3c:	0f 93       	push	r16
     e3e:	fc 01       	movw	r30, r24
     e40:	71 83       	std	Z+1, r23	; 0x01
     e42:	60 83       	st	Z, r22
     e44:	53 83       	std	Z+3, r21	; 0x03
     e46:	42 83       	std	Z+2, r20	; 0x02
     e48:	24 83       	std	Z+4, r18	; 0x04
     e4a:	05 83       	std	Z+5, r16	; 0x05
     e4c:	13 86       	std	Z+11, r1	; 0x0b
     e4e:	12 86       	std	Z+10, r1	; 0x0a
     e50:	11 86       	std	Z+9, r1	; 0x09
     e52:	10 86       	std	Z+8, r1	; 0x08
     e54:	17 82       	std	Z+7, r1	; 0x07
     e56:	16 82       	std	Z+6, r1	; 0x06
     e58:	0f 91       	pop	r16
     e5a:	08 95       	ret

00000e5c <_ZN13Adafruit_FIFO5clearEv>:
     e5c:	fc 01       	movw	r30, r24
     e5e:	17 82       	std	Z+7, r1	; 0x07
     e60:	16 82       	std	Z+6, r1	; 0x06
     e62:	11 86       	std	Z+9, r1	; 0x09
     e64:	10 86       	std	Z+8, r1	; 0x08
     e66:	13 86       	std	Z+11, r1	; 0x0b
     e68:	12 86       	std	Z+10, r1	; 0x0a
     e6a:	08 95       	ret

00000e6c <_ZN13Adafruit_FIFO5writeEPKv>:
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	ec 01       	movw	r28, r24
     e72:	2e 81       	ldd	r18, Y+6	; 0x06
     e74:	3f 81       	ldd	r19, Y+7	; 0x07
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	9b 81       	ldd	r25, Y+3	; 0x03
     e7a:	28 17       	cp	r18, r24
     e7c:	39 07       	cpc	r19, r25
     e7e:	19 f4       	brne	.+6      	; 0xe86 <_ZN13Adafruit_FIFO5writeEPKv+0x1a>
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	88 23       	and	r24, r24
     e84:	29 f1       	breq	.+74     	; 0xed0 <_ZN13Adafruit_FIFO5writeEPKv+0x64>
     e86:	4c 81       	ldd	r20, Y+4	; 0x04
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	28 85       	ldd	r18, Y+8	; 0x08
     e8c:	39 85       	ldd	r19, Y+9	; 0x09
     e8e:	42 9f       	mul	r20, r18
     e90:	c0 01       	movw	r24, r0
     e92:	43 9f       	mul	r20, r19
     e94:	90 0d       	add	r25, r0
     e96:	52 9f       	mul	r21, r18
     e98:	90 0d       	add	r25, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	28 81       	ld	r18, Y
     e9e:	39 81       	ldd	r19, Y+1	; 0x01
     ea0:	82 0f       	add	r24, r18
     ea2:	93 1f       	adc	r25, r19
     ea4:	0e 94 9f 23 	call	0x473e	; 0x473e <memcpy>
     ea8:	88 85       	ldd	r24, Y+8	; 0x08
     eaa:	99 85       	ldd	r25, Y+9	; 0x09
     eac:	2a 81       	ldd	r18, Y+2	; 0x02
     eae:	3b 81       	ldd	r19, Y+3	; 0x03
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	b9 01       	movw	r22, r18
     eb4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <__udivmodhi4>
     eb8:	99 87       	std	Y+9, r25	; 0x09
     eba:	88 87       	std	Y+8, r24	; 0x08
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	9f 81       	ldd	r25, Y+7	; 0x07
     ec0:	28 17       	cp	r18, r24
     ec2:	39 07       	cpc	r19, r25
     ec4:	41 f4       	brne	.+16     	; 0xed6 <_ZN13Adafruit_FIFO5writeEPKv+0x6a>
     ec6:	88 85       	ldd	r24, Y+8	; 0x08
     ec8:	99 85       	ldd	r25, Y+9	; 0x09
     eca:	9b 87       	std	Y+11, r25	; 0x0b
     ecc:	8a 87       	std	Y+10, r24	; 0x0a
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret
     ed6:	8e 81       	ldd	r24, Y+6	; 0x06
     ed8:	9f 81       	ldd	r25, Y+7	; 0x07
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	9f 83       	std	Y+7, r25	; 0x07
     ede:	8e 83       	std	Y+6, r24	; 0x06
     ee0:	f6 cf       	rjmp	.-20     	; 0xece <_ZN13Adafruit_FIFO5writeEPKv+0x62>

00000ee2 <_ZN13Adafruit_FIFO7write_nEPKvj>:
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	6c 01       	movw	r12, r24
     ef4:	8b 01       	movw	r16, r22
     ef6:	7a 01       	movw	r14, r20
     ef8:	d0 e0       	ldi	r29, 0x00	; 0
     efa:	c0 e0       	ldi	r28, 0x00	; 0
     efc:	45 2b       	or	r20, r21
     efe:	69 f0       	breq	.+26     	; 0xf1a <_ZN13Adafruit_FIFO7write_nEPKvj+0x38>
     f00:	b8 01       	movw	r22, r16
     f02:	c6 01       	movw	r24, r12
     f04:	b3 df       	rcall	.-154    	; 0xe6c <_ZN13Adafruit_FIFO5writeEPKv>
     f06:	88 23       	and	r24, r24
     f08:	41 f0       	breq	.+16     	; 0xf1a <_ZN13Adafruit_FIFO7write_nEPKvj+0x38>
     f0a:	21 96       	adiw	r28, 0x01	; 1
     f0c:	f6 01       	movw	r30, r12
     f0e:	84 81       	ldd	r24, Z+4	; 0x04
     f10:	08 0f       	add	r16, r24
     f12:	11 1d       	adc	r17, r1
     f14:	ec 16       	cp	r14, r28
     f16:	fd 06       	cpc	r15, r29
     f18:	99 f7       	brne	.-26     	; 0xf00 <_ZN13Adafruit_FIFO7write_nEPKvj+0x1e>
     f1a:	ce 01       	movw	r24, r28
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	08 95       	ret

00000f2e <_ZN13Adafruit_FIFO4readEPv>:
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	ec 01       	movw	r28, r24
     f34:	cb 01       	movw	r24, r22
     f36:	2e 81       	ldd	r18, Y+6	; 0x06
     f38:	3f 81       	ldd	r19, Y+7	; 0x07
     f3a:	23 2b       	or	r18, r19
     f3c:	19 f1       	breq	.+70     	; 0xf84 <_ZN13Adafruit_FIFO4readEPv+0x56>
     f3e:	4c 81       	ldd	r20, Y+4	; 0x04
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	6a 85       	ldd	r22, Y+10	; 0x0a
     f44:	7b 85       	ldd	r23, Y+11	; 0x0b
     f46:	46 9f       	mul	r20, r22
     f48:	90 01       	movw	r18, r0
     f4a:	47 9f       	mul	r20, r23
     f4c:	30 0d       	add	r19, r0
     f4e:	56 9f       	mul	r21, r22
     f50:	30 0d       	add	r19, r0
     f52:	11 24       	eor	r1, r1
     f54:	68 81       	ld	r22, Y
     f56:	79 81       	ldd	r23, Y+1	; 0x01
     f58:	62 0f       	add	r22, r18
     f5a:	73 1f       	adc	r23, r19
     f5c:	0e 94 9f 23 	call	0x473e	; 0x473e <memcpy>
     f60:	8a 85       	ldd	r24, Y+10	; 0x0a
     f62:	9b 85       	ldd	r25, Y+11	; 0x0b
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	6a 81       	ldd	r22, Y+2	; 0x02
     f68:	7b 81       	ldd	r23, Y+3	; 0x03
     f6a:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <__udivmodhi4>
     f6e:	9b 87       	std	Y+11, r25	; 0x0b
     f70:	8a 87       	std	Y+10, r24	; 0x0a
     f72:	8e 81       	ldd	r24, Y+6	; 0x06
     f74:	9f 81       	ldd	r25, Y+7	; 0x07
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	9f 83       	std	Y+7, r25	; 0x07
     f7a:	8e 83       	std	Y+6, r24	; 0x06
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	fb cf       	rjmp	.-10     	; 0xf7e <_ZN13Adafruit_FIFO4readEPv+0x50>

00000f88 <_ZN13Adafruit_FIFO4peekEPv>:
    @param[in] buffer
               Memory address to store item
*/
/******************************************************************************/
bool Adafruit_FIFO::peek(void* buffer)
{
     f88:	fc 01       	movw	r30, r24
     f8a:	cb 01       	movw	r24, r22
    uint16_t write_n(void const * data, uint16_t n);

    bool read(void* buffer);
    uint16_t read_n (void * buffer, uint16_t n);

    inline bool     empty(void)     { return m_count == 0; }
     f8c:	26 81       	ldd	r18, Z+6	; 0x06
     f8e:	37 81       	ldd	r19, Z+7	; 0x07
  if( empty() ) return false;
     f90:	23 2b       	or	r18, r19
     f92:	99 f0       	breq	.+38     	; 0xfba <_ZN13Adafruit_FIFO4peekEPv+0x32>

  memcpy(buffer,
     f94:	44 81       	ldd	r20, Z+4	; 0x04
     f96:	50 e0       	ldi	r21, 0x00	; 0
         m_buffer + (m_rd_idx * m_item_size),
     f98:	62 85       	ldd	r22, Z+10	; 0x0a
     f9a:	73 85       	ldd	r23, Z+11	; 0x0b
     f9c:	46 9f       	mul	r20, r22
     f9e:	90 01       	movw	r18, r0
     fa0:	47 9f       	mul	r20, r23
     fa2:	30 0d       	add	r19, r0
     fa4:	56 9f       	mul	r21, r22
     fa6:	30 0d       	add	r19, r0
     fa8:	11 24       	eor	r1, r1
     faa:	60 81       	ld	r22, Z
     fac:	71 81       	ldd	r23, Z+1	; 0x01
     fae:	62 0f       	add	r22, r18
     fb0:	73 1f       	adc	r23, r19
  memcpy(buffer,
     fb2:	0e 94 9f 23 	call	0x473e	; 0x473e <memcpy>
         m_item_size);

  return true;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	08 95       	ret
  if( empty() ) return false;
     fba:	80 e0       	ldi	r24, 0x00	; 0
}
     fbc:	08 95       	ret

00000fbe <_ZN5Print17availableForWriteEv>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	08 95       	ret

00000fc4 <_ZN5Print5flushEv>:
     fc4:	08 95       	ret

00000fc6 <_ZN5Print5writeEPKhj>:
     fc6:	af 92       	push	r10
     fc8:	bf 92       	push	r11
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	6c 01       	movw	r12, r24
     fdc:	7b 01       	movw	r14, r22
     fde:	8b 01       	movw	r16, r22
     fe0:	04 0f       	add	r16, r20
     fe2:	15 1f       	adc	r17, r21
     fe4:	eb 01       	movw	r28, r22
     fe6:	5e 01       	movw	r10, r28
     fe8:	ae 18       	sub	r10, r14
     fea:	bf 08       	sbc	r11, r15
     fec:	c0 17       	cp	r28, r16
     fee:	d1 07       	cpc	r29, r17
     ff0:	59 f0       	breq	.+22     	; 0x1008 <_ZN5Print5writeEPKhj+0x42>
     ff2:	69 91       	ld	r22, Y+
     ff4:	d6 01       	movw	r26, r12
     ff6:	ed 91       	ld	r30, X+
     ff8:	fc 91       	ld	r31, X
     ffa:	01 90       	ld	r0, Z+
     ffc:	f0 81       	ld	r31, Z
     ffe:	e0 2d       	mov	r30, r0
    1000:	c6 01       	movw	r24, r12
    1002:	09 95       	icall
    1004:	89 2b       	or	r24, r25
    1006:	79 f7       	brne	.-34     	; 0xfe6 <_ZN5Print5writeEPKhj+0x20>
    1008:	c5 01       	movw	r24, r10
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	bf 90       	pop	r11
    101c:	af 90       	pop	r10
    101e:	08 95       	ret

00001020 <_ZN5Print5writeEPKc.part.2>:
    1020:	fb 01       	movw	r30, r22
    1022:	01 90       	ld	r0, Z+
    1024:	00 20       	and	r0, r0
    1026:	e9 f7       	brne	.-6      	; 0x1022 <_ZN5Print5writeEPKc.part.2+0x2>
    1028:	31 97       	sbiw	r30, 0x01	; 1
    102a:	af 01       	movw	r20, r30
    102c:	46 1b       	sub	r20, r22
    102e:	57 0b       	sbc	r21, r23
    1030:	dc 01       	movw	r26, r24
    1032:	ed 91       	ld	r30, X+
    1034:	fc 91       	ld	r31, X
    1036:	02 80       	ldd	r0, Z+2	; 0x02
    1038:	f3 81       	ldd	r31, Z+3	; 0x03
    103a:	e0 2d       	mov	r30, r0
    103c:	09 94       	ijmp

0000103e <_ZN5Print5printEPK19__FlashStringHelper>:
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	8c 01       	movw	r16, r24
    104c:	7b 01       	movw	r14, r22
    104e:	d0 e0       	ldi	r29, 0x00	; 0
    1050:	c0 e0       	ldi	r28, 0x00	; 0
    1052:	f7 01       	movw	r30, r14
    1054:	ec 0f       	add	r30, r28
    1056:	fd 1f       	adc	r31, r29
    1058:	64 91       	lpm	r22, Z
    105a:	66 23       	and	r22, r22
    105c:	61 f0       	breq	.+24     	; 0x1076 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    105e:	d8 01       	movw	r26, r16
    1060:	ed 91       	ld	r30, X+
    1062:	fc 91       	ld	r31, X
    1064:	01 90       	ld	r0, Z+
    1066:	f0 81       	ld	r31, Z
    1068:	e0 2d       	mov	r30, r0
    106a:	c8 01       	movw	r24, r16
    106c:	09 95       	icall
    106e:	89 2b       	or	r24, r25
    1070:	11 f0       	breq	.+4      	; 0x1076 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1072:	21 96       	adiw	r28, 0x01	; 1
    1074:	ee cf       	rjmp	.-36     	; 0x1052 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1076:	ce 01       	movw	r24, r28
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	08 95       	ret

00001086 <_ZN5Print5printEPKc>:
    1086:	61 15       	cp	r22, r1
    1088:	71 05       	cpc	r23, r1
    108a:	09 f0       	breq	.+2      	; 0x108e <_ZN5Print5printEPKc+0x8>
    108c:	c9 cf       	rjmp	.-110    	; 0x1020 <_ZN5Print5writeEPKc.part.2>
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	08 95       	ret

00001094 <_ZN5Print5printEc>:
    1094:	dc 01       	movw	r26, r24
    1096:	ed 91       	ld	r30, X+
    1098:	fc 91       	ld	r31, X
    109a:	01 90       	ld	r0, Z+
    109c:	f0 81       	ld	r31, Z
    109e:	e0 2d       	mov	r30, r0
    10a0:	09 94       	ijmp

000010a2 <_ZN5Print7printlnEv>:
    10a2:	62 e0       	ldi	r22, 0x02	; 2
    10a4:	72 e0       	ldi	r23, 0x02	; 2
    10a6:	bc cf       	rjmp	.-136    	; 0x1020 <_ZN5Print5writeEPKc.part.2>

000010a8 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
    10b2:	c5 df       	rcall	.-118    	; 0x103e <_ZN5Print5printEPK19__FlashStringHelper>
    10b4:	8c 01       	movw	r16, r24
    10b6:	ce 01       	movw	r24, r28
    10b8:	f4 df       	rcall	.-24     	; 0x10a2 <_ZN5Print7printlnEv>
    10ba:	80 0f       	add	r24, r16
    10bc:	91 1f       	adc	r25, r17
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <_ZN5Print7printlnEPKc>:
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
    10d2:	d9 df       	rcall	.-78     	; 0x1086 <_ZN5Print5printEPKc>
    10d4:	8c 01       	movw	r16, r24
    10d6:	ce 01       	movw	r24, r28
    10d8:	e4 df       	rcall	.-56     	; 0x10a2 <_ZN5Print7printlnEv>
    10da:	80 0f       	add	r24, r16
    10dc:	91 1f       	adc	r25, r17
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	08 95       	ret

000010e8 <_ZN5Print11printNumberEmh>:
    10e8:	8f 92       	push	r8
    10ea:	9f 92       	push	r9
    10ec:	af 92       	push	r10
    10ee:	bf 92       	push	r11
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	a1 97       	sbiw	r28, 0x21	; 33
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	7c 01       	movw	r14, r24
    110e:	fa 01       	movw	r30, r20
    1110:	cb 01       	movw	r24, r22
    1112:	19 a2       	std	Y+33, r1	; 0x21
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	08 f4       	brcc	.+2      	; 0x111a <_ZN5Print11printNumberEmh+0x32>
    1118:	2a e0       	ldi	r18, 0x0A	; 10
    111a:	8e 01       	movw	r16, r28
    111c:	0f 5d       	subi	r16, 0xDF	; 223
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
    1120:	82 2e       	mov	r8, r18
    1122:	91 2c       	mov	r9, r1
    1124:	b1 2c       	mov	r11, r1
    1126:	a1 2c       	mov	r10, r1
    1128:	bf 01       	movw	r22, r30
    112a:	a5 01       	movw	r20, r10
    112c:	94 01       	movw	r18, r8
    112e:	0e 94 18 21 	call	0x4230	; 0x4230 <__udivmodsi4>
    1132:	f9 01       	movw	r30, r18
    1134:	ca 01       	movw	r24, r20
    1136:	6a 30       	cpi	r22, 0x0A	; 10
    1138:	00 f5       	brcc	.+64     	; 0x117a <_ZN5Print11printNumberEmh+0x92>
    113a:	60 5d       	subi	r22, 0xD0	; 208
    113c:	d8 01       	movw	r26, r16
    113e:	6e 93       	st	-X, r22
    1140:	8d 01       	movw	r16, r26
    1142:	23 2b       	or	r18, r19
    1144:	24 2b       	or	r18, r20
    1146:	25 2b       	or	r18, r21
    1148:	79 f7       	brne	.-34     	; 0x1128 <_ZN5Print11printNumberEmh+0x40>
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	10 97       	sbiw	r26, 0x00	; 0
    1150:	19 f0       	breq	.+6      	; 0x1158 <_ZN5Print11printNumberEmh+0x70>
    1152:	bd 01       	movw	r22, r26
    1154:	c7 01       	movw	r24, r14
    1156:	64 df       	rcall	.-312    	; 0x1020 <_ZN5Print5writeEPKc.part.2>
    1158:	a1 96       	adiw	r28, 0x21	; 33
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	bf 90       	pop	r11
    1172:	af 90       	pop	r10
    1174:	9f 90       	pop	r9
    1176:	8f 90       	pop	r8
    1178:	08 95       	ret
    117a:	69 5c       	subi	r22, 0xC9	; 201
    117c:	df cf       	rjmp	.-66     	; 0x113c <_ZN5Print11printNumberEmh+0x54>

0000117e <_ZN5Print5printEli>:
    117e:	cf 92       	push	r12
    1180:	df 92       	push	r13
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	ec 01       	movw	r28, r24
    1190:	6a 01       	movw	r12, r20
    1192:	7b 01       	movw	r14, r22
    1194:	21 15       	cp	r18, r1
    1196:	31 05       	cpc	r19, r1
    1198:	79 f4       	brne	.+30     	; 0x11b8 <_ZN5Print5printEli+0x3a>
    119a:	e8 81       	ld	r30, Y
    119c:	f9 81       	ldd	r31, Y+1	; 0x01
    119e:	01 90       	ld	r0, Z+
    11a0:	f0 81       	ld	r31, Z
    11a2:	e0 2d       	mov	r30, r0
    11a4:	64 2f       	mov	r22, r20
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	09 94       	ijmp
    11b8:	2a 30       	cpi	r18, 0x0A	; 10
    11ba:	31 05       	cpc	r19, r1
    11bc:	d9 f4       	brne	.+54     	; 0x11f4 <_ZN5Print5printEli+0x76>
    11be:	2a e0       	ldi	r18, 0x0A	; 10
    11c0:	f7 fe       	sbrs	r15, 7
    11c2:	18 c0       	rjmp	.+48     	; 0x11f4 <_ZN5Print5printEli+0x76>
    11c4:	6d e2       	ldi	r22, 0x2D	; 45
    11c6:	66 df       	rcall	.-308    	; 0x1094 <_ZN5Print5printEc>
    11c8:	8c 01       	movw	r16, r24
    11ca:	44 27       	eor	r20, r20
    11cc:	55 27       	eor	r21, r21
    11ce:	ba 01       	movw	r22, r20
    11d0:	4c 19       	sub	r20, r12
    11d2:	5d 09       	sbc	r21, r13
    11d4:	6e 09       	sbc	r22, r14
    11d6:	7f 09       	sbc	r23, r15
    11d8:	2a e0       	ldi	r18, 0x0A	; 10
    11da:	ce 01       	movw	r24, r28
    11dc:	85 df       	rcall	.-246    	; 0x10e8 <_ZN5Print11printNumberEmh>
    11de:	80 0f       	add	r24, r16
    11e0:	91 1f       	adc	r25, r17
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	df 90       	pop	r13
    11f0:	cf 90       	pop	r12
    11f2:	08 95       	ret
    11f4:	b7 01       	movw	r22, r14
    11f6:	a6 01       	movw	r20, r12
    11f8:	ce 01       	movw	r24, r28
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	6e cf       	rjmp	.-292    	; 0x10e8 <_ZN5Print11printNumberEmh>

0000120c <_ZN5Print5printEii>:
    120c:	9a 01       	movw	r18, r20
    120e:	ab 01       	movw	r20, r22
    1210:	77 0f       	add	r23, r23
    1212:	66 0b       	sbc	r22, r22
    1214:	77 0b       	sbc	r23, r23
    1216:	b3 cf       	rjmp	.-154    	; 0x117e <_ZN5Print5printEli>

00001218 <_ZN5Print5printEmi>:
    1218:	21 15       	cp	r18, r1
    121a:	31 05       	cpc	r19, r1
    121c:	41 f4       	brne	.+16     	; 0x122e <_ZN5Print5printEmi+0x16>
    121e:	dc 01       	movw	r26, r24
    1220:	ed 91       	ld	r30, X+
    1222:	fc 91       	ld	r31, X
    1224:	01 90       	ld	r0, Z+
    1226:	f0 81       	ld	r31, Z
    1228:	e0 2d       	mov	r30, r0
    122a:	64 2f       	mov	r22, r20
    122c:	09 94       	ijmp
    122e:	5c cf       	rjmp	.-328    	; 0x10e8 <_ZN5Print11printNumberEmh>

00001230 <_ZN5Print5printEhi>:
    1230:	9a 01       	movw	r18, r20
    1232:	46 2f       	mov	r20, r22
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	ee cf       	rjmp	.-36     	; 0x1218 <_ZN5Print5printEmi>

0000123c <_ZN5Print5printEji>:
{
    123c:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    123e:	ab 01       	movw	r20, r22
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	e9 cf       	rjmp	.-46     	; 0x1218 <_ZN5Print5printEmi>

00001246 <__cxa_pure_virtual>:

  // switch back if necessary
  if ( current_mode == BLUEFRUIT_MODE_DATA ) setMode(BLUEFRUIT_MODE_DATA);

  return result;
}
    1246:	ff cf       	rjmp	.-2      	; 0x1246 <__cxa_pure_virtual>

00001248 <_ZN17Adafruit_ATParserC1Ev>:
    1248:	fc 01       	movw	r30, r24
    124a:	13 82       	std	Z+3, r1	; 0x03
    124c:	12 82       	std	Z+2, r1	; 0x02
    124e:	88 ee       	ldi	r24, 0xE8	; 232
    1250:	93 e0       	ldi	r25, 0x03	; 3
    1252:	a0 e0       	ldi	r26, 0x00	; 0
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	84 83       	std	Z+4, r24	; 0x04
    1258:	95 83       	std	Z+5, r25	; 0x05
    125a:	a6 83       	std	Z+6, r26	; 0x06
    125c:	b7 83       	std	Z+7, r27	; 0x07
    125e:	8a ed       	ldi	r24, 0xDA	; 218
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	80 83       	st	Z, r24
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	84 87       	std	Z+12, r24	; 0x0c
    126a:	15 86       	std	Z+13, r1	; 0x0d
    126c:	08 95       	ret

0000126e <_ZN17Adafruit_ATParser8readlineEPcjjb>:
    126e:	8f 92       	push	r8
    1270:	9f 92       	push	r9
    1272:	af 92       	push	r10
    1274:	bf 92       	push	r11
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	6c 01       	movw	r12, r24
    1286:	7b 01       	movw	r14, r22
    1288:	4a 01       	movw	r8, r20
    128a:	59 01       	movw	r10, r18
    128c:	d0 e0       	ldi	r29, 0x00	; 0
    128e:	c0 e0       	ldi	r28, 0x00	; 0
    1290:	a1 14       	cp	r10, r1
    1292:	b1 04       	cpc	r11, r1
    1294:	11 f1       	breq	.+68     	; 0x12da <_ZN17Adafruit_ATParser8readlineEPcjjb+0x6c>
    1296:	d6 01       	movw	r26, r12
    1298:	ed 91       	ld	r30, X+
    129a:	fc 91       	ld	r31, X
    129c:	00 84       	ldd	r0, Z+8	; 0x08
    129e:	f1 85       	ldd	r31, Z+9	; 0x09
    12a0:	e0 2d       	mov	r30, r0
    12a2:	c6 01       	movw	r24, r12
    12a4:	09 95       	icall
    12a6:	89 2b       	or	r24, r25
    12a8:	49 f1       	breq	.+82     	; 0x12fc <_ZN17Adafruit_ATParser8readlineEPcjjb+0x8e>
    12aa:	d6 01       	movw	r26, r12
    12ac:	ed 91       	ld	r30, X+
    12ae:	fc 91       	ld	r31, X
    12b0:	02 84       	ldd	r0, Z+10	; 0x0a
    12b2:	f3 85       	ldd	r31, Z+11	; 0x0b
    12b4:	e0 2d       	mov	r30, r0
    12b6:	c6 01       	movw	r24, r12
    12b8:	09 95       	icall
    12ba:	8d 30       	cpi	r24, 0x0D	; 13
    12bc:	61 f3       	breq	.-40     	; 0x1296 <_ZN17Adafruit_ATParser8readlineEPcjjb+0x28>
    12be:	8a 30       	cpi	r24, 0x0A	; 10
    12c0:	21 f4       	brne	.+8      	; 0x12ca <_ZN17Adafruit_ATParser8readlineEPcjjb+0x5c>
    12c2:	20 97       	sbiw	r28, 0x00	; 0
    12c4:	41 f3       	breq	.-48     	; 0x1296 <_ZN17Adafruit_ATParser8readlineEPcjjb+0x28>
    12c6:	00 23       	and	r16, r16
    12c8:	41 f0       	breq	.+16     	; 0x12da <_ZN17Adafruit_ATParser8readlineEPcjjb+0x6c>
    12ca:	f7 01       	movw	r30, r14
    12cc:	ec 0f       	add	r30, r28
    12ce:	fd 1f       	adc	r31, r29
    12d0:	80 83       	st	Z, r24
    12d2:	21 96       	adiw	r28, 0x01	; 1
    12d4:	c8 15       	cp	r28, r8
    12d6:	d9 05       	cpc	r29, r9
    12d8:	f0 f2       	brcs	.-68     	; 0x1296 <_ZN17Adafruit_ATParser8readlineEPcjjb+0x28>
    12da:	f7 01       	movw	r30, r14
    12dc:	ec 0f       	add	r30, r28
    12de:	fd 1f       	adc	r31, r29
    12e0:	10 82       	st	Z, r1
    12e2:	ce 01       	movw	r24, r28
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	bf 90       	pop	r11
    12f4:	af 90       	pop	r10
    12f6:	9f 90       	pop	r9
    12f8:	8f 90       	pop	r8
    12fa:	08 95       	ret
    12fc:	b1 e0       	ldi	r27, 0x01	; 1
    12fe:	ab 1a       	sub	r10, r27
    1300:	b1 08       	sbc	r11, r1
    1302:	59 f3       	breq	.-42     	; 0x12da <_ZN17Adafruit_ATParser8readlineEPcjjb+0x6c>
    1304:	8f ec       	ldi	r24, 0xCF	; 207
    1306:	97 e0       	ldi	r25, 0x07	; 7
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <_ZN17Adafruit_ATParser8readlineEPcjjb+0x9a>
    130c:	00 c0       	rjmp	.+0      	; 0x130e <_ZN17Adafruit_ATParser8readlineEPcjjb+0xa0>
    130e:	00 00       	nop
    1310:	bf cf       	rjmp	.-130    	; 0x1290 <_ZN17Adafruit_ATParser8readlineEPcjjb+0x22>

00001312 <_ZN17Adafruit_ATParser9waitForOKEv>:
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	c1 54       	subi	r28, 0x41	; 65
    1326:	d1 09       	sbc	r29, r1
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	7c 01       	movw	r14, r24
    1334:	6c 01       	movw	r12, r24
    1336:	8e e0       	ldi	r24, 0x0E	; 14
    1338:	c8 0e       	add	r12, r24
    133a:	d1 1c       	adc	r13, r1
    133c:	f7 01       	movw	r30, r14
    133e:	24 81       	ldd	r18, Z+4	; 0x04
    1340:	35 81       	ldd	r19, Z+5	; 0x05
    1342:	00 e0       	ldi	r16, 0x00	; 0
    1344:	40 e4       	ldi	r20, 0x40	; 64
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	be 01       	movw	r22, r28
    134a:	6f 5f       	subi	r22, 0xFF	; 255
    134c:	7f 4f       	sbci	r23, 0xFF	; 255
    134e:	c7 01       	movw	r24, r14
    1350:	8e df       	rcall	.-228    	; 0x126e <_ZN17Adafruit_ATParser8readlineEPcjjb>
    1352:	89 2b       	or	r24, r25
    1354:	39 f1       	breq	.+78     	; 0x13a4 <_ZN17Adafruit_ATParser9waitForOKEv+0x92>
    1356:	62 ec       	ldi	r22, 0xC2	; 194
    1358:	71 e0       	ldi	r23, 0x01	; 1
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	0e 94 af 23 	call	0x475e	; 0x475e <strcmp>
    1362:	89 2b       	or	r24, r25
    1364:	79 f0       	breq	.+30     	; 0x1384 <_ZN17Adafruit_ATParser9waitForOKEv+0x72>
    1366:	65 ec       	ldi	r22, 0xC5	; 197
    1368:	71 e0       	ldi	r23, 0x01	; 1
    136a:	ce 01       	movw	r24, r28
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	0e 94 af 23 	call	0x475e	; 0x475e <strcmp>
    1372:	89 2b       	or	r24, r25
    1374:	b9 f0       	breq	.+46     	; 0x13a4 <_ZN17Adafruit_ATParser9waitForOKEv+0x92>
    1376:	be 01       	movw	r22, r28
    1378:	6f 5f       	subi	r22, 0xFF	; 255
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	c6 01       	movw	r24, r12
    137e:	0e 94 b8 23 	call	0x4770	; 0x4770 <strcpy>
    1382:	dc cf       	rjmp	.-72     	; 0x133c <_ZN17Adafruit_ATParser9waitForOKEv+0x2a>
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	cf 5b       	subi	r28, 0xBF	; 191
    1388:	df 4f       	sbci	r29, 0xFF	; 255
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	08 95       	ret
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	ef cf       	rjmp	.-34     	; 0x1386 <_ZN17Adafruit_ATParser9waitForOKEv+0x74>

000013a8 <_ZN17Adafruit_ATParser17readline_parseIntEv>:
    13a8:	0f 93       	push	r16
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	ec 01       	movw	r28, r24
    13b0:	2e 96       	adiw	r28, 0x0e	; 14
    13b2:	fc 01       	movw	r30, r24
    13b4:	24 81       	ldd	r18, Z+4	; 0x04
    13b6:	35 81       	ldd	r19, Z+5	; 0x05
    13b8:	00 e0       	ldi	r16, 0x00	; 0
    13ba:	40 e4       	ldi	r20, 0x40	; 64
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	be 01       	movw	r22, r28
    13c0:	56 df       	rcall	.-340    	; 0x126e <_ZN17Adafruit_ATParser8readlineEPcjjb>
    13c2:	89 2b       	or	r24, r25
    13c4:	51 f0       	breq	.+20     	; 0x13da <_ZN17Adafruit_ATParser17readline_parseIntEv+0x32>
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	ce 01       	movw	r24, r28
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	0f 91       	pop	r16
    13d6:	0c 94 78 22 	jmp	0x44f0	; 0x44f0 <strtol>
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	cb 01       	movw	r24, r22
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <_ZN17Adafruit_ATParser14printByteArrayEPKhi>:
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	8c 01       	movw	r16, r24
    13f8:	6a 01       	movw	r12, r20
    13fa:	7b 01       	movw	r14, r22
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	c8 1a       	sub	r12, r24
    1400:	d1 08       	sbc	r13, r1
    1402:	70 f1       	brcs	.+92     	; 0x1460 <_ZN17Adafruit_ATParser14printByteArrayEPKhi+0x78>
    1404:	f7 01       	movw	r30, r14
    1406:	c1 91       	ld	r28, Z+
    1408:	7f 01       	movw	r14, r30
    140a:	d8 01       	movw	r26, r16
    140c:	ed 91       	ld	r30, X+
    140e:	fc 91       	ld	r31, X
    1410:	01 90       	ld	r0, Z+
    1412:	f0 81       	ld	r31, Z
    1414:	e0 2d       	mov	r30, r0
    1416:	6c 2f       	mov	r22, r28
    1418:	62 95       	swap	r22
    141a:	6f 70       	andi	r22, 0x0F	; 15
    141c:	87 e3       	ldi	r24, 0x37	; 55
    141e:	6a 30       	cpi	r22, 0x0A	; 10
    1420:	08 f4       	brcc	.+2      	; 0x1424 <_ZN17Adafruit_ATParser14printByteArrayEPKhi+0x3c>
    1422:	80 e3       	ldi	r24, 0x30	; 48
    1424:	68 0f       	add	r22, r24
    1426:	c8 01       	movw	r24, r16
    1428:	09 95       	icall
    142a:	d8 01       	movw	r26, r16
    142c:	ed 91       	ld	r30, X+
    142e:	fc 91       	ld	r31, X
    1430:	01 90       	ld	r0, Z+
    1432:	f0 81       	ld	r31, Z
    1434:	e0 2d       	mov	r30, r0
    1436:	cf 70       	andi	r28, 0x0F	; 15
    1438:	67 e3       	ldi	r22, 0x37	; 55
    143a:	ca 30       	cpi	r28, 0x0A	; 10
    143c:	08 f4       	brcc	.+2      	; 0x1440 <_ZN17Adafruit_ATParser14printByteArrayEPKhi+0x58>
    143e:	60 e3       	ldi	r22, 0x30	; 48
    1440:	6c 0f       	add	r22, r28
    1442:	c8 01       	movw	r24, r16
    1444:	09 95       	icall
    1446:	c1 14       	cp	r12, r1
    1448:	d1 04       	cpc	r13, r1
    144a:	c1 f2       	breq	.-80     	; 0x13fc <_ZN17Adafruit_ATParser14printByteArrayEPKhi+0x14>
    144c:	d8 01       	movw	r26, r16
    144e:	ed 91       	ld	r30, X+
    1450:	fc 91       	ld	r31, X
    1452:	01 90       	ld	r0, Z+
    1454:	f0 81       	ld	r31, Z
    1456:	e0 2d       	mov	r30, r0
    1458:	6d e2       	ldi	r22, 0x2D	; 45
    145a:	c8 01       	movw	r24, r16
    145c:	09 95       	icall
    145e:	ce cf       	rjmp	.-100    	; 0x13fc <_ZN17Adafruit_ATParser14printByteArrayEPKhi+0x14>
    1460:	8c ef       	ldi	r24, 0xFC	; 252
    1462:	9f ef       	ldi	r25, 0xFF	; 255
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	08 95       	ret

00001474 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm>:
    1474:	6f 92       	push	r6
    1476:	7f 92       	push	r7
    1478:	8f 92       	push	r8
    147a:	9f 92       	push	r9
    147c:	af 92       	push	r10
    147e:	bf 92       	push	r11
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	ec 01       	movw	r28, r24
    1492:	5b 01       	movw	r10, r22
    1494:	49 01       	movw	r8, r18
    1496:	c4 2e       	mov	r12, r20
    1498:	d1 2c       	mov	r13, r1
    149a:	f1 2c       	mov	r15, r1
    149c:	e1 2c       	mov	r14, r1
    149e:	36 01       	movw	r6, r12
    14a0:	21 e0       	ldi	r18, 0x01	; 1
    14a2:	62 1a       	sub	r6, r18
    14a4:	71 08       	sbc	r7, r1
    14a6:	ce 14       	cp	r12, r14
    14a8:	df 04       	cpc	r13, r15
    14aa:	09 f4       	brne	.+2      	; 0x14ae <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x3a>
    14ac:	78 c0       	rjmp	.+240    	; 0x159e <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x12a>
    14ae:	e1 10       	cpse	r14, r1
    14b0:	03 c0       	rjmp	.+6      	; 0x14b8 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x44>
    14b2:	6d e3       	ldi	r22, 0x3D	; 61
    14b4:	ce 01       	movw	r24, r28
    14b6:	ee dd       	rcall	.-1060   	; 0x1094 <_ZN5Print5printEc>
    14b8:	f4 01       	movw	r30, r8
    14ba:	41 91       	ld	r20, Z+
    14bc:	51 91       	ld	r21, Z+
    14be:	4f 01       	movw	r8, r30
    14c0:	ca 01       	movw	r24, r20
    14c2:	88 27       	eor	r24, r24
    14c4:	81 15       	cp	r24, r1
    14c6:	f4 e0       	ldi	r31, 0x04	; 4
    14c8:	9f 07       	cpc	r25, r31
    14ca:	09 f4       	brne	.+2      	; 0x14ce <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x5a>
    14cc:	3e c0       	rjmp	.+124    	; 0x154a <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0xd6>
    14ce:	90 f4       	brcc	.+36     	; 0x14f4 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x80>
    14d0:	81 15       	cp	r24, r1
    14d2:	e2 e0       	ldi	r30, 0x02	; 2
    14d4:	9e 07       	cpc	r25, r30
    14d6:	91 f1       	breq	.+100    	; 0x153c <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0xc8>
    14d8:	81 15       	cp	r24, r1
    14da:	f3 e0       	ldi	r31, 0x03	; 3
    14dc:	9f 07       	cpc	r25, r31
    14de:	09 f4       	brne	.+2      	; 0x14e2 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x6e>
    14e0:	3e c0       	rjmp	.+124    	; 0x155e <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0xea>
    14e2:	81 15       	cp	r24, r1
    14e4:	91 40       	sbci	r25, 0x01	; 1
    14e6:	81 f4       	brne	.+32     	; 0x1508 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x94>
    14e8:	f8 01       	movw	r30, r16
    14ea:	60 81       	ld	r22, Z
    14ec:	71 81       	ldd	r23, Z+1	; 0x01
    14ee:	ce 01       	movw	r24, r28
    14f0:	ca dd       	rcall	.-1132   	; 0x1086 <_ZN5Print5printEPKc>
    14f2:	0a c0       	rjmp	.+20     	; 0x1508 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x94>
    14f4:	81 15       	cp	r24, r1
    14f6:	e6 e0       	ldi	r30, 0x06	; 6
    14f8:	9e 07       	cpc	r25, r30
    14fa:	09 f4       	brne	.+2      	; 0x14fe <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x8a>
    14fc:	3a c0       	rjmp	.+116    	; 0x1572 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0xfe>
    14fe:	80 f4       	brcc	.+32     	; 0x1520 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0xac>
    1500:	81 15       	cp	r24, r1
    1502:	95 40       	sbci	r25, 0x05	; 5
    1504:	09 f4       	brne	.+2      	; 0x1508 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x94>
    1506:	3d c0       	rjmp	.+122    	; 0x1582 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x10e>
    1508:	e6 14       	cp	r14, r6
    150a:	f7 04       	cpc	r15, r7
    150c:	19 f0       	breq	.+6      	; 0x1514 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0xa0>
    150e:	6c e2       	ldi	r22, 0x2C	; 44
    1510:	ce 01       	movw	r24, r28
    1512:	c0 dd       	rcall	.-1152   	; 0x1094 <_ZN5Print5printEc>
    1514:	ff ef       	ldi	r31, 0xFF	; 255
    1516:	ef 1a       	sub	r14, r31
    1518:	ff 0a       	sbc	r15, r31
    151a:	0c 5f       	subi	r16, 0xFC	; 252
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	c3 cf       	rjmp	.-122    	; 0x14a6 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x32>
    1520:	81 15       	cp	r24, r1
    1522:	e7 e0       	ldi	r30, 0x07	; 7
    1524:	9e 07       	cpc	r25, r30
    1526:	a9 f1       	breq	.+106    	; 0x1592 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x11e>
    1528:	81 15       	cp	r24, r1
    152a:	98 40       	sbci	r25, 0x08	; 8
    152c:	69 f7       	brne	.-38     	; 0x1508 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x94>
    152e:	4a e0       	ldi	r20, 0x0A	; 10
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	f8 01       	movw	r30, r16
    1534:	60 81       	ld	r22, Z
    1536:	ce 01       	movw	r24, r28
    1538:	7b de       	rcall	.-778    	; 0x1230 <_ZN5Print5printEhi>
    153a:	e6 cf       	rjmp	.-52     	; 0x1508 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x94>
    153c:	55 27       	eor	r21, r21
    153e:	f8 01       	movw	r30, r16
    1540:	60 81       	ld	r22, Z
    1542:	71 81       	ldd	r23, Z+1	; 0x01
    1544:	ce 01       	movw	r24, r28
    1546:	50 df       	rcall	.-352    	; 0x13e8 <_ZN17Adafruit_ATParser14printByteArrayEPKhi>
    1548:	df cf       	rjmp	.-66     	; 0x1508 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x94>
    154a:	f8 01       	movw	r30, r16
    154c:	40 81       	ld	r20, Z
    154e:	51 81       	ldd	r21, Z+1	; 0x01
    1550:	62 81       	ldd	r22, Z+2	; 0x02
    1552:	73 81       	ldd	r23, Z+3	; 0x03
    1554:	2a e0       	ldi	r18, 0x0A	; 10
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	ce 01       	movw	r24, r28
    155a:	5e de       	rcall	.-836    	; 0x1218 <_ZN5Print5printEmi>
    155c:	d5 cf       	rjmp	.-86     	; 0x1508 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x94>
    155e:	f8 01       	movw	r30, r16
    1560:	40 81       	ld	r20, Z
    1562:	51 81       	ldd	r21, Z+1	; 0x01
    1564:	62 81       	ldd	r22, Z+2	; 0x02
    1566:	73 81       	ldd	r23, Z+3	; 0x03
    1568:	2a e0       	ldi	r18, 0x0A	; 10
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	ce 01       	movw	r24, r28
    156e:	07 de       	rcall	.-1010   	; 0x117e <_ZN5Print5printEli>
    1570:	cb cf       	rjmp	.-106    	; 0x1508 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x94>
    1572:	f8 01       	movw	r30, r16
    1574:	60 81       	ld	r22, Z
    1576:	71 81       	ldd	r23, Z+1	; 0x01
    1578:	4a e0       	ldi	r20, 0x0A	; 10
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	ce 01       	movw	r24, r28
    157e:	5e de       	rcall	.-836    	; 0x123c <_ZN5Print5printEji>
    1580:	c3 cf       	rjmp	.-122    	; 0x1508 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x94>
    1582:	f8 01       	movw	r30, r16
    1584:	60 81       	ld	r22, Z
    1586:	71 81       	ldd	r23, Z+1	; 0x01
    1588:	4a e0       	ldi	r20, 0x0A	; 10
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	ce 01       	movw	r24, r28
    158e:	3e de       	rcall	.-900    	; 0x120c <_ZN5Print5printEii>
    1590:	bb cf       	rjmp	.-138    	; 0x1508 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x94>
    1592:	f8 01       	movw	r30, r16
    1594:	60 81       	ld	r22, Z
    1596:	06 2e       	mov	r0, r22
    1598:	00 0c       	add	r0, r0
    159a:	77 0b       	sbc	r23, r23
    159c:	f5 cf       	rjmp	.-22     	; 0x1588 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x114>
    159e:	ce 01       	movw	r24, r28
    15a0:	80 dd       	rcall	.-1280   	; 0x10a2 <_ZN5Print7printlnEv>
    15a2:	a1 14       	cp	r10, r1
    15a4:	b1 04       	cpc	r11, r1
    15a6:	39 f0       	breq	.+14     	; 0x15b6 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm+0x142>
    15a8:	ce 01       	movw	r24, r28
    15aa:	fe de       	rcall	.-516    	; 0x13a8 <_ZN17Adafruit_ATParser17readline_parseIntEv>
    15ac:	f5 01       	movw	r30, r10
    15ae:	60 83       	st	Z, r22
    15b0:	71 83       	std	Z+1, r23	; 0x01
    15b2:	82 83       	std	Z+2, r24	; 0x02
    15b4:	93 83       	std	Z+3, r25	; 0x03
    15b6:	ce 01       	movw	r24, r28
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	9f 90       	pop	r9
    15ce:	8f 90       	pop	r8
    15d0:	7f 90       	pop	r7
    15d2:	6f 90       	pop	r6
    15d4:	9e ce       	rjmp	.-708    	; 0x1312 <_ZN17Adafruit_ATParser9waitForOKEv>

000015d6 <_ZN17Adafruit_ATParser14atcommand_fullEPK19__FlashStringHelperPlhPjPm>:
    @brief
    @param
*/
/******************************************************************************/
bool Adafruit_ATParser::atcommand_full(const __FlashStringHelper *cmd, int32_t* reply, uint8_t argcount, uint16_t argtype[], uint32_t args[])
{
    15d6:	7f 92       	push	r7
    15d8:	8f 92       	push	r8
    15da:	9f 92       	push	r9
    15dc:	af 92       	push	r10
    15de:	bf 92       	push	r11
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	ec 01       	movw	r28, r24
    15f2:	4b 01       	movw	r8, r22
    15f4:	6a 01       	movw	r12, r20
    15f6:	72 2e       	mov	r7, r18
    15f8:	58 01       	movw	r10, r16
    15fa:	87 01       	movw	r16, r14
  bool result;
  uint8_t current_mode = _mode;
    15fc:	fc 84       	ldd	r15, Y+12	; 0x0c

  // switch mode if necessary to execute command
  if ( current_mode == BLUEFRUIT_MODE_DATA ) setMode(BLUEFRUIT_MODE_COMMAND);
    15fe:	f1 10       	cpse	r15, r1
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <_ZN17Adafruit_ATParser14atcommand_fullEPK19__FlashStringHelperPlhPjPm+0x3a>
    1602:	e8 81       	ld	r30, Y
    1604:	f9 81       	ldd	r31, Y+1	; 0x01
    1606:	06 84       	ldd	r0, Z+14	; 0x0e
    1608:	f7 85       	ldd	r31, Z+15	; 0x0f
    160a:	e0 2d       	mov	r30, r0
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	09 95       	icall

  // Execute command with parameter and get response
  print(cmd);
    1610:	b4 01       	movw	r22, r8
    1612:	ce 01       	movw	r24, r28
    1614:	14 dd       	rcall	.-1496   	; 0x103e <_ZN5Print5printEPK19__FlashStringHelper>
  result = this->send_arg_get_resp(reply, argcount, argtype, args);
    1616:	95 01       	movw	r18, r10
    1618:	47 2d       	mov	r20, r7
    161a:	b6 01       	movw	r22, r12
    161c:	ce 01       	movw	r24, r28
    161e:	2a df       	rcall	.-428    	; 0x1474 <_ZN17Adafruit_ATParser17send_arg_get_respEPlhPjPm>
    1620:	18 2f       	mov	r17, r24

  // switch back if necessary
  if ( current_mode == BLUEFRUIT_MODE_DATA ) setMode(BLUEFRUIT_MODE_DATA);
    1622:	f1 10       	cpse	r15, r1
    1624:	08 c0       	rjmp	.+16     	; 0x1636 <_ZN17Adafruit_ATParser14atcommand_fullEPK19__FlashStringHelperPlhPjPm+0x60>
    1626:	e8 81       	ld	r30, Y
    1628:	f9 81       	ldd	r31, Y+1	; 0x01
    162a:	06 84       	ldd	r0, Z+14	; 0x0e
    162c:	f7 85       	ldd	r31, Z+15	; 0x0f
    162e:	e0 2d       	mov	r30, r0
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	ce 01       	movw	r24, r28
    1634:	09 95       	icall

  return result;
}
    1636:	81 2f       	mov	r24, r17
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	9f 90       	pop	r9
    164e:	8f 90       	pop	r8
    1650:	7f 90       	pop	r7
    1652:	08 95       	ret

00001654 <_ZN17Adafruit_ATParser9atcommandEPK19__FlashStringHelper>:
  if ( current_mode == BLUEFRUIT_MODE_DATA ) setMode(BLUEFRUIT_MODE_DATA);

  // SerialDebug.println(F("----------------"));

  _verbose = v;
}
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	f1 2c       	mov	r15, r1
    165e:	e1 2c       	mov	r14, r1
    1660:	10 e0       	ldi	r17, 0x00	; 0
    1662:	00 e0       	ldi	r16, 0x00	; 0
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	b5 df       	rcall	.-150    	; 0x15d6 <_ZN17Adafruit_ATParser14atcommand_fullEPK19__FlashStringHelperPlhPjPm>
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	08 95       	ret

00001676 <_ZN17Adafruit_ATParser8readlineEv>:
    1676:	0f 93       	push	r16
    1678:	fc 01       	movw	r30, r24
    167a:	24 81       	ldd	r18, Z+4	; 0x04
    167c:	35 81       	ldd	r19, Z+5	; 0x05
    167e:	bc 01       	movw	r22, r24
    1680:	62 5f       	subi	r22, 0xF2	; 242
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	00 e0       	ldi	r16, 0x00	; 0
    1686:	40 e4       	ldi	r20, 0x40	; 64
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	f1 dd       	rcall	.-1054   	; 0x126e <_ZN17Adafruit_ATParser8readlineEPcjjb>
    168c:	0f 91       	pop	r16
    168e:	08 95       	ret

00001690 <_ZN12Adafruit_BLEC1Ev>:
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	ec 01       	movw	r28, r24
    1696:	d8 dd       	rcall	.-1104   	; 0x1248 <_ZN17Adafruit_ATParserC1Ev>
    1698:	8e ee       	ldi	r24, 0xEE	; 238
    169a:	91 e0       	ldi	r25, 0x01	; 1
    169c:	99 83       	std	Y+1, r25	; 0x01
    169e:	88 83       	st	Y, r24
    16a0:	8a ef       	ldi	r24, 0xFA	; 250
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a0 e0       	ldi	r26, 0x00	; 0
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	8c 83       	std	Y+4, r24	; 0x04
    16aa:	9d 83       	std	Y+5, r25	; 0x05
    16ac:	ae 83       	std	Y+6, r26	; 0x06
    16ae:	bf 83       	std	Y+7, r27	; 0x07
    16b0:	fe 01       	movw	r30, r28
    16b2:	e0 5b       	subi	r30, 0xB0	; 176
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	10 82       	st	Z, r1
    16b8:	11 82       	std	Z+1, r1	; 0x01
    16ba:	12 82       	std	Z+2, r1	; 0x02
    16bc:	13 82       	std	Z+3, r1	; 0x03
    16be:	34 96       	adiw	r30, 0x04	; 4
    16c0:	11 82       	std	Z+1, r1	; 0x01
    16c2:	10 82       	st	Z, r1
    16c4:	32 96       	adiw	r30, 0x02	; 2
    16c6:	11 82       	std	Z+1, r1	; 0x01
    16c8:	10 82       	st	Z, r1
    16ca:	32 96       	adiw	r30, 0x02	; 2
    16cc:	11 82       	std	Z+1, r1	; 0x01
    16ce:	10 82       	st	Z, r1
    16d0:	32 96       	adiw	r30, 0x02	; 2
    16d2:	11 82       	std	Z+1, r1	; 0x01
    16d4:	10 82       	st	Z, r1
    16d6:	c4 5a       	subi	r28, 0xA4	; 164
    16d8:	df 4f       	sbci	r29, 0xFF	; 255
    16da:	19 82       	std	Y+1, r1	; 0x01
    16dc:	18 82       	st	Y, r1
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	08 95       	ret

000016e4 <_ZN12Adafruit_BLE5resetEb>:
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	ec 01       	movw	r28, r24
    16ee:	06 2f       	mov	r16, r22
    16f0:	15 e0       	ldi	r17, 0x05	; 5
    16f2:	66 e0       	ldi	r22, 0x06	; 6
    16f4:	75 e0       	ldi	r23, 0x05	; 5
    16f6:	ce 01       	movw	r24, r28
    16f8:	ad df       	rcall	.-166    	; 0x1654 <_ZN17Adafruit_ATParser9atcommandEPK19__FlashStringHelper>
    16fa:	81 11       	cpse	r24, r1
    16fc:	2a c0       	rjmp	.+84     	; 0x1752 <_ZN12Adafruit_BLE5resetEb+0x6e>
    16fe:	11 50       	subi	r17, 0x01	; 1
    1700:	c1 f7       	brne	.-16     	; 0x16f2 <_ZN12Adafruit_BLE5resetEb+0xe>
    1702:	2f e7       	ldi	r18, 0x7F	; 127
    1704:	88 e3       	ldi	r24, 0x38	; 56
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	21 50       	subi	r18, 0x01	; 1
    170a:	80 40       	sbci	r24, 0x00	; 0
    170c:	90 40       	sbci	r25, 0x00	; 0
    170e:	e1 f7       	brne	.-8      	; 0x1708 <_ZN12Adafruit_BLE5resetEb+0x24>
    1710:	00 c0       	rjmp	.+0      	; 0x1712 <_ZN12Adafruit_BLE5resetEb+0x2e>
    1712:	00 00       	nop
    1714:	e8 81       	ld	r30, Y
    1716:	f9 81       	ldd	r31, Y+1	; 0x01
    1718:	06 84       	ldd	r0, Z+14	; 0x0e
    171a:	f7 85       	ldd	r31, Z+15	; 0x0f
    171c:	e0 2d       	mov	r30, r0
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	ce 01       	movw	r24, r28
    1722:	09 95       	icall
    1724:	2f e7       	ldi	r18, 0x7F	; 127
    1726:	88 e3       	ldi	r24, 0x38	; 56
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	21 50       	subi	r18, 0x01	; 1
    172c:	80 40       	sbci	r24, 0x00	; 0
    172e:	90 40       	sbci	r25, 0x00	; 0
    1730:	e1 f7       	brne	.-8      	; 0x172a <_ZN12Adafruit_BLE5resetEb+0x46>
    1732:	00 c0       	rjmp	.+0      	; 0x1734 <_ZN12Adafruit_BLE5resetEb+0x50>
    1734:	00 00       	nop
    1736:	15 e0       	ldi	r17, 0x05	; 5
    1738:	62 e0       	ldi	r22, 0x02	; 2
    173a:	75 e0       	ldi	r23, 0x05	; 5
    173c:	ce 01       	movw	r24, r28
    173e:	8a df       	rcall	.-236    	; 0x1654 <_ZN17Adafruit_ATParser9atcommandEPK19__FlashStringHelper>
    1740:	81 11       	cpse	r24, r1
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <_ZN12Adafruit_BLE5resetEb+0x6e>
    1744:	11 50       	subi	r17, 0x01	; 1
    1746:	c1 f7       	brne	.-16     	; 0x1738 <_ZN12Adafruit_BLE5resetEb+0x54>
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	08 95       	ret
    1752:	95 da       	rcall	.-2774   	; 0xc7e <millis_get>
    1754:	fe 01       	movw	r30, r28
    1756:	e0 5b       	subi	r30, 0xB0	; 176
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	60 83       	st	Z, r22
    175c:	71 83       	std	Z+1, r23	; 0x01
    175e:	82 83       	std	Z+2, r24	; 0x02
    1760:	93 83       	std	Z+3, r25	; 0x03
    1762:	00 23       	and	r16, r16
    1764:	49 f0       	breq	.+18     	; 0x1778 <_ZN12Adafruit_BLE5resetEb+0x94>
    1766:	2f ef       	ldi	r18, 0xFF	; 255
    1768:	89 e6       	ldi	r24, 0x69	; 105
    176a:	98 e1       	ldi	r25, 0x18	; 24
    176c:	21 50       	subi	r18, 0x01	; 1
    176e:	80 40       	sbci	r24, 0x00	; 0
    1770:	90 40       	sbci	r25, 0x00	; 0
    1772:	e1 f7       	brne	.-8      	; 0x176c <_ZN12Adafruit_BLE5resetEb+0x88>
    1774:	00 c0       	rjmp	.+0      	; 0x1776 <_ZN12Adafruit_BLE5resetEb+0x92>
    1776:	00 00       	nop
    1778:	e8 81       	ld	r30, Y
    177a:	f9 81       	ldd	r31, Y+1	; 0x01
    177c:	06 80       	ldd	r0, Z+6	; 0x06
    177e:	f7 81       	ldd	r31, Z+7	; 0x07
    1780:	e0 2d       	mov	r30, r0
    1782:	ce 01       	movw	r24, r28
    1784:	09 95       	icall
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	df cf       	rjmp	.-66     	; 0x1748 <_ZN12Adafruit_BLE5resetEb+0x64>

0000178a <_ZN12Adafruit_BLE4echoEb>:
    178a:	ef 92       	push	r14
    178c:	ff 92       	push	r15
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	00 d0       	rcall	.+0      	; 0x1798 <_ZN12Adafruit_BLE4echoEb+0xe>
    1798:	00 d0       	rcall	.+0      	; 0x179a <_ZN12Adafruit_BLE4echoEb+0x10>
    179a:	00 d0       	rcall	.+0      	; 0x179c <_ZN12Adafruit_BLE4echoEb+0x12>
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	33 e0       	ldi	r19, 0x03	; 3
    17a4:	3e 83       	std	Y+6, r19	; 0x06
    17a6:	2d 83       	std	Y+5, r18	; 0x05
    17a8:	46 2f       	mov	r20, r22
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	49 83       	std	Y+1, r20	; 0x01
    17b2:	5a 83       	std	Y+2, r21	; 0x02
    17b4:	6b 83       	std	Y+3, r22	; 0x03
    17b6:	7c 83       	std	Y+4, r23	; 0x04
    17b8:	9e 01       	movw	r18, r28
    17ba:	2f 5f       	subi	r18, 0xFF	; 255
    17bc:	3f 4f       	sbci	r19, 0xFF	; 255
    17be:	79 01       	movw	r14, r18
    17c0:	8e 01       	movw	r16, r28
    17c2:	0b 5f       	subi	r16, 0xFB	; 251
    17c4:	1f 4f       	sbci	r17, 0xFF	; 255
    17c6:	21 e0       	ldi	r18, 0x01	; 1
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	6e ee       	ldi	r22, 0xEE	; 238
    17ce:	74 e0       	ldi	r23, 0x04	; 4
    17d0:	02 df       	rcall	.-508    	; 0x15d6 <_ZN17Adafruit_ATParser14atcommand_fullEPK19__FlashStringHelperPlhPjPm>
    17d2:	26 96       	adiw	r28, 0x06	; 6
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	ff 90       	pop	r15
    17e8:	ef 90       	pop	r14
    17ea:	08 95       	ret

000017ec <_ZN12Adafruit_BLE16isVersionAtLeastEPKc>:
/*!
    @brief  Checks if firmware is equal or later than specified version
*/
/**************************************************************************/
bool Adafruit_BLE::isVersionAtLeast(const char * versionString)
{
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	ec 01       	movw	r28, r24
    17fa:	7b 01       	movw	r14, r22
  uint8_t current_mode = _mode;
    17fc:	0c 85       	ldd	r16, Y+12	; 0x0c

  // switch mode if necessary to execute command
  if ( current_mode == BLUEFRUIT_MODE_DATA ) setMode(BLUEFRUIT_MODE_COMMAND);
    17fe:	01 11       	cpse	r16, r1
    1800:	07 c0       	rjmp	.+14     	; 0x1810 <_ZN12Adafruit_BLE16isVersionAtLeastEPKc+0x24>
    1802:	e8 81       	ld	r30, Y
    1804:	f9 81       	ldd	r31, Y+1	; 0x01
    1806:	06 84       	ldd	r0, Z+14	; 0x0e
    1808:	f7 85       	ldd	r31, Z+15	; 0x0f
    180a:	e0 2d       	mov	r30, r0
    180c:	61 e0       	ldi	r22, 0x01	; 1
    180e:	09 95       	icall

  // requesting version number
  println(F("ATI=4"));
    1810:	65 ec       	ldi	r22, 0xC5	; 197
    1812:	74 e0       	ldi	r23, 0x04	; 4
    1814:	ce 01       	movw	r24, r28

  readline();
    1816:	48 dc       	rcall	.-1904   	; 0x10a8 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1818:	ce 01       	movw	r24, r28
  bool result = ( strcmp(buffer, versionString) >= 0 );
    181a:	2d df       	rcall	.-422    	; 0x1676 <_ZN17Adafruit_ATParser8readlineEv>
    181c:	b7 01       	movw	r22, r14
    181e:	ce 01       	movw	r24, r28
    1820:	0e 96       	adiw	r24, 0x0e	; 14
    1822:	0e 94 af 23 	call	0x475e	; 0x475e <strcmp>
    1826:	90 95       	com	r25
    1828:	19 2f       	mov	r17, r25
    182a:	11 1f       	adc	r17, r17
  waitForOK();
    182c:	11 27       	eor	r17, r17
    182e:	11 1f       	adc	r17, r17
    1830:	ce 01       	movw	r24, r28

  // switch back if necessary
  if ( current_mode == BLUEFRUIT_MODE_DATA ) setMode(BLUEFRUIT_MODE_DATA);
    1832:	6f dd       	rcall	.-1314   	; 0x1312 <_ZN17Adafruit_ATParser9waitForOKEv>
    1834:	01 11       	cpse	r16, r1
    1836:	08 c0       	rjmp	.+16     	; 0x1848 <_ZN12Adafruit_BLE16isVersionAtLeastEPKc+0x5c>
    1838:	e8 81       	ld	r30, Y
    183a:	f9 81       	ldd	r31, Y+1	; 0x01
    183c:	06 84       	ldd	r0, Z+14	; 0x0e
    183e:	f7 85       	ldd	r31, Z+15	; 0x0f
    1840:	e0 2d       	mov	r30, r0
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	ce 01       	movw	r24, r28

  return result;
}
    1846:	09 95       	icall
    1848:	81 2f       	mov	r24, r17
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	08 95       	ret

00001858 <_ZN24Adafruit_BluefruitLE_SPI7setModeEh>:
void Adafruit_BluefruitLE_SPI::end(void)
{
  if (m_sck_pin == -1) {
     SPI_Disable();
  }
}
    1858:	62 30       	cpi	r22, 0x02	; 2
    185a:	30 f4       	brcc	.+12     	; 0x1868 <_ZN24Adafruit_BluefruitLE_SPI7setModeEh+0x10>
    185c:	fc 01       	movw	r30, r24
    185e:	24 85       	ldd	r18, Z+12	; 0x0c
    1860:	26 13       	cpse	r18, r22
    1862:	64 87       	std	Z+12, r22	; 0x0c
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	08 95       	ret
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	08 95       	ret

0000186c <_ZN24Adafruit_BluefruitLE_SPI5flushEv>:
    186c:	8b 54       	subi	r24, 0x4B	; 75
    186e:	9f 4f       	sbci	r25, 0xFF	; 255
    1870:	f5 ca       	rjmp	.-2582   	; 0xe5c <_ZN13Adafruit_FIFO5clearEv>

00001872 <_ZNK12TimeoutTimer7expiredEv>:
    1872:	cf 92       	push	r12
    1874:	df 92       	push	r13
    1876:	ef 92       	push	r14
    1878:	ff 92       	push	r15
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	ec 01       	movw	r28, r24
    1880:	fe d9       	rcall	.-3076   	; 0xc7e <millis_get>
    1882:	c8 80       	ld	r12, Y
    1884:	d9 80       	ldd	r13, Y+1	; 0x01
    1886:	ea 80       	ldd	r14, Y+2	; 0x02
    1888:	fb 80       	ldd	r15, Y+3	; 0x03
    188a:	6c 19       	sub	r22, r12
    188c:	7d 09       	sbc	r23, r13
    188e:	8e 09       	sbc	r24, r14
    1890:	9f 09       	sbc	r25, r15
    1892:	21 e0       	ldi	r18, 0x01	; 1
    1894:	cc 80       	ldd	r12, Y+4	; 0x04
    1896:	dd 80       	ldd	r13, Y+5	; 0x05
    1898:	ee 80       	ldd	r14, Y+6	; 0x06
    189a:	ff 80       	ldd	r15, Y+7	; 0x07
    189c:	6c 15       	cp	r22, r12
    189e:	7d 05       	cpc	r23, r13
    18a0:	8e 05       	cpc	r24, r14
    18a2:	9f 05       	cpc	r25, r15
    18a4:	08 f4       	brcc	.+2      	; 0x18a8 <_ZNK12TimeoutTimer7expiredEv+0x36>
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	82 2f       	mov	r24, r18
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	08 95       	ret

000018b8 <_ZN24Adafruit_BluefruitLE_SPIC1Eaaa>:
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	ec 01       	movw	r28, r24
    18c2:	12 2f       	mov	r17, r18
    18c4:	e5 de       	rcall	.-566    	; 0x1690 <_ZN12Adafruit_BLEC1Ev>
    18c6:	8d e0       	ldi	r24, 0x0D	; 13
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	99 83       	std	Y+1, r25	; 0x01
    18cc:	88 83       	st	Y, r24
    18ce:	be 01       	movw	r22, r28
    18d0:	6b 58       	subi	r22, 0x8B	; 139
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	01 e0       	ldi	r16, 0x01	; 1
    18d6:	21 e0       	ldi	r18, 0x01	; 1
    18d8:	40 e4       	ldi	r20, 0x40	; 64
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	ce 01       	movw	r24, r28
    18de:	8b 54       	subi	r24, 0x4B	; 75
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	ac da       	rcall	.-2728   	; 0xe3c <_ZN13Adafruit_FIFOC1EPvjhb>
    18e4:	fe 01       	movw	r30, r28
    18e6:	e1 5b       	subi	r30, 0xB1	; 177
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	83 e0       	ldi	r24, 0x03	; 3
    18ec:	80 83       	st	Z, r24
    18ee:	93 b1       	in	r25, 0x03	; 3
    18f0:	8c b1       	in	r24, 0x0c	; 12
    18f2:	3f 96       	adiw	r30, 0x0f	; 15
    18f4:	90 71       	andi	r25, 0x10	; 16
    18f6:	90 83       	st	Z, r25
    18f8:	31 96       	adiw	r30, 0x01	; 1
    18fa:	80 74       	andi	r24, 0x40	; 64
    18fc:	80 83       	st	Z, r24
    18fe:	31 96       	adiw	r30, 0x01	; 1
    1900:	10 83       	st	Z, r17
    1902:	31 96       	adiw	r30, 0x01	; 1
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	80 83       	st	Z, r24
    1908:	31 96       	adiw	r30, 0x01	; 1
    190a:	80 83       	st	Z, r24
    190c:	31 96       	adiw	r30, 0x01	; 1
    190e:	80 83       	st	Z, r24
    1910:	cc 58       	subi	r28, 0x8C	; 140
    1912:	df 4f       	sbci	r29, 0xFF	; 255
    1914:	18 82       	st	Y, r1
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	08 95       	ret

00001920 <_ZN24Adafruit_BluefruitLE_SPI18simulateSwitchModeEv>:
    @brief Handle direct "+++" input command from user.
           User should use setMode instead
*/
/******************************************************************************/
void Adafruit_BluefruitLE_SPI::simulateSwitchMode(void)
{
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	1f 92       	push	r1
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
  _mode = 1 - _mode;
    192e:	fc 01       	movw	r30, r24
    1930:	34 85       	ldd	r19, Z+12	; 0x0c
    1932:	21 e0       	ldi	r18, 0x01	; 1
    1934:	23 1b       	sub	r18, r19
    1936:	24 87       	std	Z+12, r18	; 0x0c

  char ch = '0' + _mode;
    1938:	21 e3       	ldi	r18, 0x31	; 49
    193a:	23 1b       	sub	r18, r19
    193c:	29 83       	std	Y+1, r18	; 0x01
  m_rx_fifo.write(&ch);
    193e:	8c 01       	movw	r16, r24
    1940:	0b 54       	subi	r16, 0x4B	; 75
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
    1944:	be 01       	movw	r22, r28
    1946:	6f 5f       	subi	r22, 0xFF	; 255
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	c8 01       	movw	r24, r16
    194c:	8f da       	rcall	.-2786   	; 0xe6c <_ZN13Adafruit_FIFO5writeEPKv>
  m_rx_fifo.write_n("\r\nOK\r\n", 6);
    194e:	46 e0       	ldi	r20, 0x06	; 6
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	6e ef       	ldi	r22, 0xFE	; 254
    1954:	71 e0       	ldi	r23, 0x01	; 1
    1956:	c8 01       	movw	r24, r16
    1958:	c4 da       	rcall	.-2680   	; 0xee2 <_ZN13Adafruit_FIFO7write_nEPKvj>
}
    195a:	0f 90       	pop	r0
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	08 95       	ret

00001966 <_ZN24Adafruit_BluefruitLE_SPI7spixferEh>:
/*!

*/
/******************************************************************************/
uint8_t Adafruit_BluefruitLE_SPI::spixfer(uint8_t x) {
  if (m_sck_pin == -1) {
    1966:	8f 59       	subi	r24, 0x9F	; 159
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	fc 01       	movw	r30, r24
    196c:	80 81       	ld	r24, Z
    196e:	8f 3f       	cpi	r24, 0xFF	; 255
    1970:	31 f4       	brne	.+12     	; 0x197e <_ZN24Adafruit_BluefruitLE_SPI7spixferEh+0x18>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1972:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
    1974:	0d b4       	in	r0, 0x2d	; 45
    1976:	07 fe       	sbrs	r0, 7
    1978:	fd cf       	rjmp	.-6      	; 0x1974 <_ZN24Adafruit_BluefruitLE_SPI7spixferEh+0xe>
				return SPDR;
    197a:	8e b5       	in	r24, 0x2e	; 46
    uint8_t reply = SPI_TransferByte(x); 
    return reply;
    197c:	08 95       	ret
  }

  // software spi
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    197e:	27 e0       	ldi	r18, 0x07	; 7
    1980:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t reply = 0;
    1982:	80 e0       	ldi	r24, 0x00	; 0
    reply <<= 1;
    PIN_LOW(SCK_P);
    if (x & (1 <<i)) {
    1984:	70 e0       	ldi	r23, 0x00	; 0
    reply <<= 1;
    1986:	88 0f       	add	r24, r24
    PIN_LOW(SCK_P);
    1988:	29 98       	cbi	0x05, 1	; 5
    if (x & (1 <<i)) {
    198a:	ab 01       	movw	r20, r22
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <_ZN24Adafruit_BluefruitLE_SPI7spixferEh+0x2e>
    1990:	55 95       	asr	r21
    1992:	47 95       	ror	r20
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <_ZN24Adafruit_BluefruitLE_SPI7spixferEh+0x2a>
    1998:	40 ff       	sbrs	r20, 0
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <_ZN24Adafruit_BluefruitLE_SPI7spixferEh+0x48>
      PIN_HIGH(MOSI_P);
    199c:	2a 9a       	sbi	0x05, 2	; 5
    } else {
      PIN_LOW(MOSI_P);
    }

    PIN_HIGH(SCK_P);
    199e:	29 9a       	sbi	0x05, 1	; 5

    if (PIN_READ(MISO_P))
    19a0:	1b 99       	sbic	0x03, 3	; 3
      reply |= 1;
    19a2:	81 60       	ori	r24, 0x01	; 1
  for (int i=7; i>=0; i--) {
    19a4:	21 50       	subi	r18, 0x01	; 1
    19a6:	31 09       	sbc	r19, r1
    19a8:	70 f7       	brcc	.-36     	; 0x1986 <_ZN24Adafruit_BluefruitLE_SPI7spixferEh+0x20>
  }

  PIN_LOW(SCK_P);
    19aa:	29 98       	cbi	0x05, 1	; 5
  //SerialDebug.println(reply, HEX);
  return reply;
}
    19ac:	08 95       	ret
      PIN_LOW(MOSI_P);
    19ae:	2a 98       	cbi	0x05, 2	; 5
    19b0:	f6 cf       	rjmp	.-20     	; 0x199e <_ZN24Adafruit_BluefruitLE_SPI7spixferEh+0x38>

000019b2 <_ZN24Adafruit_BluefruitLE_SPI7spixferEPvj>:
void Adafruit_BluefruitLE_SPI::spixfer(void *buff, size_t len) {
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	7c 01       	movw	r14, r24
    19c0:	eb 01       	movw	r28, r22
    19c2:	8b 01       	movw	r16, r22
    19c4:	04 0f       	add	r16, r20
    19c6:	15 1f       	adc	r17, r21
  while (len--) {
    19c8:	c0 17       	cp	r28, r16
    19ca:	d1 07       	cpc	r29, r17
    19cc:	29 f0       	breq	.+10     	; 0x19d8 <_ZN24Adafruit_BluefruitLE_SPI7spixferEPvj+0x26>
    p[0] = spixfer(p[0]);
    19ce:	68 81       	ld	r22, Y
    19d0:	c7 01       	movw	r24, r14
    19d2:	c9 df       	rcall	.-110    	; 0x1966 <_ZN24Adafruit_BluefruitLE_SPI7spixferEh>
    19d4:	89 93       	st	Y+, r24
  while (len--) {
    19d6:	f8 cf       	rjmp	.-16     	; 0x19c8 <_ZN24Adafruit_BluefruitLE_SPI7spixferEPvj+0x16>
}
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	08 95       	ret

000019e6 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh>:
{
    19e6:	8f 92       	push	r8
    19e8:	9f 92       	push	r9
    19ea:	af 92       	push	r10
    19ec:	bf 92       	push	r11
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	6c 97       	sbiw	r28, 0x1c	; 28
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	7c 01       	movw	r14, r24
    1a10:	b6 2e       	mov	r11, r22
    1a12:	a7 2e       	mov	r10, r23
    1a14:	6a 01       	movw	r12, r20
    1a16:	12 2f       	mov	r17, r18
  if (more_data == 0) flush();
    1a18:	01 11       	cpse	r16, r1
    1a1a:	07 c0       	rjmp	.+14     	; 0x1a2a <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh+0x44>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	ed 91       	ld	r30, X+
    1a20:	fc 91       	ld	r31, X
    1a22:	06 80       	ldd	r0, Z+6	; 0x06
    1a24:	f7 81       	ldd	r31, Z+7	; 0x07
    1a26:	e0 2d       	mov	r30, r0
    1a28:	09 95       	icall
  msgCmd.header.msg_type    = SDEP_MSGTYPE_COMMAND;
    1a2a:	80 e1       	ldi	r24, 0x10	; 16
    1a2c:	89 83       	std	Y+1, r24	; 0x01
  msgCmd.header.cmd_id_high = (command >> 0x8) & 0xFF;
    1a2e:	ab 82       	std	Y+3, r10	; 0x03
  msgCmd.header.cmd_id_low  = command & 0xFF;
    1a30:	ba 82       	std	Y+2, r11	; 0x02
  msgCmd.header.length      = count;
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	80 78       	andi	r24, 0x80	; 128
    1a36:	91 2f       	mov	r25, r17
    1a38:	9f 77       	andi	r25, 0x7F	; 127
    1a3a:	89 2b       	or	r24, r25
    1a3c:	8c 83       	std	Y+4, r24	; 0x04
  msgCmd.header.more_data   = (count == SDEP_MAX_PACKETSIZE) ? more_data : 0;
    1a3e:	10 31       	cpi	r17, 0x10	; 16
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh+0x5e>
    1a42:	00 e0       	ldi	r16, 0x00	; 0
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	00 fb       	bst	r16, 0
    1a48:	87 f9       	bld	r24, 7
    1a4a:	8c 83       	std	Y+4, r24	; 0x04
  if ( buf != NULL && count > 0) memcpy(msgCmd.payload, buf, count);
    1a4c:	c1 14       	cp	r12, r1
    1a4e:	d1 04       	cpc	r13, r1
    1a50:	49 f0       	breq	.+18     	; 0x1a64 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh+0x7e>
    1a52:	11 23       	and	r17, r17
    1a54:	39 f0       	breq	.+14     	; 0x1a64 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh+0x7e>
    1a56:	41 2f       	mov	r20, r17
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	b6 01       	movw	r22, r12
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	05 96       	adiw	r24, 0x05	; 5
    1a60:	0e 94 9f 23 	call	0x473e	; 0x473e <memcpy>
  SPI_CS_ENABLE();
    1a64:	2c 98       	cbi	0x05, 4	; 5
  TimeoutTimer tt(_timeout);
    1a66:	f7 01       	movw	r30, r14
    1a68:	84 80       	ldd	r8, Z+4	; 0x04
    1a6a:	95 80       	ldd	r9, Z+5	; 0x05
    1a6c:	a6 80       	ldd	r10, Z+6	; 0x06

  public:
    TimeoutTimer()              { start = millis(); interval = 0; }
    TimeoutTimer(uint32_t msec) { set(msec); }

    void set(uint32_t msec)     { start = millis(); interval = msec; }
    1a6e:	b7 80       	ldd	r11, Z+7	; 0x07
    1a70:	06 d9       	rcall	.-3572   	; 0xc7e <millis_get>
    1a72:	6d 8b       	std	Y+21, r22	; 0x15
    1a74:	7e 8b       	std	Y+22, r23	; 0x16
    1a76:	8f 8b       	std	Y+23, r24	; 0x17
    1a78:	98 8f       	std	Y+24, r25	; 0x18
    1a7a:	89 8e       	std	Y+25, r8	; 0x19
    1a7c:	9a 8e       	std	Y+26, r9	; 0x1a
    1a7e:	ab 8e       	std	Y+27, r10	; 0x1b
  while ( ( spixfer(msgCmd.header.msg_type) == SPI_IGNORED_BYTE ) && !tt.expired() )
    1a80:	bc 8e       	std	Y+28, r11	; 0x1c
    1a82:	69 81       	ldd	r22, Y+1	; 0x01
    1a84:	c7 01       	movw	r24, r14
    1a86:	6f df       	rcall	.-290    	; 0x1966 <_ZN24Adafruit_BluefruitLE_SPI7spixferEh>
    1a88:	8e 3f       	cpi	r24, 0xFE	; 254
    1a8a:	41 f4       	brne	.+16     	; 0x1a9c <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh+0xb6>
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	45 96       	adiw	r24, 0x15	; 21
    1a90:	f0 de       	rcall	.-544    	; 0x1872 <_ZNK12TimeoutTimer7expiredEv>
    SPI_CS_DISABLE();
    1a92:	81 11       	cpse	r24, r1
  bool result = !tt.expired();
    1a94:	03 c0       	rjmp	.+6      	; 0x1a9c <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh+0xb6>
    1a96:	2c 9a       	sbi	0x05, 4	; 5
    1a98:	2c 98       	cbi	0x05, 4	; 5
    1a9a:	f3 cf       	rjmp	.-26     	; 0x1a82 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh+0x9c>
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	45 96       	adiw	r24, 0x15	; 21
  if ( result )
    1aa0:	e8 de       	rcall	.-560    	; 0x1872 <_ZNK12TimeoutTimer7expiredEv>
    spixfer((void*) (((uint8_t*)&msgCmd) +1), sizeof(sdepMsgHeader_t)+count-1);
    1aa2:	01 e0       	ldi	r16, 0x01	; 1
    1aa4:	08 27       	eor	r16, r24
    1aa6:	49 f0       	breq	.+18     	; 0x1aba <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh+0xd4>
    1aa8:	41 2f       	mov	r20, r17
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	4d 5f       	subi	r20, 0xFD	; 253
    1aae:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab0:	be 01       	movw	r22, r28
    1ab2:	6e 5f       	subi	r22, 0xFE	; 254
  SPI_CS_DISABLE();
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
}
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	7c df       	rcall	.-264    	; 0x19b2 <_ZN24Adafruit_BluefruitLE_SPI7spixferEPvj>
    1aba:	2c 9a       	sbi	0x05, 4	; 5
    1abc:	80 2f       	mov	r24, r16
    1abe:	6c 96       	adiw	r28, 0x1c	; 28
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
    1ada:	bf 90       	pop	r11
    1adc:	af 90       	pop	r10
    1ade:	9f 90       	pop	r9
    1ae0:	8f 90       	pop	r8
    1ae2:	08 95       	ret

00001ae4 <_ZN24Adafruit_BluefruitLE_SPI21sendInitializePatternEv>:
{
    1ae4:	0f 93       	push	r16
  return sendPacket(SDEP_CMDTYPE_INITIALIZE, NULL, 0, 0);
    1ae6:	00 e0       	ldi	r16, 0x00	; 0
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	6f ee       	ldi	r22, 0xEF	; 239
    1af0:	7e eb       	ldi	r23, 0xBE	; 190
    1af2:	79 df       	rcall	.-270    	; 0x19e6 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh>
}
    1af4:	0f 91       	pop	r16
    1af6:	08 95       	ret

00001af8 <_ZN24Adafruit_BluefruitLE_SPI5beginEbb>:
{
    1af8:	cf 93       	push	r28
    1afa:	c4 2f       	mov	r28, r20
  _verbose = v;
    1afc:	fc 01       	movw	r30, r24
    1afe:	65 87       	std	Z+13, r22	; 0x0d
  SET_INPUT(IRQ_P);
    1b00:	6e 98       	cbi	0x0d, 6	; 13
  SET_OUTPUT(CS_P);
    1b02:	24 9a       	sbi	0x04, 4	; 4
  SPI_CS_DISABLE();
    1b04:	2c 9a       	sbi	0x05, 4	; 5
  if (m_sck_pin == -1) {
    1b06:	ef 59       	subi	r30, 0x9F	; 159
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	20 81       	ld	r18, Z
    1b0c:	2f 3f       	cpi	r18, 0xFF	; 255
    1b0e:	d9 f4       	brne	.+54     	; 0x1b46 <_ZN24Adafruit_BluefruitLE_SPI5beginEbb+0x4e>
				DDRB  |= (1 << 0);
    1b10:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
    1b12:	28 9a       	sbi	0x05, 0	; 5
				DDRB  |=  ((1 << 1) | (1 << 2));
    1b14:	24 b1       	in	r18, 0x04	; 4
    1b16:	26 60       	ori	r18, 0x06	; 6
    1b18:	24 b9       	out	0x04, r18	; 4
				DDRB  &= ~(1 << 3);
    1b1a:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
    1b1c:	2b 9a       	sbi	0x05, 3	; 5
				  SPSR |= (1 << SPI2X);
    1b1e:	2d b5       	in	r18, 0x2d	; 45
    1b20:	21 60       	ori	r18, 0x01	; 1
    1b22:	2d bd       	out	0x2d, r18	; 45
				DDRB &= ~(1 << 0);
    1b24:	20 98       	cbi	0x04, 0	; 4
				SPCR  = ((1 << SPE) | SPIOptions);
    1b26:	2c e5       	ldi	r18, 0x5C	; 92
  isOK = sendInitializePattern();
    1b28:	2c bd       	out	0x2c, r18	; 44
  if (blocking)
    1b2a:	dc df       	rcall	.-72     	; 0x1ae4 <_ZN24Adafruit_BluefruitLE_SPI21sendInitializePatternEv>
    1b2c:	cc 23       	and	r28, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b2e:	49 f0       	breq	.+18     	; 0x1b42 <_ZN24Adafruit_BluefruitLE_SPI5beginEbb+0x4a>
    1b30:	ff ef       	ldi	r31, 0xFF	; 255
    1b32:	29 e6       	ldi	r18, 0x69	; 105
    1b34:	38 e1       	ldi	r19, 0x18	; 24
    1b36:	f1 50       	subi	r31, 0x01	; 1
    1b38:	20 40       	sbci	r18, 0x00	; 0
    1b3a:	30 40       	sbci	r19, 0x00	; 0
    1b3c:	e1 f7       	brne	.-8      	; 0x1b36 <_ZN24Adafruit_BluefruitLE_SPI5beginEbb+0x3e>
    1b3e:	00 c0       	rjmp	.+0      	; 0x1b40 <_ZN24Adafruit_BluefruitLE_SPI5beginEbb+0x48>
}
    1b40:	00 00       	nop
    1b42:	cf 91       	pop	r28
    SET_OUTPUT(SCK_P);
    1b44:	08 95       	ret
    PIN_LOW(SCK_P);
    1b46:	21 9a       	sbi	0x04, 1	; 4
    SET_INPUT(MISO_P);
    1b48:	29 98       	cbi	0x05, 1	; 5
    SET_OUTPUT(MOSI_P);
    1b4a:	23 98       	cbi	0x04, 3	; 4
    m_sck_pin = PIN_READ(SCK_P);
    1b4c:	22 9a       	sbi	0x04, 2	; 4
    1b4e:	23 b1       	in	r18, 0x03	; 3
    1b50:	22 70       	andi	r18, 0x02	; 2
    1b52:	20 83       	st	Z, r18
    1b54:	ea cf       	rjmp	.-44     	; 0x1b2a <_ZN24Adafruit_BluefruitLE_SPI5beginEbb+0x32>

00001b56 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t>:
{
    1b56:	8f 92       	push	r8
    1b58:	9f 92       	push	r9
    1b5a:	af 92       	push	r10
    1b5c:	bf 92       	push	r11
    1b5e:	cf 92       	push	r12
    1b60:	df 92       	push	r13
    1b62:	ef 92       	push	r14
    1b64:	ff 92       	push	r15
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	28 97       	sbiw	r28, 0x08	; 8
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	6c 01       	movw	r12, r24
    1b80:	8b 01       	movw	r16, r22
  TimeoutTimer tt(2*_timeout);
    1b82:	fc 01       	movw	r30, r24
    1b84:	84 80       	ldd	r8, Z+4	; 0x04
    1b86:	95 80       	ldd	r9, Z+5	; 0x05
    1b88:	a6 80       	ldd	r10, Z+6	; 0x06
    1b8a:	b7 80       	ldd	r11, Z+7	; 0x07
    1b8c:	88 0c       	add	r8, r8
    1b8e:	99 1c       	adc	r9, r9
    1b90:	aa 1c       	adc	r10, r10
    1b92:	bb 1c       	adc	r11, r11
    1b94:	74 d8       	rcall	.-3864   	; 0xc7e <millis_get>
    1b96:	69 83       	std	Y+1, r22	; 0x01
    1b98:	7a 83       	std	Y+2, r23	; 0x02
    1b9a:	8b 83       	std	Y+3, r24	; 0x03
    1b9c:	9c 83       	std	Y+4, r25	; 0x04
    1b9e:	8d 82       	std	Y+5, r8	; 0x05
    1ba0:	9e 82       	std	Y+6, r9	; 0x06
    1ba2:	af 82       	std	Y+7, r10	; 0x07
  while ( !PIN_READ(IRQ_P) ) {
    1ba4:	b8 86       	std	Y+8, r11	; 0x08
    1ba6:	66 99       	sbic	0x0c, 6	; 12
    if (tt.expired()) return false;
    1ba8:	07 c0       	rjmp	.+14     	; 0x1bb8 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0x62>
    1baa:	ce 01       	movw	r24, r28
    1bac:	01 96       	adiw	r24, 0x01	; 1
    1bae:	61 de       	rcall	.-830    	; 0x1872 <_ZNK12TimeoutTimer7expiredEv>
    1bb0:	88 23       	and	r24, r24
    1bb2:	c9 f3       	breq	.-14     	; 0x1ba6 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0x50>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
  SPI_CS_ENABLE();
    1bb6:	3d c0       	rjmp	.+122    	; 0x1c32 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0xdc>
  tt.set(_timeout);
    1bb8:	2c 98       	cbi	0x05, 4	; 5
    1bba:	f6 01       	movw	r30, r12
    1bbc:	84 80       	ldd	r8, Z+4	; 0x04
    1bbe:	95 80       	ldd	r9, Z+5	; 0x05
    1bc0:	a6 80       	ldd	r10, Z+6	; 0x06
    1bc2:	b7 80       	ldd	r11, Z+7	; 0x07
    1bc4:	5c d8       	rcall	.-3912   	; 0xc7e <millis_get>
    1bc6:	69 83       	std	Y+1, r22	; 0x01
    1bc8:	7a 83       	std	Y+2, r23	; 0x02
    1bca:	8b 83       	std	Y+3, r24	; 0x03
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	8d 82       	std	Y+5, r8	; 0x05
    1bd0:	9e 82       	std	Y+6, r9	; 0x06
    if ( tt.expired() ) break;
    1bd2:	af 82       	std	Y+7, r10	; 0x07
    1bd4:	b8 86       	std	Y+8, r11	; 0x08
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    p_header->msg_type = spixfer(0xff);
    1bda:	4b de       	rcall	.-874    	; 0x1872 <_ZNK12TimeoutTimer7expiredEv>
    1bdc:	81 11       	cpse	r24, r1
    1bde:	11 c0       	rjmp	.+34     	; 0x1c02 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0xac>
    1be0:	6f ef       	ldi	r22, 0xFF	; 255
    1be2:	c6 01       	movw	r24, r12
    1be4:	c0 de       	rcall	.-640    	; 0x1966 <_ZN24Adafruit_BluefruitLE_SPI7spixferEh>
    if (p_header->msg_type == SPI_IGNORED_BYTE)
    1be6:	f8 01       	movw	r30, r16
    1be8:	80 83       	st	Z, r24
      SPI_CS_DISABLE();
    1bea:	8e 3f       	cpi	r24, 0xFE	; 254
      SPI_CS_ENABLE();
    1bec:	19 f4       	brne	.+6      	; 0x1bf4 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0x9e>
    1bee:	2c 9a       	sbi	0x05, 4	; 5
    else if (p_header->msg_type == SPI_OVERREAD_BYTE)
    1bf0:	2c 98       	cbi	0x05, 4	; 5
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0xa2>
  }  while (p_header->msg_type == SPI_IGNORED_BYTE || p_header->msg_type == SPI_OVERREAD_BYTE);
    1bf4:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf6:	d9 f3       	breq	.-10     	; 0x1bee <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0x98>
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	80 81       	ld	r24, Z
    1bfc:	8e 5f       	subi	r24, 0xFE	; 254
    while ( p_header->msg_type != SDEP_MSGTYPE_RESPONSE && p_header->msg_type != SDEP_MSGTYPE_ERROR && !tt.expired() )
    1bfe:	82 30       	cpi	r24, 0x02	; 2
    1c00:	50 f3       	brcs	.-44     	; 0x1bd6 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0x80>
    1c02:	f8 01       	movw	r30, r16
    1c04:	80 81       	ld	r24, Z
    1c06:	80 32       	cpi	r24, 0x20	; 32
    1c08:	69 f0       	breq	.+26     	; 0x1c24 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0xce>
    1c0a:	80 38       	cpi	r24, 0x80	; 128
    1c0c:	59 f0       	breq	.+22     	; 0x1c24 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0xce>
    1c0e:	ce 01       	movw	r24, r28
      p_header->msg_type = spixfer(0xff);
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	2f de       	rcall	.-930    	; 0x1872 <_ZNK12TimeoutTimer7expiredEv>
    1c14:	81 11       	cpse	r24, r1
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0xce>
    1c18:	6f ef       	ldi	r22, 0xFF	; 255
    while ( p_header->msg_type != SDEP_MSGTYPE_RESPONSE && p_header->msg_type != SDEP_MSGTYPE_ERROR && !tt.expired() )
    1c1a:	c6 01       	movw	r24, r12
    if ( tt.expired() ) break;
    1c1c:	a4 de       	rcall	.-696    	; 0x1966 <_ZN24Adafruit_BluefruitLE_SPI7spixferEh>
    1c1e:	f8 01       	movw	r30, r16
    1c20:	80 83       	st	Z, r24
    1c22:	ef cf       	rjmp	.-34     	; 0x1c02 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0xac>
    1c24:	ce 01       	movw	r24, r28
    1c26:	01 96       	adiw	r24, 0x01	; 1
  bool result=false;
    1c28:	24 de       	rcall	.-952    	; 0x1872 <_ZNK12TimeoutTimer7expiredEv>
  SPI_CS_DISABLE();
    1c2a:	88 23       	and	r24, r24
}
    1c2c:	a9 f0       	breq	.+42     	; 0x1c58 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0x102>
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	2c 9a       	sbi	0x05, 4	; 5
    1c32:	28 96       	adiw	r28, 0x08	; 8
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	df 90       	pop	r13
    1c4c:	cf 90       	pop	r12
    1c4e:	bf 90       	pop	r11
    1c50:	af 90       	pop	r10
    memset( (&p_header->msg_type)+1, 0xff, sizeof(sdepMsgHeader_t) - 1);
    1c52:	9f 90       	pop	r9
    1c54:	8f 90       	pop	r8
    1c56:	08 95       	ret
    1c58:	43 e0       	ldi	r20, 0x03	; 3
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	6f ef       	ldi	r22, 0xFF	; 255
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	78 01       	movw	r14, r16
    1c62:	ff ef       	ldi	r31, 0xFF	; 255
    1c64:	ef 1a       	sub	r14, r31
    spixfer((&p_header->msg_type)+1, sizeof(sdepMsgHeader_t) - 1);
    1c66:	ff 0a       	sbc	r15, r31
    1c68:	c7 01       	movw	r24, r14
    1c6a:	0e 94 a8 23 	call	0x4750	; 0x4750 <memset>
    1c6e:	43 e0       	ldi	r20, 0x03	; 3
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	b7 01       	movw	r22, r14
    1c74:	c6 01       	movw	r24, r12
    1c76:	9d de       	rcall	.-710    	; 0x19b2 <_ZN24Adafruit_BluefruitLE_SPI7spixferEPvj>
    if ( p_header->msg_type == SDEP_MSGTYPE_ERROR ) break;
    1c78:	f8 01       	movw	r30, r16
    1c7a:	81 81       	ldd	r24, Z+1	; 0x01
    1c7c:	92 81       	ldd	r25, Z+2	; 0x02
    if (!(cmd_id == SDEP_CMDTYPE_AT_WRAPPER ||
    1c7e:	20 81       	ld	r18, Z
    1c80:	20 38       	cpi	r18, 0x80	; 128
    1c82:	a9 f2       	breq	.-86     	; 0x1c2e <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0xd8>
    if(p_header->length > SDEP_MAX_PACKETSIZE) break;
    1c84:	9a 50       	subi	r25, 0x0A	; 10
    1c86:	03 97       	sbiw	r24, 0x03	; 3
    1c88:	90 f6       	brcc	.-92     	; 0x1c2e <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0xd8>
    1c8a:	83 81       	ldd	r24, Z+3	; 0x03
    memset(p_response->payload, 0xff, p_header->length);
    1c8c:	8f 77       	andi	r24, 0x7F	; 127
    1c8e:	81 31       	cpi	r24, 0x11	; 17
    1c90:	70 f6       	brcc	.-100    	; 0x1c2e <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0xd8>
    1c92:	e8 2e       	mov	r14, r24
    1c94:	f1 2c       	mov	r15, r1
    1c96:	0c 5f       	subi	r16, 0xFC	; 252
    1c98:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9a:	a7 01       	movw	r20, r14
    1c9c:	6f ef       	ldi	r22, 0xFF	; 255
    spixfer(p_response->payload, p_header->length);
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	c8 01       	movw	r24, r16
    1ca2:	0e 94 a8 23 	call	0x4750	; 0x4750 <memset>
    1ca6:	a7 01       	movw	r20, r14
    result = true;
    1ca8:	b8 01       	movw	r22, r16
    1caa:	c6 01       	movw	r24, r12
    1cac:	82 de       	rcall	.-764    	; 0x19b2 <_ZN24Adafruit_BluefruitLE_SPI7spixferEPvj>
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	bf cf       	rjmp	.-130    	; 0x1c30 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t+0xda>

00001cb2 <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv>:
{
    1cb2:	af 92       	push	r10
    1cb4:	bf 92       	push	r11
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	64 97       	sbiw	r28, 0x14	; 20
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	7c 01       	movw	r14, r24
    inline bool     full(void)      { return m_count == m_depth; }
    inline uint16_t count(void)     { return m_count; }
    inline uint16_t remaining(void) { return m_depth - m_count; }
    1cd8:	8c 01       	movw	r16, r24
    1cda:	0b 54       	subi	r16, 0x4B	; 75
    1cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    memclr(&msg_response, sizeof(sdepMsgResponse_t));
    1cde:	84 e1       	ldi	r24, 0x14	; 20
    1ce0:	a8 2e       	mov	r10, r24
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	6c 01       	movw	r12, r24
    1ce8:	f8 01       	movw	r30, r16
    1cea:	26 81       	ldd	r18, Z+6	; 0x06
    1cec:	37 81       	ldd	r19, Z+7	; 0x07
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	82 1b       	sub	r24, r18
    1cf4:	93 0b       	sbc	r25, r19
  while ( m_rx_fifo.remaining() >= SDEP_MAX_PACKETSIZE )
    1cf6:	40 97       	sbiw	r24, 0x10	; 16
    1cf8:	48 f1       	brcs	.+82     	; 0x1d4c <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv+0x9a>
    memclr(&msg_response, sizeof(sdepMsgResponse_t));
    1cfa:	f6 01       	movw	r30, r12
    1cfc:	8a 2d       	mov	r24, r10
    1cfe:	11 92       	st	Z+, r1
    1d00:	8a 95       	dec	r24
    1d02:	e9 f7       	brne	.-6      	; 0x1cfe <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv+0x4c>
    if ( !getPacket(&msg_response) ) return false;
    1d04:	b6 01       	movw	r22, r12
    1d06:	c7 01       	movw	r24, r14
    1d08:	26 df       	rcall	.-436    	; 0x1b56 <_ZN24Adafruit_BluefruitLE_SPI9getPacketEP16sdepMsgCommand_t>
    1d0a:	b8 2e       	mov	r11, r24
    1d0c:	88 23       	and	r24, r24
    1d0e:	61 f0       	breq	.+24     	; 0x1d28 <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv+0x76>
    if ( msg_response.header.length > 0)
    1d10:	4c 81       	ldd	r20, Y+4	; 0x04
    1d12:	4f 77       	andi	r20, 0x7F	; 127
    1d14:	31 f0       	breq	.+12     	; 0x1d22 <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv+0x70>
      m_rx_fifo.write_n(msg_response.payload, msg_response.header.length);
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	be 01       	movw	r22, r28
    1d1a:	6b 5f       	subi	r22, 0xFB	; 251
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	c8 01       	movw	r24, r16
    1d20:	e0 d8       	rcall	.-3648   	; 0xee2 <_ZN13Adafruit_FIFO7write_nEPKvj>
    if ( !msg_response.header.more_data ) break;
    1d22:	8c 81       	ldd	r24, Y+4	; 0x04
    1d24:	87 fd       	sbrc	r24, 7
    1d26:	e0 cf       	rjmp	.-64     	; 0x1ce8 <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv+0x36>
}
    1d28:	8b 2d       	mov	r24, r11
    1d2a:	64 96       	adiw	r28, 0x14	; 20
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15
    1d40:	ef 90       	pop	r14
    1d42:	df 90       	pop	r13
    1d44:	cf 90       	pop	r12
    1d46:	bf 90       	pop	r11
    1d48:	af 90       	pop	r10
    1d4a:	08 95       	ret
  return true;
    1d4c:	bb 24       	eor	r11, r11
    1d4e:	b3 94       	inc	r11
    1d50:	eb cf       	rjmp	.-42     	; 0x1d28 <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv+0x76>

00001d52 <_ZN24Adafruit_BluefruitLE_SPI5writeEh>:
{
    1d52:	af 92       	push	r10
    1d54:	bf 92       	push	r11
    1d56:	cf 92       	push	r12
    1d58:	df 92       	push	r13
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	1f 92       	push	r1
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	7c 01       	movw	r14, r24
    1d6e:	69 83       	std	Y+1, r22	; 0x01
  if (_mode == BLUEFRUIT_MODE_DATA)
    1d70:	fc 01       	movw	r30, r24
    1d72:	84 85       	ldd	r24, Z+12	; 0x0c
    1d74:	81 11       	cpse	r24, r1
    1d76:	19 c0       	rjmp	.+50     	; 0x1daa <_ZN24Adafruit_BluefruitLE_SPI5writeEh+0x58>
    sendPacket(SDEP_CMDTYPE_BLE_UARTTX, &c, 1, 0);
    1d78:	00 e0       	ldi	r16, 0x00	; 0
    1d7a:	21 e0       	ldi	r18, 0x01	; 1
    1d7c:	ae 01       	movw	r20, r28
    1d7e:	4f 5f       	subi	r20, 0xFF	; 255
    1d80:	5f 4f       	sbci	r21, 0xFF	; 255
    1d82:	61 e0       	ldi	r22, 0x01	; 1
    1d84:	7a e0       	ldi	r23, 0x0A	; 10
    1d86:	c7 01       	movw	r24, r14
    getResponse();
    1d88:	2e de       	rcall	.-932    	; 0x19e6 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh>
    1d8a:	c7 01       	movw	r24, r14
}
    1d8c:	92 df       	rcall	.-220    	; 0x1cb2 <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv>
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0f 90       	pop	r0
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	ef 90       	pop	r14
    1da0:	df 90       	pop	r13
    1da2:	cf 90       	pop	r12
    1da4:	bf 90       	pop	r11
    1da6:	af 90       	pop	r10
  if (c == '\r' || c == '\n')
    1da8:	08 95       	ret
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	67 01       	movw	r12, r14
    1dae:	f4 e7       	ldi	r31, 0x74	; 116
    1db0:	cf 0e       	add	r12, r31
    1db2:	d1 1c       	adc	r13, r1
    1db4:	f6 01       	movw	r30, r12
    1db6:	10 81       	ld	r17, Z
    1db8:	8d 30       	cpi	r24, 0x0D	; 13
    1dba:	11 f0       	breq	.+4      	; 0x1dc0 <_ZN24Adafruit_BluefruitLE_SPI5writeEh+0x6e>
    1dbc:	8a 30       	cpi	r24, 0x0A	; 10
    if (m_tx_count > 0)
    1dbe:	e1 f4       	brne	.+56     	; 0x1df8 <_ZN24Adafruit_BluefruitLE_SPI5writeEh+0xa6>
    1dc0:	11 23       	and	r17, r17
      if ( memcmp(m_tx_buffer, "+++", 3) == 0)
    1dc2:	29 f3       	breq	.-54     	; 0x1d8e <_ZN24Adafruit_BluefruitLE_SPI5writeEh+0x3c>
    1dc4:	57 01       	movw	r10, r14
    1dc6:	f4 e6       	ldi	r31, 0x64	; 100
    1dc8:	af 0e       	add	r10, r31
    1dca:	b1 1c       	adc	r11, r1
    1dcc:	43 e0       	ldi	r20, 0x03	; 3
    1dce:	50 e0       	ldi	r21, 0x00	; 0
    1dd0:	65 e0       	ldi	r22, 0x05	; 5
    1dd2:	72 e0       	ldi	r23, 0x02	; 2
    1dd4:	c5 01       	movw	r24, r10
    1dd6:	0e 94 92 23 	call	0x4724	; 0x4724 <memcmp>
        simulateSwitchMode();
    1dda:	89 2b       	or	r24, r25
    1ddc:	29 f4       	brne	.+10     	; 0x1de8 <_ZN24Adafruit_BluefruitLE_SPI5writeEh+0x96>
    1dde:	c7 01       	movw	r24, r14
      m_tx_count = 0;
    1de0:	9f dd       	rcall	.-1218   	; 0x1920 <_ZN24Adafruit_BluefruitLE_SPI18simulateSwitchModeEv>
    1de2:	f6 01       	movw	r30, r12
    1de4:	10 82       	st	Z, r1
        sendPacket(SDEP_CMDTYPE_AT_WRAPPER, m_tx_buffer, m_tx_count, 0);
    1de6:	d3 cf       	rjmp	.-90     	; 0x1d8e <_ZN24Adafruit_BluefruitLE_SPI5writeEh+0x3c>
    1de8:	00 e0       	ldi	r16, 0x00	; 0
    1dea:	21 2f       	mov	r18, r17
    1dec:	a5 01       	movw	r20, r10
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	7a e0       	ldi	r23, 0x0A	; 10
    1df2:	c7 01       	movw	r24, r14
    1df4:	f8 dd       	rcall	.-1040   	; 0x19e6 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh>
  else if (m_tx_count == SDEP_MAX_PACKETSIZE)
    1df6:	f5 cf       	rjmp	.-22     	; 0x1de2 <_ZN24Adafruit_BluefruitLE_SPI5writeEh+0x90>
    1df8:	10 31       	cpi	r17, 0x10	; 16
    sendPacket(SDEP_CMDTYPE_AT_WRAPPER, m_tx_buffer, m_tx_count, 1);
    1dfa:	91 f4       	brne	.+36     	; 0x1e20 <_ZN24Adafruit_BluefruitLE_SPI5writeEh+0xce>
    1dfc:	57 01       	movw	r10, r14
    1dfe:	f4 e6       	ldi	r31, 0x64	; 100
    1e00:	af 0e       	add	r10, r31
    1e02:	b1 1c       	adc	r11, r1
    1e04:	01 e0       	ldi	r16, 0x01	; 1
    1e06:	20 e1       	ldi	r18, 0x10	; 16
    1e08:	a5 01       	movw	r20, r10
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	7a e0       	ldi	r23, 0x0A	; 10
    1e0e:	c7 01       	movw	r24, r14
    m_tx_buffer[0] = c;
    1e10:	ea dd       	rcall	.-1068   	; 0x19e6 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh>
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	f5 01       	movw	r30, r10
    m_tx_count = 1;
    1e16:	80 83       	st	Z, r24
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    m_tx_buffer[m_tx_count++] = c;
    1e1a:	f6 01       	movw	r30, r12
    1e1c:	80 83       	st	Z, r24
    1e1e:	b7 cf       	rjmp	.-146    	; 0x1d8e <_ZN24Adafruit_BluefruitLE_SPI5writeEh+0x3c>
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	91 0f       	add	r25, r17
    1e24:	90 83       	st	Z, r25
    1e26:	e1 0e       	add	r14, r17
    1e28:	f1 1c       	adc	r15, r1
    1e2a:	f7 01       	movw	r30, r14
    1e2c:	ec 59       	subi	r30, 0x9C	; 156
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	f5 cf       	rjmp	.-22     	; 0x1e1c <_ZN24Adafruit_BluefruitLE_SPI5writeEh+0xca>

00001e32 <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj>:
{
    1e32:	8f 92       	push	r8
    1e34:	9f 92       	push	r9
    1e36:	af 92       	push	r10
    1e38:	bf 92       	push	r11
    1e3a:	cf 92       	push	r12
    1e3c:	df 92       	push	r13
    1e3e:	ef 92       	push	r14
    1e40:	ff 92       	push	r15
    1e42:	0f 93       	push	r16
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	5c 01       	movw	r10, r24
    1e4a:	eb 01       	movw	r28, r22
    1e4c:	6a 01       	movw	r12, r20
  if ( _mode == BLUEFRUIT_MODE_DATA )
    1e4e:	dc 01       	movw	r26, r24
    1e50:	1c 96       	adiw	r26, 0x0c	; 12
    1e52:	8c 91       	ld	r24, X
    1e54:	88 23       	and	r24, r24
    1e56:	a1 f0       	breq	.+40     	; 0x1e80 <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0x4e>
    1e58:	7b 01       	movw	r14, r22
    1e5a:	e4 0e       	add	r14, r20
    1e5c:	f5 1e       	adc	r15, r21
    size_t n = 0;
    1e5e:	d1 2c       	mov	r13, r1
    1e60:	c1 2c       	mov	r12, r1
    while (size--) {
    1e62:	ce 15       	cp	r28, r14
    1e64:	df 05       	cpc	r29, r15
    1e66:	19 f1       	breq	.+70     	; 0x1eae <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0x7c>
      n += write(*buf++);
    1e68:	69 91       	ld	r22, Y+
    1e6a:	d5 01       	movw	r26, r10
    1e6c:	ed 91       	ld	r30, X+
    1e6e:	fc 91       	ld	r31, X
    1e70:	01 90       	ld	r0, Z+
    1e72:	f0 81       	ld	r31, Z
    1e74:	e0 2d       	mov	r30, r0
    1e76:	c5 01       	movw	r24, r10
    1e78:	09 95       	icall
    1e7a:	c8 0e       	add	r12, r24
    1e7c:	d9 1e       	adc	r13, r25
    while (size--) {
    1e7e:	f1 cf       	rjmp	.-30     	; 0x1e62 <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0x30>
    if ((size >= 3) &&
    1e80:	43 30       	cpi	r20, 0x03	; 3
    1e82:	51 05       	cpc	r21, r1
    1e84:	08 f1       	brcs	.+66     	; 0x1ec8 <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0x96>
        !memcmp(buf, "+++", 3) &&
    1e86:	43 e0       	ldi	r20, 0x03	; 3
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	65 e0       	ldi	r22, 0x05	; 5
    1e8c:	72 e0       	ldi	r23, 0x02	; 2
    1e8e:	ce 01       	movw	r24, r28
    1e90:	0e 94 92 23 	call	0x4724	; 0x4724 <memcmp>
    if ((size >= 3) &&
    1e94:	89 2b       	or	r24, r25
    1e96:	c1 f4       	brne	.+48     	; 0x1ec8 <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0x96>
        !memcmp(buf, "+++", 3) &&
    1e98:	e3 e0       	ldi	r30, 0x03	; 3
    1e9a:	ce 16       	cp	r12, r30
    1e9c:	d1 04       	cpc	r13, r1
    1e9e:	29 f0       	breq	.+10     	; 0x1eaa <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0x78>
        !(size > 3 && buf[3] != '\r' && buf[3] != '\n') )
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	8d 30       	cpi	r24, 0x0D	; 13
    1ea4:	11 f0       	breq	.+4      	; 0x1eaa <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0x78>
    1ea6:	8a 30       	cpi	r24, 0x0A	; 10
    1ea8:	79 f4       	brne	.+30     	; 0x1ec8 <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0x96>
      simulateSwitchMode();
    1eaa:	c5 01       	movw	r24, r10
    1eac:	39 dd       	rcall	.-1422   	; 0x1920 <_ZN24Adafruit_BluefruitLE_SPI18simulateSwitchModeEv>
}
    1eae:	c6 01       	movw	r24, r12
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	df 90       	pop	r13
    1ebc:	cf 90       	pop	r12
    1ebe:	bf 90       	pop	r11
    1ec0:	af 90       	pop	r10
    1ec2:	9f 90       	pop	r9
    1ec4:	8f 90       	pop	r8
    1ec6:	08 95       	ret
    1ec8:	76 01       	movw	r14, r12
      while(remain)
    1eca:	e1 14       	cp	r14, r1
    1ecc:	f1 04       	cpc	r15, r1
    1ece:	b1 f0       	breq	.+44     	; 0x1efc <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0xca>
        size_t len = min(remain, SDEP_MAX_PACKETSIZE);
    1ed0:	47 01       	movw	r8, r14
    1ed2:	f1 e1       	ldi	r31, 0x11	; 17
    1ed4:	ef 16       	cp	r14, r31
    1ed6:	f1 04       	cpc	r15, r1
    1ed8:	18 f0       	brcs	.+6      	; 0x1ee0 <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0xae>
    1eda:	80 e1       	ldi	r24, 0x10	; 16
    1edc:	88 2e       	mov	r8, r24
    1ede:	91 2c       	mov	r9, r1
        remain -= len;
    1ee0:	e8 18       	sub	r14, r8
    1ee2:	f9 08       	sbc	r15, r9
        sendPacket(SDEP_CMDTYPE_BLE_UARTTX, buf, (uint8_t) len, remain ? 1 : 0);
    1ee4:	01 e0       	ldi	r16, 0x01	; 1
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0xb8>
    1ee8:	00 e0       	ldi	r16, 0x00	; 0
    1eea:	28 2d       	mov	r18, r8
    1eec:	ae 01       	movw	r20, r28
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	7a e0       	ldi	r23, 0x0A	; 10
    1ef2:	c5 01       	movw	r24, r10
    1ef4:	78 dd       	rcall	.-1296   	; 0x19e6 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh>
        buf += len;
    1ef6:	c8 0d       	add	r28, r8
      getResponse();
    1ef8:	d9 1d       	adc	r29, r9
    1efa:	e7 cf       	rjmp	.-50     	; 0x1eca <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0x98>
    1efc:	c5 01       	movw	r24, r10
    1efe:	d9 de       	rcall	.-590    	; 0x1cb2 <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv>
    1f00:	d6 cf       	rjmp	.-84     	; 0x1eae <_ZN24Adafruit_BluefruitLE_SPI5writeEPKhj+0x7c>

00001f02 <_ZN24Adafruit_BluefruitLE_SPI9availableEv>:
{
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	ec 01       	movw	r28, r24
    inline bool     empty(void)     { return m_count == 0; }
    1f0e:	7c 01       	movw	r14, r24
    1f10:	85 eb       	ldi	r24, 0xB5	; 181
    1f12:	e8 0e       	add	r14, r24
    1f14:	f1 1c       	adc	r15, r1
    1f16:	f7 01       	movw	r30, r14
    1f18:	86 81       	ldd	r24, Z+6	; 0x06
    1f1a:	97 81       	ldd	r25, Z+7	; 0x07
  if (! m_rx_fifo.empty() ) {
    1f1c:	89 2b       	or	r24, r25
    1f1e:	41 f0       	breq	.+16     	; 0x1f30 <_ZN24Adafruit_BluefruitLE_SPI9availableEv+0x2e>
    inline uint16_t count(void)     { return m_count; }
    1f20:	86 81       	ldd	r24, Z+6	; 0x06
    1f22:	97 81       	ldd	r25, Z+7	; 0x07
}
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	0f 91       	pop	r16
    1f2a:	ff 90       	pop	r15
    1f2c:	ef 90       	pop	r14
    1f2e:	08 95       	ret
  if ( _mode == BLUEFRUIT_MODE_DATA )
    1f30:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f32:	81 11       	cpse	r24, r1
    1f34:	0c c0       	rjmp	.+24     	; 0x1f4e <_ZN24Adafruit_BluefruitLE_SPI9availableEv+0x4c>
    sendPacket(SDEP_CMDTYPE_BLE_UARTRX, NULL, 0, 0);
    1f36:	00 e0       	ldi	r16, 0x00	; 0
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	62 e0       	ldi	r22, 0x02	; 2
    1f40:	7a e0       	ldi	r23, 0x0A	; 10
    1f42:	ce 01       	movw	r24, r28
    getResponse();
    1f44:	50 dd       	rcall	.-1376   	; 0x19e6 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh>
    1f46:	ce 01       	movw	r24, r28
    1f48:	b4 de       	rcall	.-664    	; 0x1cb2 <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv>
    1f4a:	f7 01       	movw	r30, r14
    m_irq_pin = PIN_READ(IRQ_P);
    1f4c:	e9 cf       	rjmp	.-46     	; 0x1f20 <_ZN24Adafruit_BluefruitLE_SPI9availableEv+0x1e>
    1f4e:	8c b1       	in	r24, 0x0c	; 12
    1f50:	80 74       	andi	r24, 0x40	; 64
    1f52:	c1 5a       	subi	r28, 0xA1	; 161
    1f54:	df 4f       	sbci	r29, 0xFF	; 255
    return (m_irq_pin);
    1f56:	88 83       	st	Y, r24
    1f58:	08 2e       	mov	r0, r24
    1f5a:	00 0c       	add	r0, r0
    1f5c:	99 0b       	sbc	r25, r25
    1f5e:	e2 cf       	rjmp	.-60     	; 0x1f24 <_ZN24Adafruit_BluefruitLE_SPI9availableEv+0x22>

00001f60 <_ZN24Adafruit_BluefruitLE_SPI4readEv>:
{
    1f60:	cf 92       	push	r12
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	1f 92       	push	r1
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	7c 01       	movw	r14, r24
    inline bool     empty(void)     { return m_count == 0; }
    1f76:	6c 01       	movw	r12, r24
    1f78:	85 eb       	ldi	r24, 0xB5	; 181
    1f7a:	c8 0e       	add	r12, r24
    1f7c:	d1 1c       	adc	r13, r1
    1f7e:	f6 01       	movw	r30, r12
    1f80:	86 81       	ldd	r24, Z+6	; 0x06
    1f82:	97 81       	ldd	r25, Z+7	; 0x07
  if (!m_rx_fifo.empty()) {
    1f84:	89 2b       	or	r24, r25
    1f86:	89 f0       	breq	.+34     	; 0x1faa <_ZN24Adafruit_BluefruitLE_SPI4readEv+0x4a>
    m_rx_fifo.read(&ch);
    1f88:	be 01       	movw	r22, r28
    1f8a:	6f 5f       	subi	r22, 0xFF	; 255
    1f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8e:	c6 01       	movw	r24, r12
    1f90:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN13Adafruit_FIFO4readEPv>
  return m_rx_fifo.read(&ch) ? ((int) ch) : EOF;
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	90 e0       	ldi	r25, 0x00	; 0
}
    1f98:	0f 90       	pop	r0
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	0f 91       	pop	r16
    1fa0:	ff 90       	pop	r15
    1fa2:	ef 90       	pop	r14
    1fa4:	df 90       	pop	r13
    1fa6:	cf 90       	pop	r12
    1fa8:	08 95       	ret
  if ( _mode == BLUEFRUIT_MODE_DATA )
    1faa:	f7 01       	movw	r30, r14
    1fac:	84 85       	ldd	r24, Z+12	; 0x0c
    1fae:	81 11       	cpse	r24, r1
    1fb0:	0b c0       	rjmp	.+22     	; 0x1fc8 <_ZN24Adafruit_BluefruitLE_SPI4readEv+0x68>
    sendPacket(SDEP_CMDTYPE_BLE_UARTRX, NULL, 0, 0);
    1fb2:	00 e0       	ldi	r16, 0x00	; 0
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	62 e0       	ldi	r22, 0x02	; 2
    1fbc:	7a e0       	ldi	r23, 0x0A	; 10
    1fbe:	c7 01       	movw	r24, r14
    if (m_irq_pin) getResponse();
    1fc0:	12 dd       	rcall	.-1500   	; 0x19e6 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh>
    1fc2:	c7 01       	movw	r24, r14
    1fc4:	76 de       	rcall	.-788    	; 0x1cb2 <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv>
    m_irq_pin = PIN_READ(IRQ_P);
    1fc6:	07 c0       	rjmp	.+14     	; 0x1fd6 <_ZN24Adafruit_BluefruitLE_SPI4readEv+0x76>
    1fc8:	8c b1       	in	r24, 0x0c	; 12
    1fca:	80 74       	andi	r24, 0x40	; 64
    1fcc:	e1 5a       	subi	r30, 0xA1	; 161
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    if (m_irq_pin) getResponse();
    1fd0:	80 83       	st	Z, r24
    1fd2:	81 11       	cpse	r24, r1
  return m_rx_fifo.read(&ch) ? ((int) ch) : EOF;
    1fd4:	f6 cf       	rjmp	.-20     	; 0x1fc2 <_ZN24Adafruit_BluefruitLE_SPI4readEv+0x62>
    1fd6:	be 01       	movw	r22, r28
    1fd8:	6f 5f       	subi	r22, 0xFF	; 255
    1fda:	7f 4f       	sbci	r23, 0xFF	; 255
    1fdc:	c6 01       	movw	r24, r12
    1fde:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN13Adafruit_FIFO4readEPv>
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	d7 cf       	rjmp	.-82     	; 0x1f94 <_ZN24Adafruit_BluefruitLE_SPI4readEv+0x34>
    1fe6:	8f ef       	ldi	r24, 0xFF	; 255
    1fe8:	9f ef       	ldi	r25, 0xFF	; 255
    1fea:	d6 cf       	rjmp	.-84     	; 0x1f98 <_ZN24Adafruit_BluefruitLE_SPI4readEv+0x38>

00001fec <_ZN24Adafruit_BluefruitLE_SPI4peekEv>:
{
    1fec:	cf 92       	push	r12
    1fee:	df 92       	push	r13
    1ff0:	ef 92       	push	r14
    1ff2:	ff 92       	push	r15
    1ff4:	0f 93       	push	r16
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	1f 92       	push	r1
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	7c 01       	movw	r14, r24
  if ( m_rx_fifo.peek(&ch) ) {
    2002:	6c 01       	movw	r12, r24
    2004:	85 eb       	ldi	r24, 0xB5	; 181
    2006:	c8 0e       	add	r12, r24
    2008:	d1 1c       	adc	r13, r1
    200a:	be 01       	movw	r22, r28
    200c:	6f 5f       	subi	r22, 0xFF	; 255
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	c6 01       	movw	r24, r12
    2012:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN13Adafruit_FIFO4peekEPv>
    2016:	88 23       	and	r24, r24
    2018:	59 f0       	breq	.+22     	; 0x2030 <_ZN24Adafruit_BluefruitLE_SPI4peekEv+0x44>
  return m_rx_fifo.peek(&ch) ? ch : EOF;
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	90 e0       	ldi	r25, 0x00	; 0
}
    201e:	0f 90       	pop	r0
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	0f 91       	pop	r16
    2026:	ff 90       	pop	r15
    2028:	ef 90       	pop	r14
    202a:	df 90       	pop	r13
    202c:	cf 90       	pop	r12
    202e:	08 95       	ret
  if ( _mode == BLUEFRUIT_MODE_DATA )
    2030:	f7 01       	movw	r30, r14
    2032:	84 85       	ldd	r24, Z+12	; 0x0c
    2034:	81 11       	cpse	r24, r1
    2036:	0b c0       	rjmp	.+22     	; 0x204e <_ZN24Adafruit_BluefruitLE_SPI4peekEv+0x62>
    sendPacket(SDEP_CMDTYPE_BLE_UARTRX, NULL, 0, 0);
    2038:	00 e0       	ldi	r16, 0x00	; 0
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	62 e0       	ldi	r22, 0x02	; 2
    2042:	7a e0       	ldi	r23, 0x0A	; 10
    2044:	c7 01       	movw	r24, r14
    if (m_irq_pin) getResponse();
    2046:	cf dc       	rcall	.-1634   	; 0x19e6 <_ZN24Adafruit_BluefruitLE_SPI10sendPacketEjPKhhh>
    2048:	c7 01       	movw	r24, r14
    204a:	33 de       	rcall	.-922    	; 0x1cb2 <_ZN24Adafruit_BluefruitLE_SPI11getResponseEv>
    m_irq_pin = PIN_READ(IRQ_P);
    204c:	07 c0       	rjmp	.+14     	; 0x205c <_ZN24Adafruit_BluefruitLE_SPI4peekEv+0x70>
    204e:	8c b1       	in	r24, 0x0c	; 12
    2050:	80 74       	andi	r24, 0x40	; 64
    2052:	e1 5a       	subi	r30, 0xA1	; 161
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    if (m_irq_pin) getResponse();
    2056:	80 83       	st	Z, r24
    2058:	81 11       	cpse	r24, r1
  return m_rx_fifo.peek(&ch) ? ch : EOF;
    205a:	f6 cf       	rjmp	.-20     	; 0x2048 <_ZN24Adafruit_BluefruitLE_SPI4peekEv+0x5c>
    205c:	be 01       	movw	r22, r28
    205e:	6f 5f       	subi	r22, 0xFF	; 255
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	c6 01       	movw	r24, r12
    2064:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN13Adafruit_FIFO4peekEPv>
    2068:	81 11       	cpse	r24, r1
    206a:	d7 cf       	rjmp	.-82     	; 0x201a <_ZN24Adafruit_BluefruitLE_SPI4peekEv+0x2e>
    206c:	8f ef       	ldi	r24, 0xFF	; 255
    206e:	9f ef       	ldi	r25, 0xFF	; 255
    2070:	d6 cf       	rjmp	.-84     	; 0x201e <_ZN24Adafruit_BluefruitLE_SPI4peekEv+0x32>

00002072 <ble_New>:
}
void ble_begin(bool v){
    ble->begin(v);
}
bool ble_factoryReset(){
    return ble->factoryReset();
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL3ble>
    207a:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_ZL3ble+0x1>
    207e:	89 2b       	or	r24, r25
    2080:	61 f4       	brne	.+24     	; 0x209a <ble_New+0x28>
    2082:	81 ec       	ldi	r24, 0xC1	; 193
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	4e d0       	rcall	.+156    	; 0x2124 <_Znwj>
    2088:	ec 01       	movw	r28, r24
    208a:	2f ef       	ldi	r18, 0xFF	; 255
    208c:	47 e0       	ldi	r20, 0x07	; 7
    208e:	68 e0       	ldi	r22, 0x08	; 8
    2090:	13 dc       	rcall	.-2010   	; 0x18b8 <_ZN24Adafruit_BluefruitLE_SPIC1Eaaa>
    2092:	d0 93 19 03 	sts	0x0319, r29	; 0x800319 <_ZL3ble+0x1>
    2096:	c0 93 18 03 	sts	0x0318, r28	; 0x800318 <_ZL3ble>
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	08 95       	ret

000020a0 <ble_print>:
    20a0:	bc 01       	movw	r22, r24
    20a2:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL3ble>
    20a6:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_ZL3ble+0x1>
    20aa:	0c 94 43 08 	jmp	0x1086	; 0x1086 <_ZN5Print5printEPKc>

000020ae <ble_println_array>:
    20ae:	f8 cf       	rjmp	.-16     	; 0x20a0 <ble_print>

000020b0 <ble_println_str>:
    20b0:	bc 01       	movw	r22, r24
    20b2:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL3ble>
    20b6:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_ZL3ble+0x1>
    20ba:	06 c8       	rjmp	.-4084   	; 0x10c8 <_ZN5Print7printlnEPKc>

000020bc <ble_waitForOK>:
    20bc:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL3ble>
    20c0:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_ZL3ble+0x1>
    20c4:	26 c9       	rjmp	.-3508   	; 0x1312 <_ZN17Adafruit_ATParser9waitForOKEv>

000020c6 <ble_begin>:
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	68 2f       	mov	r22, r24
    20ca:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL3ble>
    20ce:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_ZL3ble+0x1>
    20d2:	12 cd       	rjmp	.-1500   	; 0x1af8 <_ZN24Adafruit_BluefruitLE_SPI5beginEbb>

000020d4 <ble_echo>:

}
void ble_echo(bool v){
    ble->echo(v);
    20d4:	68 2f       	mov	r22, r24
    20d6:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL3ble>
    20da:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_ZL3ble+0x1>
    20de:	55 cb       	rjmp	.-2390   	; 0x178a <_ZN12Adafruit_BLE4echoEb>

000020e0 <ble_setName>:

    int readBLEUart(uint8_t* buffer, int size);


    // No parameters
    bool sendCommandCheckOK(const __FlashStringHelper *cmd) { return this->atcommand(cmd); }
    20e0:	66 e5       	ldi	r22, 0x56	; 86
    20e2:	75 e0       	ldi	r23, 0x05	; 5
    20e4:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL3ble>
    20e8:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_ZL3ble+0x1>
    20ec:	b3 ca       	rjmp	.-2714   	; 0x1654 <_ZN17Adafruit_ATParser9atcommandEPK19__FlashStringHelper>

000020ee <ble_setHIDEn>:
    20ee:	67 e4       	ldi	r22, 0x47	; 71
    20f0:	75 e0       	ldi	r23, 0x05	; 5
    20f2:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL3ble>
    20f6:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_ZL3ble+0x1>
    20fa:	ac ca       	rjmp	.-2728   	; 0x1654 <_ZN17Adafruit_ATParser9atcommandEPK19__FlashStringHelper>

000020fc <ble_setKeyboardOn>:
    20fc:	63 e3       	ldi	r22, 0x33	; 51
    20fe:	75 e0       	ldi	r23, 0x05	; 5
    2100:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL3ble>
    2104:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_ZL3ble+0x1>
    2108:	a5 ca       	rjmp	.-2742   	; 0x1654 <_ZN17Adafruit_ATParser9atcommandEPK19__FlashStringHelper>

0000210a <ble_isVersionAtLeast>:
}
bool ble_setKeyboardOn() {
  return ble->sendCommandCheckOK(F( "AT+BleKeyboardEn=On"  ));
}
bool ble_isVersionAtLeast(){
  return ble->isVersionAtLeast(MINIMUM_FIRMWARE_VERSION);
    210a:	6d e1       	ldi	r22, 0x1D	; 29
    210c:	72 e0       	ldi	r23, 0x02	; 2
    210e:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL3ble>
    2112:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_ZL3ble+0x1>
    2116:	6a cb       	rjmp	.-2348   	; 0x17ec <_ZN12Adafruit_BLE16isVersionAtLeastEPKc>

00002118 <ble_reset>:
}

void ble_reset(void){
  ble->reset();
    2118:	61 e0       	ldi	r22, 0x01	; 1
    211a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL3ble>
    211e:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_ZL3ble+0x1>
    2122:	e0 ca       	rjmp	.-2624   	; 0x16e4 <_ZN12Adafruit_BLE5resetEb>

00002124 <_Znwj>:
		if (rp->Error == Response_Packet::ErrorCodes::NACK_VERIFY_FAILED) retval = 3;
	}
	delete rp;
	delete packetbytes;
	return retval;
}
    2124:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <malloc>

00002128 <_ZN14Command_Packet16ParameterFromIntEi>:
    2128:	fc 01       	movw	r30, r24
    212a:	61 83       	std	Z+1, r22	; 0x01
    212c:	72 83       	std	Z+2, r23	; 0x02
    212e:	ab 01       	movw	r20, r22
    2130:	77 0f       	add	r23, r23
    2132:	66 0b       	sbc	r22, r22
    2134:	77 0b       	sbc	r23, r23
    2136:	cb 01       	movw	r24, r22
    2138:	bb 27       	eor	r27, r27
    213a:	97 fd       	sbrc	r25, 7
    213c:	b0 95       	com	r27
    213e:	ab 2f       	mov	r26, r27
    2140:	83 83       	std	Z+3, r24	; 0x03
    2142:	74 83       	std	Z+4, r23	; 0x04
    2144:	08 95       	ret

00002146 <_ZN14Command_Packet18_CalculateChecksumEv>:
    2146:	fc 01       	movw	r30, r24
    2148:	81 81       	ldd	r24, Z+1	; 0x01
    214a:	92 81       	ldd	r25, Z+2	; 0x02
    214c:	89 0f       	add	r24, r25
    214e:	99 27       	eor	r25, r25
    2150:	99 1f       	adc	r25, r25
    2152:	93 95       	inc	r25
    2154:	23 81       	ldd	r18, Z+3	; 0x03
    2156:	28 0f       	add	r18, r24
    2158:	39 2f       	mov	r19, r25
    215a:	31 1d       	adc	r19, r1
    215c:	84 81       	ldd	r24, Z+4	; 0x04
    215e:	28 0f       	add	r18, r24
    2160:	31 1d       	adc	r19, r1
    2162:	85 81       	ldd	r24, Z+5	; 0x05
    2164:	82 0f       	add	r24, r18
    2166:	93 2f       	mov	r25, r19
    2168:	91 1d       	adc	r25, r1
    216a:	26 81       	ldd	r18, Z+6	; 0x06
    216c:	82 0f       	add	r24, r18
    216e:	91 1d       	adc	r25, r1
    2170:	08 95       	ret

00002172 <_ZN14Command_Packet14GetPacketBytesEv>:
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	8c 01       	movw	r16, r24
    217e:	8c e0       	ldi	r24, 0x0C	; 12
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    2186:	ec 01       	movw	r28, r24
    2188:	f8 01       	movw	r30, r16
    218a:	f0 80       	ld	r15, Z
    218c:	f5 82       	std	Z+5, r15	; 0x05
    218e:	16 82       	std	Z+6, r1	; 0x06
    2190:	c8 01       	movw	r24, r16
    2192:	d9 df       	rcall	.-78     	; 0x2146 <_ZN14Command_Packet18_CalculateChecksumEv>
    2194:	25 e5       	ldi	r18, 0x55	; 85
    2196:	28 83       	st	Y, r18
    2198:	2a ea       	ldi	r18, 0xAA	; 170
    219a:	29 83       	std	Y+1, r18	; 0x01
    219c:	21 e0       	ldi	r18, 0x01	; 1
    219e:	2a 83       	std	Y+2, r18	; 0x02
    21a0:	1b 82       	std	Y+3, r1	; 0x03
    21a2:	f8 01       	movw	r30, r16
    21a4:	21 81       	ldd	r18, Z+1	; 0x01
    21a6:	2c 83       	std	Y+4, r18	; 0x04
    21a8:	22 81       	ldd	r18, Z+2	; 0x02
    21aa:	2d 83       	std	Y+5, r18	; 0x05
    21ac:	23 81       	ldd	r18, Z+3	; 0x03
    21ae:	2e 83       	std	Y+6, r18	; 0x06
    21b0:	24 81       	ldd	r18, Z+4	; 0x04
    21b2:	2f 83       	std	Y+7, r18	; 0x07
    21b4:	f8 86       	std	Y+8, r15	; 0x08
    21b6:	19 86       	std	Y+9, r1	; 0x09
    21b8:	8a 87       	std	Y+10, r24	; 0x0a
    21ba:	9b 87       	std	Y+11, r25	; 0x0b
    21bc:	ce 01       	movw	r24, r28
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	0f 91       	pop	r16
    21c6:	ff 90       	pop	r15
    21c8:	08 95       	ret

000021ca <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>:
    21ca:	88 23       	and	r24, r24
    21cc:	59 f0       	breq	.+22     	; 0x21e4 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0x1a>
    21ce:	63 31       	cpi	r22, 0x13	; 19
    21d0:	48 f4       	brcc	.+18     	; 0x21e4 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0x1a>
    21d2:	e6 2f       	mov	r30, r22
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	e0 57       	subi	r30, 0x70	; 112
    21dc:	fe 4f       	sbci	r31, 0xFE	; 254
    21de:	80 81       	ld	r24, Z
    21e0:	91 81       	ldd	r25, Z+1	; 0x01
    21e2:	08 95       	ret
    21e4:	8f ef       	ldi	r24, 0xFF	; 255
    21e6:	9f ef       	ldi	r25, 0xFF	; 255
    21e8:	08 95       	ret

000021ea <_ZN15Response_PacketC1EPhb>:
    21ea:	0f 93       	push	r16
    21ec:	1f 93       	push	r17
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	8c 01       	movw	r16, r24
    21f4:	eb 01       	movw	r28, r22
    21f6:	88 85       	ldd	r24, Y+8	; 0x08
    21f8:	80 33       	cpi	r24, 0x30	; 48
    21fa:	11 f5       	brne	.+68     	; 0x2240 <_ZN15Response_PacketC1EPhb+0x56>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	f8 01       	movw	r30, r16
    2200:	84 8b       	std	Z+20, r24	; 0x14
    2202:	6c 81       	ldd	r22, Y+4	; 0x04
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	e1 df       	rcall	.-62     	; 0x21ca <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>
    2208:	f8 01       	movw	r30, r16
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	8c 81       	ldd	r24, Y+4	; 0x04
    2210:	86 87       	std	Z+14, r24	; 0x0e
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
    2214:	87 87       	std	Z+15, r24	; 0x0f
    2216:	8e 81       	ldd	r24, Y+6	; 0x06
    2218:	80 8b       	std	Z+16, r24	; 0x10
    221a:	8f 81       	ldd	r24, Y+7	; 0x07
    221c:	81 8b       	std	Z+17, r24	; 0x11
    221e:	88 85       	ldd	r24, Y+8	; 0x08
    2220:	82 8b       	std	Z+18, r24	; 0x12
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	83 8b       	std	Z+19, r24	; 0x13
    2226:	32 96       	adiw	r30, 0x02	; 2
    2228:	ce 01       	movw	r24, r28
    222a:	0c 96       	adiw	r24, 0x0c	; 12
    222c:	29 91       	ld	r18, Y+
    222e:	21 93       	st	Z+, r18
    2230:	c8 17       	cp	r28, r24
    2232:	d9 07       	cpc	r29, r25
    2234:	d9 f7       	brne	.-10     	; 0x222c <_ZN15Response_PacketC1EPhb+0x42>
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	08 95       	ret
    2240:	f8 01       	movw	r30, r16
    2242:	14 8a       	std	Z+20, r1	; 0x14
    2244:	de cf       	rjmp	.-68     	; 0x2202 <_ZN15Response_PacketC1EPhb+0x18>

00002246 <_ZN15Response_Packet16IntFromParameterEv>:
    2246:	fc 01       	movw	r30, r24
    2248:	27 85       	ldd	r18, Z+15	; 0x0f
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	32 2f       	mov	r19, r18
    224e:	22 27       	eor	r18, r18
    2250:	86 85       	ldd	r24, Z+14	; 0x0e
    2252:	82 0f       	add	r24, r18
    2254:	93 2f       	mov	r25, r19
    2256:	91 1d       	adc	r25, r1
    2258:	08 95       	ret

0000225a <_ZN11FPS_GT511C3C1Ev>:
    225a:	83 e3       	ldi	r24, 0x33	; 51
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    2262:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    2266:	86 e0       	ldi	r24, 0x06	; 6
    2268:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    226c:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    2270:	88 e1       	ldi	r24, 0x18	; 24
    2272:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    2276:	53 9a       	sbi	0x0a, 3	; 10
    2278:	5a 9a       	sbi	0x0b, 2	; 11
    227a:	08 95       	ret

0000227c <_ZN11FPS_GT511C311GetResponseEv>:
    227c:	ef 92       	push	r14
    227e:	ff 92       	push	r15
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	7c 01       	movw	r14, r24
    228a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    228e:	87 ff       	sbrs	r24, 7
    2290:	fc cf       	rjmp	.-8      	; 0x228a <_ZN11FPS_GT511C311GetResponseEv+0xe>
    2292:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    2296:	87 ff       	sbrs	r24, 7
    2298:	f8 cf       	rjmp	.-16     	; 0x228a <_ZN11FPS_GT511C311GetResponseEv+0xe>
    229a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    229e:	85 35       	cpi	r24, 0x55	; 85
    22a0:	a1 f7       	brne	.-24     	; 0x228a <_ZN11FPS_GT511C311GetResponseEv+0xe>
    22a2:	8c e0       	ldi	r24, 0x0C	; 12
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    22aa:	ec 01       	movw	r28, r24
    22ac:	fc 01       	movw	r30, r24
    22ae:	85 e5       	ldi	r24, 0x55	; 85
    22b0:	81 93       	st	Z+, r24
    22b2:	9e 01       	movw	r18, r28
    22b4:	24 5f       	subi	r18, 0xF4	; 244
    22b6:	3f 4f       	sbci	r19, 0xFF	; 255
    22b8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    22bc:	87 fd       	sbrc	r24, 7
    22be:	07 c0       	rjmp	.+14     	; 0x22ce <_ZN11FPS_GT511C311GetResponseEv+0x52>
    22c0:	8f e1       	ldi	r24, 0x1F	; 31
    22c2:	9e e4       	ldi	r25, 0x4E	; 78
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <_ZN11FPS_GT511C311GetResponseEv+0x48>
    22c8:	00 c0       	rjmp	.+0      	; 0x22ca <_ZN11FPS_GT511C311GetResponseEv+0x4e>
    22ca:	00 00       	nop
    22cc:	f5 cf       	rjmp	.-22     	; 0x22b8 <_ZN11FPS_GT511C311GetResponseEv+0x3c>
    22ce:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    22d2:	87 ff       	sbrs	r24, 7
    22d4:	1a c0       	rjmp	.+52     	; 0x230a <_ZN11FPS_GT511C311GetResponseEv+0x8e>
    22d6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    22da:	81 93       	st	Z+, r24
    22dc:	e2 17       	cp	r30, r18
    22de:	f3 07       	cpc	r31, r19
    22e0:	59 f7       	brne	.-42     	; 0x22b8 <_ZN11FPS_GT511C311GetResponseEv+0x3c>
    22e2:	85 e1       	ldi	r24, 0x15	; 21
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    22ea:	8c 01       	movw	r16, r24
    22ec:	f7 01       	movw	r30, r14
    22ee:	40 81       	ld	r20, Z
    22f0:	be 01       	movw	r22, r28
    22f2:	7b df       	rcall	.-266    	; 0x21ea <_ZN15Response_PacketC1EPhb>
    22f4:	ce 01       	movw	r24, r28
    22f6:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    22fa:	c8 01       	movw	r24, r16
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	1f 91       	pop	r17
    2302:	0f 91       	pop	r16
    2304:	ff 90       	pop	r15
    2306:	ef 90       	pop	r14
    2308:	08 95       	ret
    230a:	8f ef       	ldi	r24, 0xFF	; 255
    230c:	9f ef       	ldi	r25, 0xFF	; 255
    230e:	e5 cf       	rjmp	.-54     	; 0x22da <_ZN11FPS_GT511C311GetResponseEv+0x5e>

00002310 <_ZN11FPS_GT511C34OpenEv>:
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	7c 01       	movw	r14, r24
    231e:	87 e0       	ldi	r24, 0x07	; 7
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    2326:	ec 01       	movw	r28, r24
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	88 83       	st	Y, r24
    232c:	19 82       	std	Y+1, r1	; 0x01
    232e:	1a 82       	std	Y+2, r1	; 0x02
    2330:	1b 82       	std	Y+3, r1	; 0x03
    2332:	1c 82       	std	Y+4, r1	; 0x04
    2334:	ce 01       	movw	r24, r28
    2336:	1d df       	rcall	.-454    	; 0x2172 <_ZN14Command_Packet14GetPacketBytesEv>
    2338:	8c 01       	movw	r16, r24
    233a:	ce 01       	movw	r24, r28
    233c:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    2340:	6c e0       	ldi	r22, 0x0C	; 12
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	c8 01       	movw	r24, r16
    2346:	0e 94 3d 1a 	call	0x347a	; 0x347a <Serial_SendData>
    234a:	c7 01       	movw	r24, r14
    234c:	97 df       	rcall	.-210    	; 0x227c <_ZN11FPS_GT511C311GetResponseEv>
    234e:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    2352:	c8 01       	movw	r24, r16
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	0c 94 ef 21 	jmp	0x43de	; 0x43de <free>

00002364 <_ZN11FPS_GT511C36SetLEDEb>:
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	7c 01       	movw	r14, r24
    2372:	16 2f       	mov	r17, r22
    2374:	87 e0       	ldi	r24, 0x07	; 7
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    237c:	ec 01       	movw	r28, r24
    237e:	82 e1       	ldi	r24, 0x12	; 18
    2380:	88 83       	st	Y, r24
    2382:	11 23       	and	r17, r17
    2384:	09 f1       	breq	.+66     	; 0x23c8 <_ZN11FPS_GT511C36SetLEDEb+0x64>
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	1a 82       	std	Y+2, r1	; 0x02
    238c:	1b 82       	std	Y+3, r1	; 0x03
    238e:	1c 82       	std	Y+4, r1	; 0x04
    2390:	ce 01       	movw	r24, r28
    2392:	ef de       	rcall	.-546    	; 0x2172 <_ZN14Command_Packet14GetPacketBytesEv>
    2394:	8c 01       	movw	r16, r24
    2396:	ce 01       	movw	r24, r28
    2398:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    239c:	6c e0       	ldi	r22, 0x0C	; 12
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	c8 01       	movw	r24, r16
    23a2:	0e 94 3d 1a 	call	0x347a	; 0x347a <Serial_SendData>
    23a6:	c7 01       	movw	r24, r14
    23a8:	69 df       	rcall	.-302    	; 0x227c <_ZN11FPS_GT511C311GetResponseEv>
    23aa:	fc 01       	movw	r30, r24
    23ac:	c4 89       	ldd	r28, Z+20	; 0x14
    23ae:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    23b2:	c8 01       	movw	r24, r16
    23b4:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    23b8:	8c 2f       	mov	r24, r28
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	ff 90       	pop	r15
    23c4:	ef 90       	pop	r14
    23c6:	08 95       	ret
    23c8:	19 82       	std	Y+1, r1	; 0x01
    23ca:	df cf       	rjmp	.-66     	; 0x238a <_ZN11FPS_GT511C36SetLEDEb+0x26>

000023cc <_ZN11FPS_GT511C313CheckEnrolledEi>:
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	7c 01       	movw	r14, r24
    23da:	8b 01       	movw	r16, r22
    23dc:	87 e0       	ldi	r24, 0x07	; 7
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    23e4:	ec 01       	movw	r28, r24
    23e6:	81 e2       	ldi	r24, 0x21	; 33
    23e8:	88 83       	st	Y, r24
    23ea:	b8 01       	movw	r22, r16
    23ec:	ce 01       	movw	r24, r28
    23ee:	9c de       	rcall	.-712    	; 0x2128 <_ZN14Command_Packet16ParameterFromIntEi>
    23f0:	ce 01       	movw	r24, r28
    23f2:	bf de       	rcall	.-642    	; 0x2172 <_ZN14Command_Packet14GetPacketBytesEv>
    23f4:	8c 01       	movw	r16, r24
    23f6:	ce 01       	movw	r24, r28
    23f8:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    23fc:	6c e0       	ldi	r22, 0x0C	; 12
    23fe:	70 e0       	ldi	r23, 0x00	; 0
    2400:	c8 01       	movw	r24, r16
    2402:	0e 94 3d 1a 	call	0x347a	; 0x347a <Serial_SendData>
    2406:	c8 01       	movw	r24, r16
    2408:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    240c:	c7 01       	movw	r24, r14
    240e:	36 df       	rcall	.-404    	; 0x227c <_ZN11FPS_GT511C311GetResponseEv>
    2410:	fc 01       	movw	r30, r24
    2412:	c4 89       	ldd	r28, Z+20	; 0x14
    2414:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    2418:	8c 2f       	mov	r24, r28
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	08 95       	ret

00002428 <_ZN11FPS_GT511C311EnrollStartEi>:
    2428:	ef 92       	push	r14
    242a:	ff 92       	push	r15
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	7c 01       	movw	r14, r24
    2436:	8b 01       	movw	r16, r22
    2438:	87 e0       	ldi	r24, 0x07	; 7
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    2440:	ec 01       	movw	r28, r24
    2442:	82 e2       	ldi	r24, 0x22	; 34
    2444:	88 83       	st	Y, r24
    2446:	b8 01       	movw	r22, r16
    2448:	ce 01       	movw	r24, r28
    244a:	6e de       	rcall	.-804    	; 0x2128 <_ZN14Command_Packet16ParameterFromIntEi>
    244c:	ce 01       	movw	r24, r28
    244e:	91 de       	rcall	.-734    	; 0x2172 <_ZN14Command_Packet14GetPacketBytesEv>
    2450:	8c 01       	movw	r16, r24
    2452:	ce 01       	movw	r24, r28
    2454:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    2458:	6c e0       	ldi	r22, 0x0C	; 12
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	c8 01       	movw	r24, r16
    245e:	0e 94 3d 1a 	call	0x347a	; 0x347a <Serial_SendData>
    2462:	c8 01       	movw	r24, r16
    2464:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    2468:	c7 01       	movw	r24, r14
    246a:	08 df       	rcall	.-496    	; 0x227c <_ZN11FPS_GT511C311GetResponseEv>
    246c:	fc 01       	movw	r30, r24
    246e:	24 89       	ldd	r18, Z+20	; 0x14
    2470:	21 11       	cpse	r18, r1
    2472:	13 c0       	rjmp	.+38     	; 0x249a <_ZN11FPS_GT511C311EnrollStartEi+0x72>
    2474:	20 81       	ld	r18, Z
    2476:	31 81       	ldd	r19, Z+1	; 0x01
    2478:	c1 e0       	ldi	r28, 0x01	; 1
    247a:	d0 e0       	ldi	r29, 0x00	; 0
    247c:	29 30       	cpi	r18, 0x09	; 9
    247e:	f0 e1       	ldi	r31, 0x10	; 16
    2480:	3f 07       	cpc	r19, r31
    2482:	69 f0       	breq	.+26     	; 0x249e <_ZN11FPS_GT511C311EnrollStartEi+0x76>
    2484:	c2 e0       	ldi	r28, 0x02	; 2
    2486:	d0 e0       	ldi	r29, 0x00	; 0
    2488:	23 30       	cpi	r18, 0x03	; 3
    248a:	40 e1       	ldi	r20, 0x10	; 16
    248c:	34 07       	cpc	r19, r20
    248e:	39 f0       	breq	.+14     	; 0x249e <_ZN11FPS_GT511C311EnrollStartEi+0x76>
    2490:	c3 e0       	ldi	r28, 0x03	; 3
    2492:	d0 e0       	ldi	r29, 0x00	; 0
    2494:	25 30       	cpi	r18, 0x05	; 5
    2496:	30 41       	sbci	r19, 0x10	; 16
    2498:	11 f0       	breq	.+4      	; 0x249e <_ZN11FPS_GT511C311EnrollStartEi+0x76>
    249a:	d0 e0       	ldi	r29, 0x00	; 0
    249c:	c0 e0       	ldi	r28, 0x00	; 0
    249e:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    24a2:	ce 01       	movw	r24, r28
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	1f 91       	pop	r17
    24aa:	0f 91       	pop	r16
    24ac:	ff 90       	pop	r15
    24ae:	ef 90       	pop	r14
    24b0:	08 95       	ret

000024b2 <_ZN11FPS_GT511C37Enroll1Ev>:
    24b2:	ef 92       	push	r14
    24b4:	ff 92       	push	r15
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	7c 01       	movw	r14, r24
    24c0:	87 e0       	ldi	r24, 0x07	; 7
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    24c8:	ec 01       	movw	r28, r24
    24ca:	83 e2       	ldi	r24, 0x23	; 35
    24cc:	88 83       	st	Y, r24
    24ce:	ce 01       	movw	r24, r28
    24d0:	50 de       	rcall	.-864    	; 0x2172 <_ZN14Command_Packet14GetPacketBytesEv>
    24d2:	8c 01       	movw	r16, r24
    24d4:	ce 01       	movw	r24, r28
    24d6:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    24da:	6c e0       	ldi	r22, 0x0C	; 12
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	c8 01       	movw	r24, r16
    24e0:	cc d7       	rcall	.+3992   	; 0x347a <Serial_SendData>
    24e2:	c8 01       	movw	r24, r16
    24e4:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    24e8:	c7 01       	movw	r24, r14
    24ea:	c8 de       	rcall	.-624    	; 0x227c <_ZN11FPS_GT511C311GetResponseEv>
    24ec:	8c 01       	movw	r16, r24
    24ee:	ab de       	rcall	.-682    	; 0x2246 <_ZN15Response_Packet16IntFromParameterEv>
    24f0:	d0 e0       	ldi	r29, 0x00	; 0
    24f2:	c0 e0       	ldi	r28, 0x00	; 0
    24f4:	88 3c       	cpi	r24, 0xC8	; 200
    24f6:	91 05       	cpc	r25, r1
    24f8:	14 f4       	brge	.+4      	; 0x24fe <_ZN11FPS_GT511C37Enroll1Ev+0x4c>
    24fa:	c3 e0       	ldi	r28, 0x03	; 3
    24fc:	d0 e0       	ldi	r29, 0x00	; 0
    24fe:	f8 01       	movw	r30, r16
    2500:	84 89       	ldd	r24, Z+20	; 0x14
    2502:	81 11       	cpse	r24, r1
    2504:	0b c0       	rjmp	.+22     	; 0x251c <_ZN11FPS_GT511C37Enroll1Ev+0x6a>
    2506:	80 81       	ld	r24, Z
    2508:	91 81       	ldd	r25, Z+1	; 0x01
    250a:	8d 30       	cpi	r24, 0x0D	; 13
    250c:	f0 e1       	ldi	r31, 0x10	; 16
    250e:	9f 07       	cpc	r25, r31
    2510:	b1 f0       	breq	.+44     	; 0x253e <_ZN11FPS_GT511C37Enroll1Ev+0x8c>
    2512:	8c 30       	cpi	r24, 0x0C	; 12
    2514:	90 41       	sbci	r25, 0x10	; 16
    2516:	11 f4       	brne	.+4      	; 0x251c <_ZN11FPS_GT511C37Enroll1Ev+0x6a>
    2518:	c2 e0       	ldi	r28, 0x02	; 2
    251a:	d0 e0       	ldi	r29, 0x00	; 0
    251c:	c8 01       	movw	r24, r16
    251e:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    2522:	f8 01       	movw	r30, r16
    2524:	84 89       	ldd	r24, Z+20	; 0x14
    2526:	88 23       	and	r24, r24
    2528:	11 f0       	breq	.+4      	; 0x252e <_ZN11FPS_GT511C37Enroll1Ev+0x7c>
    252a:	d0 e0       	ldi	r29, 0x00	; 0
    252c:	c0 e0       	ldi	r28, 0x00	; 0
    252e:	ce 01       	movw	r24, r28
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	1f 91       	pop	r17
    2536:	0f 91       	pop	r16
    2538:	ff 90       	pop	r15
    253a:	ef 90       	pop	r14
    253c:	08 95       	ret
    253e:	c1 e0       	ldi	r28, 0x01	; 1
    2540:	d0 e0       	ldi	r29, 0x00	; 0
    2542:	ec cf       	rjmp	.-40     	; 0x251c <_ZN11FPS_GT511C37Enroll1Ev+0x6a>

00002544 <_ZN11FPS_GT511C37Enroll2Ev>:
    2544:	ef 92       	push	r14
    2546:	ff 92       	push	r15
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	7c 01       	movw	r14, r24
    2552:	87 e0       	ldi	r24, 0x07	; 7
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    255a:	ec 01       	movw	r28, r24
    255c:	84 e2       	ldi	r24, 0x24	; 36
    255e:	88 83       	st	Y, r24
    2560:	ce 01       	movw	r24, r28
    2562:	07 de       	rcall	.-1010   	; 0x2172 <_ZN14Command_Packet14GetPacketBytesEv>
    2564:	8c 01       	movw	r16, r24
    2566:	ce 01       	movw	r24, r28
    2568:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    256c:	6c e0       	ldi	r22, 0x0C	; 12
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	c8 01       	movw	r24, r16
    2572:	83 d7       	rcall	.+3846   	; 0x347a <Serial_SendData>
    2574:	c8 01       	movw	r24, r16
    2576:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    257a:	c7 01       	movw	r24, r14
    257c:	7f de       	rcall	.-770    	; 0x227c <_ZN11FPS_GT511C311GetResponseEv>
    257e:	8c 01       	movw	r16, r24
    2580:	62 de       	rcall	.-828    	; 0x2246 <_ZN15Response_Packet16IntFromParameterEv>
    2582:	d0 e0       	ldi	r29, 0x00	; 0
    2584:	c0 e0       	ldi	r28, 0x00	; 0
    2586:	88 3c       	cpi	r24, 0xC8	; 200
    2588:	91 05       	cpc	r25, r1
    258a:	14 f4       	brge	.+4      	; 0x2590 <_ZN11FPS_GT511C37Enroll2Ev+0x4c>
    258c:	c3 e0       	ldi	r28, 0x03	; 3
    258e:	d0 e0       	ldi	r29, 0x00	; 0
    2590:	f8 01       	movw	r30, r16
    2592:	84 89       	ldd	r24, Z+20	; 0x14
    2594:	81 11       	cpse	r24, r1
    2596:	0b c0       	rjmp	.+22     	; 0x25ae <_ZN11FPS_GT511C37Enroll2Ev+0x6a>
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	8d 30       	cpi	r24, 0x0D	; 13
    259e:	f0 e1       	ldi	r31, 0x10	; 16
    25a0:	9f 07       	cpc	r25, r31
    25a2:	b1 f0       	breq	.+44     	; 0x25d0 <_ZN11FPS_GT511C37Enroll2Ev+0x8c>
    25a4:	8c 30       	cpi	r24, 0x0C	; 12
    25a6:	90 41       	sbci	r25, 0x10	; 16
    25a8:	11 f4       	brne	.+4      	; 0x25ae <_ZN11FPS_GT511C37Enroll2Ev+0x6a>
    25aa:	c2 e0       	ldi	r28, 0x02	; 2
    25ac:	d0 e0       	ldi	r29, 0x00	; 0
    25ae:	c8 01       	movw	r24, r16
    25b0:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    25b4:	f8 01       	movw	r30, r16
    25b6:	84 89       	ldd	r24, Z+20	; 0x14
    25b8:	88 23       	and	r24, r24
    25ba:	11 f0       	breq	.+4      	; 0x25c0 <_ZN11FPS_GT511C37Enroll2Ev+0x7c>
    25bc:	d0 e0       	ldi	r29, 0x00	; 0
    25be:	c0 e0       	ldi	r28, 0x00	; 0
    25c0:	ce 01       	movw	r24, r28
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	1f 91       	pop	r17
    25c8:	0f 91       	pop	r16
    25ca:	ff 90       	pop	r15
    25cc:	ef 90       	pop	r14
    25ce:	08 95       	ret
    25d0:	c1 e0       	ldi	r28, 0x01	; 1
    25d2:	d0 e0       	ldi	r29, 0x00	; 0
    25d4:	ec cf       	rjmp	.-40     	; 0x25ae <_ZN11FPS_GT511C37Enroll2Ev+0x6a>

000025d6 <_ZN11FPS_GT511C37Enroll3Ev>:
    25d6:	ef 92       	push	r14
    25d8:	ff 92       	push	r15
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	7c 01       	movw	r14, r24
    25e4:	87 e0       	ldi	r24, 0x07	; 7
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    25ec:	ec 01       	movw	r28, r24
    25ee:	85 e2       	ldi	r24, 0x25	; 37
    25f0:	88 83       	st	Y, r24
    25f2:	ce 01       	movw	r24, r28
    25f4:	be dd       	rcall	.-1156   	; 0x2172 <_ZN14Command_Packet14GetPacketBytesEv>
    25f6:	8c 01       	movw	r16, r24
    25f8:	ce 01       	movw	r24, r28
    25fa:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    25fe:	6c e0       	ldi	r22, 0x0C	; 12
    2600:	70 e0       	ldi	r23, 0x00	; 0
    2602:	c8 01       	movw	r24, r16
    2604:	3a d7       	rcall	.+3700   	; 0x347a <Serial_SendData>
    2606:	c8 01       	movw	r24, r16
    2608:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    260c:	c7 01       	movw	r24, r14
    260e:	36 de       	rcall	.-916    	; 0x227c <_ZN11FPS_GT511C311GetResponseEv>
    2610:	8c 01       	movw	r16, r24
    2612:	19 de       	rcall	.-974    	; 0x2246 <_ZN15Response_Packet16IntFromParameterEv>
    2614:	d0 e0       	ldi	r29, 0x00	; 0
    2616:	c0 e0       	ldi	r28, 0x00	; 0
    2618:	88 3c       	cpi	r24, 0xC8	; 200
    261a:	91 05       	cpc	r25, r1
    261c:	14 f4       	brge	.+4      	; 0x2622 <_ZN11FPS_GT511C37Enroll3Ev+0x4c>
    261e:	c3 e0       	ldi	r28, 0x03	; 3
    2620:	d0 e0       	ldi	r29, 0x00	; 0
    2622:	f8 01       	movw	r30, r16
    2624:	84 89       	ldd	r24, Z+20	; 0x14
    2626:	81 11       	cpse	r24, r1
    2628:	0b c0       	rjmp	.+22     	; 0x2640 <_ZN11FPS_GT511C37Enroll3Ev+0x6a>
    262a:	80 81       	ld	r24, Z
    262c:	91 81       	ldd	r25, Z+1	; 0x01
    262e:	8d 30       	cpi	r24, 0x0D	; 13
    2630:	f0 e1       	ldi	r31, 0x10	; 16
    2632:	9f 07       	cpc	r25, r31
    2634:	b1 f0       	breq	.+44     	; 0x2662 <_ZN11FPS_GT511C37Enroll3Ev+0x8c>
    2636:	8c 30       	cpi	r24, 0x0C	; 12
    2638:	90 41       	sbci	r25, 0x10	; 16
    263a:	11 f4       	brne	.+4      	; 0x2640 <_ZN11FPS_GT511C37Enroll3Ev+0x6a>
    263c:	c2 e0       	ldi	r28, 0x02	; 2
    263e:	d0 e0       	ldi	r29, 0x00	; 0
    2640:	c8 01       	movw	r24, r16
    2642:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    2646:	f8 01       	movw	r30, r16
    2648:	84 89       	ldd	r24, Z+20	; 0x14
    264a:	88 23       	and	r24, r24
    264c:	11 f0       	breq	.+4      	; 0x2652 <_ZN11FPS_GT511C37Enroll3Ev+0x7c>
    264e:	d0 e0       	ldi	r29, 0x00	; 0
    2650:	c0 e0       	ldi	r28, 0x00	; 0
    2652:	ce 01       	movw	r24, r28
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	1f 91       	pop	r17
    265a:	0f 91       	pop	r16
    265c:	ff 90       	pop	r15
    265e:	ef 90       	pop	r14
    2660:	08 95       	ret
    2662:	c1 e0       	ldi	r28, 0x01	; 1
    2664:	d0 e0       	ldi	r29, 0x00	; 0
    2666:	ec cf       	rjmp	.-40     	; 0x2640 <_ZN11FPS_GT511C37Enroll3Ev+0x6a>

00002668 <_ZN11FPS_GT511C313IsPressFingerEv>:
    2668:	ef 92       	push	r14
    266a:	ff 92       	push	r15
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	7c 01       	movw	r14, r24
    2676:	87 e0       	ldi	r24, 0x07	; 7
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    267e:	8c 01       	movw	r16, r24
    2680:	86 e2       	ldi	r24, 0x26	; 38
    2682:	f8 01       	movw	r30, r16
    2684:	80 83       	st	Z, r24
    2686:	c8 01       	movw	r24, r16
    2688:	74 dd       	rcall	.-1304   	; 0x2172 <_ZN14Command_Packet14GetPacketBytesEv>
    268a:	ec 01       	movw	r28, r24
    268c:	c8 01       	movw	r24, r16
    268e:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    2692:	6c e0       	ldi	r22, 0x0C	; 12
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	ce 01       	movw	r24, r28
    2698:	f0 d6       	rcall	.+3552   	; 0x347a <Serial_SendData>
    269a:	c7 01       	movw	r24, r14
    269c:	ef dd       	rcall	.-1058   	; 0x227c <_ZN11FPS_GT511C311GetResponseEv>
    269e:	fc 01       	movw	r30, r24
    26a0:	46 85       	ldd	r20, Z+14	; 0x0e
    26a2:	27 85       	ldd	r18, Z+15	; 0x0f
    26a4:	42 0f       	add	r20, r18
    26a6:	55 27       	eor	r21, r21
    26a8:	55 1f       	adc	r21, r21
    26aa:	20 89       	ldd	r18, Z+16	; 0x10
    26ac:	42 0f       	add	r20, r18
    26ae:	51 1d       	adc	r21, r1
    26b0:	21 89       	ldd	r18, Z+17	; 0x11
    26b2:	24 0f       	add	r18, r20
    26b4:	35 2f       	mov	r19, r21
    26b6:	31 1d       	adc	r19, r1
    26b8:	11 e0       	ldi	r17, 0x01	; 1
    26ba:	23 2b       	or	r18, r19
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <_ZN11FPS_GT511C313IsPressFingerEv+0x58>
    26be:	10 e0       	ldi	r17, 0x00	; 0
    26c0:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    26c4:	ce 01       	movw	r24, r28
    26c6:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    26ca:	81 2f       	mov	r24, r17
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	0f 91       	pop	r16
    26d4:	ff 90       	pop	r15
    26d6:	ef 90       	pop	r14
    26d8:	08 95       	ret

000026da <_ZN11FPS_GT511C39DeleteAllEv>:
    26da:	ef 92       	push	r14
    26dc:	ff 92       	push	r15
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	7c 01       	movw	r14, r24
    26e8:	87 e0       	ldi	r24, 0x07	; 7
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    26f0:	ec 01       	movw	r28, r24
    26f2:	81 e4       	ldi	r24, 0x41	; 65
    26f4:	88 83       	st	Y, r24
    26f6:	ce 01       	movw	r24, r28
    26f8:	3c dd       	rcall	.-1416   	; 0x2172 <_ZN14Command_Packet14GetPacketBytesEv>
    26fa:	8c 01       	movw	r16, r24
    26fc:	6c e0       	ldi	r22, 0x0C	; 12
    26fe:	70 e0       	ldi	r23, 0x00	; 0
    2700:	bc d6       	rcall	.+3448   	; 0x347a <Serial_SendData>
    2702:	c7 01       	movw	r24, r14
    2704:	bb dd       	rcall	.-1162   	; 0x227c <_ZN11FPS_GT511C311GetResponseEv>
    2706:	fc 01       	movw	r30, r24
    2708:	f4 88       	ldd	r15, Z+20	; 0x14
    270a:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    270e:	c8 01       	movw	r24, r16
    2710:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    2714:	ce 01       	movw	r24, r28
    2716:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    271a:	8f 2d       	mov	r24, r15
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	ff 90       	pop	r15
    2726:	ef 90       	pop	r14
    2728:	08 95       	ret

0000272a <_ZN11FPS_GT511C311Identify1_NEv>:
// Checks the currently pressed finger against all enrolled fingerprints
// Returns:
//	0-199: Verified against the specified ID (found, and here is the ID number)
//	200: Failed to find the fingerprint in the database
int FPS_GT511C3::Identify1_N()
{
    272a:	ef 92       	push	r14
    272c:	ff 92       	push	r15
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	7c 01       	movw	r14, r24
#include <stdlib.h>


void * operator new(size_t size)
{
  return malloc(size);
    2738:	87 e0       	ldi	r24, 0x07	; 7
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    2740:	ec 01       	movw	r28, r24
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Identify1_N;
    2742:	81 e5       	ldi	r24, 0x51	; 81
    2744:	88 83       	st	Y, r24
	uint8_t* packetbytes = cp->GetPacketBytes();
    2746:	ce 01       	movw	r24, r28
    2748:	14 dd       	rcall	.-1496   	; 0x2172 <_ZN14Command_Packet14GetPacketBytesEv>
    274a:	8c 01       	movw	r16, r24
}

void operator delete(void * ptr)
{
  free(ptr);
    274c:	ce 01       	movw	r24, r28
    274e:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
#pragma region -= Private Methods =-
#endif  //__GNUC__
// Sends the command to the software serial channel
void FPS_GT511C3::SendCommand(uint8_t cmd[], int length)
{
	Serial_SendData(cmd, length);
    2752:	6c e0       	ldi	r22, 0x0C	; 12
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	c8 01       	movw	r24, r16
	Response_Packet* rp = GetResponse();
    2758:	90 d6       	rcall	.+3360   	; 0x347a <Serial_SendData>
    275a:	c7 01       	movw	r24, r14
    275c:	8f dd       	rcall	.-1250   	; 0x227c <_ZN11FPS_GT511C311GetResponseEv>
	int retval = rp->IntFromParameter();
    275e:	ec 01       	movw	r28, r24
    2760:	72 dd       	rcall	.-1308   	; 0x2246 <_ZN15Response_Packet16IntFromParameterEv>
    2762:	7c 01       	movw	r14, r24
    2764:	ce 01       	movw	r24, r28
    2766:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    276a:	c8 01       	movw	r24, r16
    276c:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
	return retval;
    2770:	c7 01       	movw	r24, r14
    2772:	89 3c       	cpi	r24, 0xC9	; 201
    2774:	91 05       	cpc	r25, r1
    2776:	14 f0       	brlt	.+4      	; 0x277c <_ZN11FPS_GT511C311Identify1_NEv+0x52>
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
}
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	1f 91       	pop	r17
    2782:	0f 91       	pop	r16
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	08 95       	ret

0000278a <_ZN11FPS_GT511C313CaptureFingerEb>:
{
    278a:	ef 92       	push	r14
    278c:	ff 92       	push	r15
    278e:	0f 93       	push	r16
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	7c 01       	movw	r14, r24
    2798:	16 2f       	mov	r17, r22
  return malloc(size);
    279a:	87 e0       	ldi	r24, 0x07	; 7
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 53 21 	call	0x42a6	; 0x42a6 <malloc>
    27a2:	ec 01       	movw	r28, r24
	cp->Command = Command_Packet::Commands::CaptureFinger;
    27a4:	80 e6       	ldi	r24, 0x60	; 96
    27a6:	88 83       	st	Y, r24
		cp->ParameterFromInt(1);
    27a8:	61 e0       	ldi	r22, 0x01	; 1
    27aa:	70 e0       	ldi	r23, 0x00	; 0
	if (highquality)
    27ac:	11 11       	cpse	r17, r1
    27ae:	02 c0       	rjmp	.+4      	; 0x27b4 <_ZN11FPS_GT511C313CaptureFingerEb+0x2a>
		cp->ParameterFromInt(0);
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	ce 01       	movw	r24, r28
	uint8_t* packetbytes = cp->GetPacketBytes();
    27b6:	b8 dc       	rcall	.-1680   	; 0x2128 <_ZN14Command_Packet16ParameterFromIntEi>
    27b8:	ce 01       	movw	r24, r28
    27ba:	db dc       	rcall	.-1610   	; 0x2172 <_ZN14Command_Packet14GetPacketBytesEv>
  free(ptr);
    27bc:	8c 01       	movw	r16, r24
    27be:	ce 01       	movw	r24, r28
    27c0:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
	Serial_SendData(cmd, length);
    27c4:	6c e0       	ldi	r22, 0x0C	; 12
    27c6:	70 e0       	ldi	r23, 0x00	; 0
	Response_Packet* rp = GetResponse();
    27c8:	c8 01       	movw	r24, r16
    27ca:	57 d6       	rcall	.+3246   	; 0x347a <Serial_SendData>
    27cc:	c7 01       	movw	r24, r14
	bool retval = rp->ACK;
    27ce:	56 dd       	rcall	.-1364   	; 0x227c <_ZN11FPS_GT511C311GetResponseEv>
    27d0:	fc 01       	movw	r30, r24
    27d2:	c4 89       	ldd	r28, Z+20	; 0x14
    27d4:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
    27d8:	c8 01       	movw	r24, r16
    27da:	0e 94 ef 21 	call	0x43de	; 0x43de <free>
}
    27de:	8c 2f       	mov	r24, r28
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	ff 90       	pop	r15
    27ea:	ef 90       	pop	r14
    27ec:	08 95       	ret

000027ee <u8x8_hw_i2c>:
  
  state_down_prev = state_down_temp;
  
  return button_case;
  */
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	08 95       	ret

000027f2 <u8x8_no_CB>:
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	08 95       	ret

000027f6 <setupScreen>:
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}

void setupScreen() {
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
  u8x8_Setup(&u8x8, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_i2c, u8x8_hw_i2c, u8x8_no_CB);
    27fa:	09 ef       	ldi	r16, 0xF9	; 249
    27fc:	13 e1       	ldi	r17, 0x13	; 19
    27fe:	27 ef       	ldi	r18, 0xF7	; 247
    2800:	33 e1       	ldi	r19, 0x13	; 19
    2802:	44 e4       	ldi	r20, 0x44	; 68
    2804:	55 e0       	ldi	r21, 0x05	; 5
    2806:	68 e8       	ldi	r22, 0x88	; 136
    2808:	75 e0       	ldi	r23, 0x05	; 5
    280a:	81 ec       	ldi	r24, 0xC1	; 193
    280c:	93 e0       	ldi	r25, 0x03	; 3
    280e:	0e 94 15 06 	call	0xc2a	; 0xc2a <u8x8_Setup>
  u8x8_InitDisplay(&u8x8);
    2812:	81 ec       	ldi	r24, 0xC1	; 193
    2814:	93 e0       	ldi	r25, 0x03	; 3
    2816:	0e 94 1e 04 	call	0x83c	; 0x83c <u8x8_InitDisplay>
  u8x8_SetPowerSave(&u8x8, 0);
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	81 ec       	ldi	r24, 0xC1	; 193
    281e:	93 e0       	ldi	r25, 0x03	; 3
    2820:	0e 94 27 04 	call	0x84e	; 0x84e <u8x8_SetPowerSave>
  u8x8_SetFont(&u8x8,u8x8_font_chroma48medium8_r);
    2824:	68 e3       	ldi	r22, 0x38	; 56
    2826:	71 e0       	ldi	r23, 0x01	; 1
    2828:	81 ec       	ldi	r24, 0xC1	; 193
    282a:	93 e0       	ldi	r25, 0x03	; 3
    282c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8x8_SetFont>
  u8x8_DrawString(&u8x8, 0, 0, "Yek");
    2830:	23 e2       	ldi	r18, 0x23	; 35
    2832:	32 e0       	ldi	r19, 0x02	; 2
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	81 ec       	ldi	r24, 0xC1	; 193
    283a:	93 e0       	ldi	r25, 0x03	; 3
    283c:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
  u8x8_DrawString(&u8x8, 0, 1, "18500");
    2840:	27 e2       	ldi	r18, 0x27	; 39
    2842:	32 e0       	ldi	r19, 0x02	; 2
    2844:	41 e0       	ldi	r20, 0x01	; 1
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	81 ec       	ldi	r24, 0xC1	; 193
    284a:	93 e0       	ldi	r25, 0x03	; 3
    284c:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
  u8x8_DrawString(&u8x8, 0, 2, "Fatema, Matt,");
    2850:	2d e2       	ldi	r18, 0x2D	; 45
    2852:	32 e0       	ldi	r19, 0x02	; 2
    2854:	42 e0       	ldi	r20, 0x02	; 2
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	81 ec       	ldi	r24, 0xC1	; 193
    285a:	93 e0       	ldi	r25, 0x03	; 3
    285c:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
  u8x8_DrawString(&u8x8, 0, 3, "and Tyler");
    2860:	2b e3       	ldi	r18, 0x3B	; 59
    2862:	32 e0       	ldi	r19, 0x02	; 2
    2864:	43 e0       	ldi	r20, 0x03	; 3
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	81 ec       	ldi	r24, 0xC1	; 193
    286a:	93 e0       	ldi	r25, 0x03	; 3
}
    286c:	1f 91       	pop	r17
    286e:	0f 91       	pop	r16
  u8x8_DrawString(&u8x8, 0, 3, "and Tyler");
    2870:	0c 94 b1 03 	jmp	0x762	; 0x762 <u8x8_DrawString>

00002874 <setupBLE>:
void setupBLE() {
    2874:	fe db       	rcall	.-2052   	; 0x2072 <ble_New>
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	26 dc       	rcall	.-1972   	; 0x20c6 <ble_begin>
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	2b dc       	rcall	.-1962   	; 0x20d4 <ble_echo>
    287e:	30 dc       	rcall	.-1952   	; 0x20e0 <ble_setName>
    2880:	44 dc       	rcall	.-1912   	; 0x210a <ble_isVersionAtLeast>
    2882:	88 23       	and	r24, r24
    2884:	11 f0       	breq	.+4      	; 0x288a <setupBLE+0x16>
    2886:	33 dc       	rcall	.-1946   	; 0x20ee <ble_setHIDEn>
    2888:	47 cc       	rjmp	.-1906   	; 0x2118 <ble_reset>
    288a:	38 dc       	rcall	.-1936   	; 0x20fc <ble_setKeyboardOn>
    288c:	fd cf       	rjmp	.-6      	; 0x2888 <setupBLE+0x14>

0000288e <SetupHardware>:
    288e:	84 b7       	in	r24, 0x34	; 52
    2890:	87 7f       	andi	r24, 0xF7	; 247
    2892:	84 bf       	out	0x34, r24	; 52
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	a8 95       	wdr
    289a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    289e:	88 61       	ori	r24, 0x18	; 24
    28a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    28a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	80 e8       	ldi	r24, 0x80	; 128
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    28b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	0e 94 36 06 	call	0xc6c	; 0xc6c <millis_init>
    28c0:	8a b1       	in	r24, 0x0a	; 10
    28c2:	8f 71       	andi	r24, 0x1F	; 31
    28c4:	8a b9       	out	0x0a, r24	; 10
    28c6:	8b b1       	in	r24, 0x0b	; 11
    28c8:	80 6e       	ori	r24, 0xE0	; 224
    28ca:	8b b9       	out	0x0b, r24	; 11
    28cc:	94 df       	rcall	.-216    	; 0x27f6 <setupScreen>
    28ce:	0e 94 70 06 	call	0xce0	; 0xce0 <fram_begin>
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	0e 94 98 06 	call	0xd30	; 0xd30 <fram_read8>
    28da:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <total_accounts>
    28de:	0e 94 c2 06 	call	0xd84	; 0xd84 <fps_New>
    28e2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fps_Open>
    28e6:	c6 df       	rcall	.-116    	; 0x2874 <setupBLE>
    28e8:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <USB_Init>

000028ec <populateArrays>:
    28ec:	90 e8       	ldi	r25, 0x80	; 128
    28ee:	e9 e3       	ldi	r30, 0x39	; 57
    28f0:	f3 e0       	ldi	r31, 0x03	; 3
    28f2:	df 01       	movw	r26, r30
    28f4:	29 2f       	mov	r18, r25
    28f6:	1d 92       	st	X+, r1
    28f8:	2a 95       	dec	r18
    28fa:	e9 f7       	brne	.-6      	; 0x28f6 <populateArrays+0xa>
    28fc:	ee ed       	ldi	r30, 0xDE	; 222
    28fe:	f3 e0       	ldi	r31, 0x03	; 3
    2900:	df 01       	movw	r26, r30
    2902:	29 2f       	mov	r18, r25
    2904:	1d 92       	st	X+, r1
    2906:	2a 95       	dec	r18
    2908:	e9 f7       	brne	.-6      	; 0x2904 <populateArrays+0x18>
    290a:	ee e5       	ldi	r30, 0x5E	; 94
    290c:	f4 e0       	ldi	r31, 0x04	; 4
    290e:	df 01       	movw	r26, r30
    2910:	1d 92       	st	X+, r1
    2912:	9a 95       	dec	r25
    2914:	e9 f7       	brne	.-6      	; 0x2910 <populateArrays+0x24>
    2916:	88 0f       	add	r24, r24
    2918:	92 e0       	ldi	r25, 0x02	; 2
    291a:	98 0f       	add	r25, r24
    291c:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <memLoc>
    2920:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <memLoc+0x1>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	0e 94 98 06 	call	0xd30	; 0xd30 <fram_read8>
    292a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <account_format>
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <i>
    2934:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2938:	87 fd       	sbrc	r24, 7
    293a:	11 c0       	rjmp	.+34     	; 0x295e <populateArrays+0x72>
    293c:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <memLoc>
    2940:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <memLoc+0x1>
    2944:	82 0f       	add	r24, r18
    2946:	93 2f       	mov	r25, r19
    2948:	91 1d       	adc	r25, r1
    294a:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <framAddr+0x1>
    294e:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <framAddr>
    2952:	0e 94 98 06 	call	0xd30	; 0xd30 <fram_read8>
    2956:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <value>
    295a:	8b 32       	cpi	r24, 0x2B	; 43
    295c:	01 f5       	brne	.+64     	; 0x299e <populateArrays+0xb2>
    295e:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <i>
    2962:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2966:	87 fd       	sbrc	r24, 7
    2968:	13 c0       	rjmp	.+38     	; 0x2990 <populateArrays+0xa4>
    296a:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <memLoc>
    296e:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <memLoc+0x1>
    2972:	20 58       	subi	r18, 0x80	; 128
    2974:	3f 4f       	sbci	r19, 0xFF	; 255
    2976:	82 0f       	add	r24, r18
    2978:	93 2f       	mov	r25, r19
    297a:	91 1d       	adc	r25, r1
    297c:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <framAddr+0x1>
    2980:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <framAddr>
    2984:	0e 94 98 06 	call	0xd30	; 0xd30 <fram_read8>
    2988:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <value>
    298c:	8b 32       	cpi	r24, 0x2B	; 43
    298e:	91 f4       	brne	.+36     	; 0x29b4 <populateArrays+0xc8>
    2990:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <i>
    2994:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2998:	87 ff       	sbrs	r24, 7
    299a:	17 c0       	rjmp	.+46     	; 0x29ca <populateArrays+0xde>
    299c:	08 95       	ret
    299e:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <i>
    29a2:	e9 2f       	mov	r30, r25
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	e8 5c       	subi	r30, 0xC8	; 200
    29a8:	fc 4f       	sbci	r31, 0xFC	; 252
    29aa:	80 83       	st	Z, r24
    29ac:	9f 5f       	subi	r25, 0xFF	; 255
    29ae:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <i>
    29b2:	c0 cf       	rjmp	.-128    	; 0x2934 <populateArrays+0x48>
    29b4:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <i>
    29b8:	e9 2f       	mov	r30, r25
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	e2 52       	subi	r30, 0x22	; 34
    29be:	fc 4f       	sbci	r31, 0xFC	; 252
    29c0:	80 83       	st	Z, r24
    29c2:	9f 5f       	subi	r25, 0xFF	; 255
    29c4:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <i>
    29c8:	cc cf       	rjmp	.-104    	; 0x2962 <populateArrays+0x76>
    29ca:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <memLoc>
    29ce:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <memLoc+0x1>
    29d2:	33 95       	inc	r19
    29d4:	82 0f       	add	r24, r18
    29d6:	93 2f       	mov	r25, r19
    29d8:	91 1d       	adc	r25, r1
    29da:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <framAddr+0x1>
    29de:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <framAddr>
    29e2:	0e 94 98 06 	call	0xd30	; 0xd30 <fram_read8>
    29e6:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <value>
    29ea:	8b 32       	cpi	r24, 0x2B	; 43
    29ec:	b9 f2       	breq	.-82     	; 0x299c <populateArrays+0xb0>
    29ee:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <i>
    29f2:	e9 2f       	mov	r30, r25
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	e2 5a       	subi	r30, 0xA2	; 162
    29f8:	fb 4f       	sbci	r31, 0xFB	; 251
    29fa:	80 83       	st	Z, r24
    29fc:	9f 5f       	subi	r25, 0xFF	; 255
    29fe:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <i>
    2a02:	c8 cf       	rjmp	.-112    	; 0x2994 <populateArrays+0xa8>

00002a04 <process_buttons>:
    2a04:	cf 92       	push	r12
    2a06:	df 92       	push	r13
    2a08:	ef 92       	push	r14
    2a0a:	ff 92       	push	r15
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	29 b1       	in	r18, 0x09	; 9
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	2f 37       	cpi	r18, 0x7F	; 127
    2a1a:	11 f4       	brne	.+4      	; 0x2a20 <process_buttons+0x1c>
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <state_up_temp+0x1>
    2a24:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <state_up_temp>
    2a28:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <state_up_prev>
    2a2c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <state_up_prev+0x1>
    2a30:	82 17       	cp	r24, r18
    2a32:	93 07       	cpc	r25, r19
    2a34:	31 f0       	breq	.+12     	; 0x2a42 <process_buttons+0x3e>
    2a36:	0e 94 3f 06 	call	0xc7e	; 0xc7e <millis_get>
    2a3a:	70 93 1e 03 	sts	0x031E, r23	; 0x80031e <debounce_time_up+0x1>
    2a3e:	60 93 1d 03 	sts	0x031D, r22	; 0x80031d <debounce_time_up>
    2a42:	0e 94 3f 06 	call	0xc7e	; 0xc7e <millis_get>
    2a46:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <debounce_time_up>
    2a4a:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <debounce_time_up+0x1>
    2a4e:	6b 01       	movw	r12, r22
    2a50:	7c 01       	movw	r14, r24
    2a52:	c2 1a       	sub	r12, r18
    2a54:	d3 0a       	sbc	r13, r19
    2a56:	e1 08       	sbc	r14, r1
    2a58:	f1 08       	sbc	r15, r1
    2a5a:	97 01       	movw	r18, r14
    2a5c:	86 01       	movw	r16, r12
    2a5e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <debounce_delay>
    2a62:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <debounce_delay+0x1>
    2a66:	70 e0       	ldi	r23, 0x00	; 0
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <state_up_temp>
    2a6e:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <state_up_temp+0x1>
    2a72:	40 17       	cp	r20, r16
    2a74:	51 07       	cpc	r21, r17
    2a76:	62 07       	cpc	r22, r18
    2a78:	73 07       	cpc	r23, r19
    2a7a:	70 f4       	brcc	.+28     	; 0x2a98 <process_buttons+0x94>
    2a7c:	20 91 de 04 	lds	r18, 0x04DE	; 0x8004de <state_up_curr>
    2a80:	30 91 df 04 	lds	r19, 0x04DF	; 0x8004df <state_up_curr+0x1>
    2a84:	28 17       	cp	r18, r24
    2a86:	39 07       	cpc	r19, r25
    2a88:	39 f0       	breq	.+14     	; 0x2a98 <process_buttons+0x94>
    2a8a:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <state_up_curr+0x1>
    2a8e:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <state_up_curr>
    2a92:	c1 e0       	ldi	r28, 0x01	; 1
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <process_buttons+0x96>
    2a98:	c0 e0       	ldi	r28, 0x00	; 0
    2a9a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state_up_prev+0x1>
    2a9e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state_up_prev>
    2aa2:	29 b1       	in	r18, 0x09	; 9
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	2f 3b       	cpi	r18, 0xBF	; 191
    2aaa:	11 f4       	brne	.+4      	; 0x2ab0 <process_buttons+0xac>
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <state_center_temp+0x1>
    2ab4:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <state_center_temp>
    2ab8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <state_center_prev>
    2abc:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <state_center_prev+0x1>
    2ac0:	82 17       	cp	r24, r18
    2ac2:	93 07       	cpc	r25, r19
    2ac4:	31 f0       	breq	.+12     	; 0x2ad2 <process_buttons+0xce>
    2ac6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <millis_get>
    2aca:	70 93 20 03 	sts	0x0320, r23	; 0x800320 <debounce_time_center+0x1>
    2ace:	60 93 1f 03 	sts	0x031F, r22	; 0x80031f <debounce_time_center>
    2ad2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <millis_get>
    2ad6:	20 91 1f 03 	lds	r18, 0x031F	; 0x80031f <debounce_time_center>
    2ada:	30 91 20 03 	lds	r19, 0x0320	; 0x800320 <debounce_time_center+0x1>
    2ade:	ab 01       	movw	r20, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	42 1b       	sub	r20, r18
    2ae4:	53 0b       	sbc	r21, r19
    2ae6:	61 09       	sbc	r22, r1
    2ae8:	71 09       	sbc	r23, r1
    2aea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <debounce_delay>
    2aee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <debounce_delay+0x1>
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	a0 e0       	ldi	r26, 0x00	; 0
    2af6:	84 17       	cp	r24, r20
    2af8:	95 07       	cpc	r25, r21
    2afa:	a6 07       	cpc	r26, r22
    2afc:	b7 07       	cpc	r27, r23
    2afe:	90 f4       	brcc	.+36     	; 0x2b24 <process_buttons+0x120>
    2b00:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <state_center_temp>
    2b04:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <state_center_temp+0x1>
    2b08:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <state_center_curr>
    2b0c:	30 91 dd 03 	lds	r19, 0x03DD	; 0x8003dd <state_center_curr+0x1>
    2b10:	28 17       	cp	r18, r24
    2b12:	39 07       	cpc	r19, r25
    2b14:	39 f0       	breq	.+14     	; 0x2b24 <process_buttons+0x120>
    2b16:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <state_center_curr+0x1>
    2b1a:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <state_center_curr>
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <process_buttons+0x120>
    2b22:	5f c0       	rjmp	.+190    	; 0x2be2 <process_buttons+0x1de>
    2b24:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <state_center_temp>
    2b28:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <state_center_temp+0x1>
    2b2c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state_center_prev+0x1>
    2b30:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state_center_prev>
    2b34:	29 b1       	in	r18, 0x09	; 9
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	2f 3d       	cpi	r18, 0xDF	; 223
    2b3c:	11 f4       	brne	.+4      	; 0x2b42 <process_buttons+0x13e>
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <state_down_temp+0x1>
    2b46:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <state_down_temp>
    2b4a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <state_down_prev>
    2b4e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <state_down_prev+0x1>
    2b52:	82 17       	cp	r24, r18
    2b54:	93 07       	cpc	r25, r19
    2b56:	31 f0       	breq	.+12     	; 0x2b64 <process_buttons+0x160>
    2b58:	0e 94 3f 06 	call	0xc7e	; 0xc7e <millis_get>
    2b5c:	70 93 1c 03 	sts	0x031C, r23	; 0x80031c <debounce_time_down+0x1>
    2b60:	60 93 1b 03 	sts	0x031B, r22	; 0x80031b <debounce_time_down>
    2b64:	0e 94 3f 06 	call	0xc7e	; 0xc7e <millis_get>
    2b68:	20 91 1b 03 	lds	r18, 0x031B	; 0x80031b <debounce_time_down>
    2b6c:	30 91 1c 03 	lds	r19, 0x031C	; 0x80031c <debounce_time_down+0x1>
    2b70:	6b 01       	movw	r12, r22
    2b72:	7c 01       	movw	r14, r24
    2b74:	c2 1a       	sub	r12, r18
    2b76:	d3 0a       	sbc	r13, r19
    2b78:	e1 08       	sbc	r14, r1
    2b7a:	f1 08       	sbc	r15, r1
    2b7c:	97 01       	movw	r18, r14
    2b7e:	86 01       	movw	r16, r12
    2b80:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <debounce_delay>
    2b84:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <debounce_delay+0x1>
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <state_down_temp>
    2b90:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <state_down_temp+0x1>
    2b94:	40 17       	cp	r20, r16
    2b96:	51 07       	cpc	r21, r17
    2b98:	62 07       	cpc	r22, r18
    2b9a:	73 07       	cpc	r23, r19
    2b9c:	70 f4       	brcc	.+28     	; 0x2bba <process_buttons+0x1b6>
    2b9e:	20 91 b9 03 	lds	r18, 0x03B9	; 0x8003b9 <state_down_curr>
    2ba2:	30 91 ba 03 	lds	r19, 0x03BA	; 0x8003ba <state_down_curr+0x1>
    2ba6:	28 17       	cp	r18, r24
    2ba8:	39 07       	cpc	r19, r25
    2baa:	39 f0       	breq	.+14     	; 0x2bba <process_buttons+0x1b6>
    2bac:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <state_down_curr+0x1>
    2bb0:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <state_down_curr>
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <process_buttons+0x1b6>
    2bb8:	c4 e0       	ldi	r28, 0x04	; 4
    2bba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state_down_prev+0x1>
    2bbe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state_down_prev>
    2bc2:	8c 2f       	mov	r24, r28
    2bc4:	cf 91       	pop	r28
    2bc6:	1f 91       	pop	r17
    2bc8:	0f 91       	pop	r16
    2bca:	ff 90       	pop	r15
    2bcc:	ef 90       	pop	r14
    2bce:	df 90       	pop	r13
    2bd0:	cf 90       	pop	r12
    2bd2:	08 95       	ret
    2bd4:	ef e1       	ldi	r30, 0x1F	; 31
    2bd6:	fe e4       	ldi	r31, 0x4E	; 78
    2bd8:	31 97       	sbiw	r30, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <process_buttons+0x1d4>
    2bdc:	00 c0       	rjmp	.+0      	; 0x2bde <process_buttons+0x1da>
    2bde:	00 00       	nop
    2be0:	01 96       	adiw	r24, 0x01	; 1
    2be2:	49 b1       	in	r20, 0x09	; 9
    2be4:	21 e0       	ldi	r18, 0x01	; 1
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	4f 3b       	cpi	r20, 0xBF	; 191
    2bea:	11 f4       	brne	.+4      	; 0x2bf0 <process_buttons+0x1ec>
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	40 91 dc 03 	lds	r20, 0x03DC	; 0x8003dc <state_center_curr>
    2bf4:	50 91 dd 03 	lds	r21, 0x03DD	; 0x8003dd <state_center_curr+0x1>
    2bf8:	24 17       	cp	r18, r20
    2bfa:	35 07       	cpc	r19, r21
    2bfc:	59 f3       	breq	.-42     	; 0x2bd4 <process_buttons+0x1d0>
    2bfe:	c3 e0       	ldi	r28, 0x03	; 3
    2c00:	85 36       	cpi	r24, 0x65	; 101
    2c02:	91 05       	cpc	r25, r1
    2c04:	0c f4       	brge	.+2      	; 0x2c08 <process_buttons+0x204>
    2c06:	8e cf       	rjmp	.-228    	; 0x2b24 <process_buttons+0x120>
    2c08:	c2 e0       	ldi	r28, 0x02	; 2
    2c0a:	8c cf       	rjmp	.-232    	; 0x2b24 <process_buttons+0x120>

00002c0c <addAccount>:
    2c0c:	e0 ee       	ldi	r30, 0xE0	; 224
    2c0e:	f4 e0       	ldi	r31, 0x04	; 4
    2c10:	80 e8       	ldi	r24, 0x80	; 128
    2c12:	df 01       	movw	r26, r30
    2c14:	1d 92       	st	X+, r1
    2c16:	8a 95       	dec	r24
    2c18:	e9 f7       	brne	.-6      	; 0x2c14 <addAccount+0x8>
    2c1a:	28 e2       	ldi	r18, 0x28	; 40
    2c1c:	33 e0       	ldi	r19, 0x03	; 3
    2c1e:	41 e0       	ldi	r20, 0x01	; 1
    2c20:	50 e0       	ldi	r21, 0x00	; 0
    2c22:	60 e8       	ldi	r22, 0x80	; 128
    2c24:	70 e0       	ldi	r23, 0x00	; 0
    2c26:	cf 01       	movw	r24, r30
    2c28:	0e 94 bf 23 	call	0x477e	; 0x477e <fread>
    2c2c:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <total_accounts>
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	6f 5f       	subi	r22, 0xFF	; 255
    2c34:	7f 4f       	sbci	r23, 0xFF	; 255
    2c36:	6f 73       	andi	r22, 0x3F	; 63
    2c38:	77 27       	eor	r23, r23
    2c3a:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <total_accounts>
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	0e 94 7e 06 	call	0xcfc	; 0xcfc <fram_write8>
    2c46:	81 ec       	ldi	r24, 0xC1	; 193
    2c48:	93 e0       	ldi	r25, 0x03	; 3
    2c4a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    2c4e:	25 e4       	ldi	r18, 0x45	; 69
    2c50:	32 e0       	ldi	r19, 0x02	; 2
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	81 ec       	ldi	r24, 0xC1	; 193
    2c58:	93 e0       	ldi	r25, 0x03	; 3
    2c5a:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    2c5e:	bf ef       	ldi	r27, 0xFF	; 255
    2c60:	21 ee       	ldi	r18, 0xE1	; 225
    2c62:	84 e0       	ldi	r24, 0x04	; 4
    2c64:	b1 50       	subi	r27, 0x01	; 1
    2c66:	20 40       	sbci	r18, 0x00	; 0
    2c68:	80 40       	sbci	r24, 0x00	; 0
    2c6a:	e1 f7       	brne	.-8      	; 0x2c64 <addAccount+0x58>
    2c6c:	00 c0       	rjmp	.+0      	; 0x2c6e <addAccount+0x62>
    2c6e:	00 00       	nop
    2c70:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <i>
    2c74:	20 91 bf 03 	lds	r18, 0x03BF	; 0x8003bf <i>
    2c78:	27 ff       	sbrs	r18, 7
    2c7a:	57 c0       	rjmp	.+174    	; 0x2d2a <addAccount+0x11e>
    2c7c:	e0 ee       	ldi	r30, 0xE0	; 224
    2c7e:	f4 e0       	ldi	r31, 0x04	; 4
    2c80:	80 e8       	ldi	r24, 0x80	; 128
    2c82:	df 01       	movw	r26, r30
    2c84:	1d 92       	st	X+, r1
    2c86:	8a 95       	dec	r24
    2c88:	e9 f7       	brne	.-6      	; 0x2c84 <addAccount+0x78>
    2c8a:	28 e2       	ldi	r18, 0x28	; 40
    2c8c:	33 e0       	ldi	r19, 0x03	; 3
    2c8e:	41 e0       	ldi	r20, 0x01	; 1
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	60 e8       	ldi	r22, 0x80	; 128
    2c94:	70 e0       	ldi	r23, 0x00	; 0
    2c96:	cf 01       	movw	r24, r30
    2c98:	0e 94 bf 23 	call	0x477e	; 0x477e <fread>
    2c9c:	81 ec       	ldi	r24, 0xC1	; 193
    2c9e:	93 e0       	ldi	r25, 0x03	; 3
    2ca0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    2ca4:	2f e4       	ldi	r18, 0x4F	; 79
    2ca6:	32 e0       	ldi	r19, 0x02	; 2
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	60 e0       	ldi	r22, 0x00	; 0
    2cac:	81 ec       	ldi	r24, 0xC1	; 193
    2cae:	93 e0       	ldi	r25, 0x03	; 3
    2cb0:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    2cb4:	bf ef       	ldi	r27, 0xFF	; 255
    2cb6:	21 ee       	ldi	r18, 0xE1	; 225
    2cb8:	84 e0       	ldi	r24, 0x04	; 4
    2cba:	b1 50       	subi	r27, 0x01	; 1
    2cbc:	20 40       	sbci	r18, 0x00	; 0
    2cbe:	80 40       	sbci	r24, 0x00	; 0
    2cc0:	e1 f7       	brne	.-8      	; 0x2cba <addAccount+0xae>
    2cc2:	00 c0       	rjmp	.+0      	; 0x2cc4 <addAccount+0xb8>
    2cc4:	00 00       	nop
    2cc6:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <i>
    2cca:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2cce:	87 ff       	sbrs	r24, 7
    2cd0:	41 c0       	rjmp	.+130    	; 0x2d54 <addAccount+0x148>
    2cd2:	e0 ee       	ldi	r30, 0xE0	; 224
    2cd4:	f4 e0       	ldi	r31, 0x04	; 4
    2cd6:	80 e8       	ldi	r24, 0x80	; 128
    2cd8:	df 01       	movw	r26, r30
    2cda:	1d 92       	st	X+, r1
    2cdc:	8a 95       	dec	r24
    2cde:	e9 f7       	brne	.-6      	; 0x2cda <addAccount+0xce>
    2ce0:	28 e2       	ldi	r18, 0x28	; 40
    2ce2:	33 e0       	ldi	r19, 0x03	; 3
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	60 e8       	ldi	r22, 0x80	; 128
    2cea:	70 e0       	ldi	r23, 0x00	; 0
    2cec:	cf 01       	movw	r24, r30
    2cee:	0e 94 bf 23 	call	0x477e	; 0x477e <fread>
    2cf2:	81 ec       	ldi	r24, 0xC1	; 193
    2cf4:	93 e0       	ldi	r25, 0x03	; 3
    2cf6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    2cfa:	29 e5       	ldi	r18, 0x59	; 89
    2cfc:	32 e0       	ldi	r19, 0x02	; 2
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	60 e0       	ldi	r22, 0x00	; 0
    2d02:	81 ec       	ldi	r24, 0xC1	; 193
    2d04:	93 e0       	ldi	r25, 0x03	; 3
    2d06:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    2d0a:	bf ef       	ldi	r27, 0xFF	; 255
    2d0c:	21 ee       	ldi	r18, 0xE1	; 225
    2d0e:	84 e0       	ldi	r24, 0x04	; 4
    2d10:	b1 50       	subi	r27, 0x01	; 1
    2d12:	20 40       	sbci	r18, 0x00	; 0
    2d14:	80 40       	sbci	r24, 0x00	; 0
    2d16:	e1 f7       	brne	.-8      	; 0x2d10 <addAccount+0x104>
    2d18:	00 c0       	rjmp	.+0      	; 0x2d1a <addAccount+0x10e>
    2d1a:	00 00       	nop
    2d1c:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <i>
    2d20:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2d24:	87 ff       	sbrs	r24, 7
    2d26:	2e c0       	rjmp	.+92     	; 0x2d84 <addAccount+0x178>
    2d28:	08 95       	ret
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	f9 01       	movw	r30, r18
    2d2e:	e0 52       	subi	r30, 0x20	; 32
    2d30:	fb 4f       	sbci	r31, 0xFB	; 251
    2d32:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <total_accounts>
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	98 2f       	mov	r25, r24
    2d3a:	88 27       	eor	r24, r24
    2d3c:	99 0f       	add	r25, r25
    2d3e:	60 81       	ld	r22, Z
    2d40:	82 0f       	add	r24, r18
    2d42:	93 1f       	adc	r25, r19
    2d44:	0e 94 7e 06 	call	0xcfc	; 0xcfc <fram_write8>
    2d48:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2d4c:	8f 5f       	subi	r24, 0xFF	; 255
    2d4e:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <i>
    2d52:	90 cf       	rjmp	.-224    	; 0x2c74 <addAccount+0x68>
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	f9 01       	movw	r30, r18
    2d5a:	e0 52       	subi	r30, 0x20	; 32
    2d5c:	fb 4f       	sbci	r31, 0xFB	; 251
    2d5e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <total_accounts>
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	98 2f       	mov	r25, r24
    2d66:	88 27       	eor	r24, r24
    2d68:	99 0f       	add	r25, r25
    2d6a:	82 0f       	add	r24, r18
    2d6c:	93 1f       	adc	r25, r19
    2d6e:	60 81       	ld	r22, Z
    2d70:	80 58       	subi	r24, 0x80	; 128
    2d72:	9f 4f       	sbci	r25, 0xFF	; 255
    2d74:	0e 94 7e 06 	call	0xcfc	; 0xcfc <fram_write8>
    2d78:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2d7c:	8f 5f       	subi	r24, 0xFF	; 255
    2d7e:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <i>
    2d82:	a3 cf       	rjmp	.-186    	; 0x2cca <addAccount+0xbe>
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	f9 01       	movw	r30, r18
    2d8a:	e0 52       	subi	r30, 0x20	; 32
    2d8c:	fb 4f       	sbci	r31, 0xFB	; 251
    2d8e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <total_accounts>
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	98 2f       	mov	r25, r24
    2d96:	88 27       	eor	r24, r24
    2d98:	99 0f       	add	r25, r25
    2d9a:	82 0f       	add	r24, r18
    2d9c:	93 1f       	adc	r25, r19
    2d9e:	60 81       	ld	r22, Z
    2da0:	93 95       	inc	r25
    2da2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <fram_write8>
    2da6:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2daa:	8f 5f       	subi	r24, 0xFF	; 255
    2dac:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <i>
    2db0:	b7 cf       	rjmp	.-146    	; 0x2d20 <addAccount+0x114>

00002db2 <deleteAcc>:
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	d8 2f       	mov	r29, r24
    2dbc:	c8 2f       	mov	r28, r24
    2dbe:	cc 0f       	add	r28, r28
    2dc0:	ce 5f       	subi	r28, 0xFE	; 254
    2dc2:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <memLoc>
    2dc6:	c0 93 22 03 	sts	0x0322, r28	; 0x800322 <memLoc+0x1>
    2dca:	10 e0       	ldi	r17, 0x00	; 0
    2dcc:	00 e0       	ldi	r16, 0x00	; 0
    2dce:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <memLoc>
    2dd2:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <memLoc+0x1>
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
    2dd8:	80 0f       	add	r24, r16
    2dda:	91 1f       	adc	r25, r17
    2ddc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <fram_write8>
    2de0:	0f 5f       	subi	r16, 0xFF	; 255
    2de2:	1f 4f       	sbci	r17, 0xFF	; 255
    2de4:	01 15       	cp	r16, r1
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	18 07       	cpc	r17, r24
    2dea:	89 f7       	brne	.-30     	; 0x2dce <deleteAcc+0x1c>
    2dec:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <total_accounts>
    2df0:	61 50       	subi	r22, 0x01	; 1
    2df2:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <total_accounts>
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	0e 94 7e 06 	call	0xcfc	; 0xcfc <fram_write8>
    2dfe:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <total_accounts>
    2e02:	8d 17       	cp	r24, r29
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <deleteAcc+0x56>
    2e06:	85 c0       	rjmp	.+266    	; 0x2f12 <deleteAcc+0x160>
    2e08:	71 dd       	rcall	.-1310   	; 0x28ec <populateArrays>
    2e0a:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <memLoc>
    2e0e:	c0 93 22 03 	sts	0x0322, r28	; 0x800322 <memLoc+0x1>
    2e12:	60 e0       	ldi	r22, 0x00	; 0
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	9c 2f       	mov	r25, r28
    2e18:	0e 94 7e 06 	call	0xcfc	; 0xcfc <fram_write8>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <i>
    2e22:	20 91 bf 03 	lds	r18, 0x03BF	; 0x8003bf <i>
    2e26:	27 ff       	sbrs	r18, 7
    2e28:	19 c0       	rjmp	.+50     	; 0x2e5c <deleteAcc+0xaa>
    2e2a:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <i>
    2e2e:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2e32:	87 ff       	sbrs	r24, 7
    2e34:	28 c0       	rjmp	.+80     	; 0x2e86 <deleteAcc+0xd4>
    2e36:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <i>
    2e3a:	20 91 bf 03 	lds	r18, 0x03BF	; 0x8003bf <i>
    2e3e:	27 ff       	sbrs	r18, 7
    2e40:	37 c0       	rjmp	.+110    	; 0x2eb0 <deleteAcc+0xfe>
    2e42:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <i>
    2e46:	20 91 bf 03 	lds	r18, 0x03BF	; 0x8003bf <i>
    2e4a:	27 ff       	sbrs	r18, 7
    2e4c:	4a c0       	rjmp	.+148    	; 0x2ee2 <deleteAcc+0x130>
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	08 95       	ret
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <memLoc>
    2e62:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <memLoc+0x1>
    2e66:	82 0f       	add	r24, r18
    2e68:	93 1f       	adc	r25, r19
    2e6a:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <framAddr+0x1>
    2e6e:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <framAddr>
    2e72:	28 5c       	subi	r18, 0xC8	; 200
    2e74:	3c 4f       	sbci	r19, 0xFC	; 252
    2e76:	f9 01       	movw	r30, r18
    2e78:	60 81       	ld	r22, Z
    2e7a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <fram_write8>
    2e7e:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2e82:	8f 5f       	subi	r24, 0xFF	; 255
    2e84:	cc cf       	rjmp	.-104    	; 0x2e1e <deleteAcc+0x6c>
    2e86:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <memLoc>
    2e8a:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <memLoc+0x1>
    2e8e:	82 0f       	add	r24, r18
    2e90:	93 2f       	mov	r25, r19
    2e92:	91 1d       	adc	r25, r1
    2e94:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <framAddr+0x1>
    2e98:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <framAddr>
    2e9c:	0e 94 98 06 	call	0xd30	; 0xd30 <fram_read8>
    2ea0:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <value>
    2ea4:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2ea8:	8f 5f       	subi	r24, 0xFF	; 255
    2eaa:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <i>
    2eae:	bf cf       	rjmp	.-130    	; 0x2e2e <deleteAcc+0x7c>
    2eb0:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <memLoc>
    2eb4:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <memLoc+0x1>
    2eb8:	80 58       	subi	r24, 0x80	; 128
    2eba:	9f 4f       	sbci	r25, 0xFF	; 255
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	82 0f       	add	r24, r18
    2ec0:	93 1f       	adc	r25, r19
    2ec2:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <framAddr+0x1>
    2ec6:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <framAddr>
    2eca:	22 52       	subi	r18, 0x22	; 34
    2ecc:	3c 4f       	sbci	r19, 0xFC	; 252
    2ece:	f9 01       	movw	r30, r18
    2ed0:	60 81       	ld	r22, Z
    2ed2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <fram_write8>
    2ed6:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2eda:	8f 5f       	subi	r24, 0xFF	; 255
    2edc:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <i>
    2ee0:	ac cf       	rjmp	.-168    	; 0x2e3a <deleteAcc+0x88>
    2ee2:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <memLoc>
    2ee6:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <memLoc+0x1>
    2eea:	93 95       	inc	r25
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	82 0f       	add	r24, r18
    2ef0:	93 1f       	adc	r25, r19
    2ef2:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <framAddr+0x1>
    2ef6:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <framAddr>
    2efa:	22 5a       	subi	r18, 0xA2	; 162
    2efc:	3b 4f       	sbci	r19, 0xFB	; 251
    2efe:	f9 01       	movw	r30, r18
    2f00:	60 81       	ld	r22, Z
    2f02:	0e 94 7e 06 	call	0xcfc	; 0xcfc <fram_write8>
    2f06:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2f0a:	8f 5f       	subi	r24, 0xFF	; 255
    2f0c:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <i>
    2f10:	9a cf       	rjmp	.-204    	; 0x2e46 <deleteAcc+0x94>
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	9d cf       	rjmp	.-198    	; 0x2e52 <deleteAcc+0xa0>

00002f18 <compareArray>:
    2f18:	dc 01       	movw	r26, r24
    2f1a:	fb 01       	movw	r30, r22
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	2d 91       	ld	r18, X+
    2f20:	81 91       	ld	r24, Z+
    2f22:	28 13       	cpse	r18, r24
    2f24:	06 c0       	rjmp	.+12     	; 0x2f32 <compareArray+0x1a>
    2f26:	9f 5f       	subi	r25, 0xFF	; 255
    2f28:	90 38       	cpi	r25, 0x80	; 128
    2f2a:	c9 f7       	brne	.-14     	; 0x2f1e <compareArray+0x6>
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	08 95       	ret
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	08 95       	ret

00002f38 <removeAccount>:
    2f38:	df 92       	push	r13
    2f3a:	ef 92       	push	r14
    2f3c:	ff 92       	push	r15
    2f3e:	0f 93       	push	r16
    2f40:	1f 93       	push	r17
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
    2f46:	e0 ee       	ldi	r30, 0xE0	; 224
    2f48:	f4 e0       	ldi	r31, 0x04	; 4
    2f4a:	80 e8       	ldi	r24, 0x80	; 128
    2f4c:	df 01       	movw	r26, r30
    2f4e:	1d 92       	st	X+, r1
    2f50:	8a 95       	dec	r24
    2f52:	e9 f7       	brne	.-6      	; 0x2f4e <removeAccount+0x16>
    2f54:	28 e2       	ldi	r18, 0x28	; 40
    2f56:	33 e0       	ldi	r19, 0x03	; 3
    2f58:	41 e0       	ldi	r20, 0x01	; 1
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	60 e8       	ldi	r22, 0x80	; 128
    2f5e:	70 e0       	ldi	r23, 0x00	; 0
    2f60:	cf 01       	movw	r24, r30
    2f62:	0e 94 bf 23 	call	0x477e	; 0x477e <fread>
    2f66:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <i>
    2f6a:	09 e3       	ldi	r16, 0x39	; 57
    2f6c:	13 e0       	ldi	r17, 0x03	; 3
    2f6e:	90 e8       	ldi	r25, 0x80	; 128
    2f70:	d9 2e       	mov	r13, r25
    2f72:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2f76:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <total_accounts>
    2f7a:	89 17       	cp	r24, r25
    2f7c:	40 f0       	brcs	.+16     	; 0x2f8e <removeAccount+0x56>
    2f7e:	df 91       	pop	r29
    2f80:	cf 91       	pop	r28
    2f82:	1f 91       	pop	r17
    2f84:	0f 91       	pop	r16
    2f86:	ff 90       	pop	r15
    2f88:	ef 90       	pop	r14
    2f8a:	df 90       	pop	r13
    2f8c:	08 95       	ret
    2f8e:	f8 01       	movw	r30, r16
    2f90:	9d 2d       	mov	r25, r13
    2f92:	11 92       	st	Z+, r1
    2f94:	9a 95       	dec	r25
    2f96:	e9 f7       	brne	.-6      	; 0x2f92 <removeAccount+0x5a>
    2f98:	88 0f       	add	r24, r24
    2f9a:	8e 5f       	subi	r24, 0xFE	; 254
    2f9c:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <memLoc>
    2fa0:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <memLoc+0x1>
    2fa4:	89 e3       	ldi	r24, 0x39	; 57
    2fa6:	e8 2e       	mov	r14, r24
    2fa8:	83 e0       	ldi	r24, 0x03	; 3
    2faa:	f8 2e       	mov	r15, r24
    2fac:	c1 e0       	ldi	r28, 0x01	; 1
    2fae:	d0 e0       	ldi	r29, 0x00	; 0
    2fb0:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <memLoc>
    2fb4:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <memLoc+0x1>
    2fb8:	8c 0f       	add	r24, r28
    2fba:	9d 1f       	adc	r25, r29
    2fbc:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <framAddr+0x1>
    2fc0:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <framAddr>
    2fc4:	0e 94 98 06 	call	0xd30	; 0xd30 <fram_read8>
    2fc8:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <value>
    2fcc:	21 96       	adiw	r28, 0x01	; 1
    2fce:	8b 32       	cpi	r24, 0x2B	; 43
    2fd0:	91 f4       	brne	.+36     	; 0x2ff6 <removeAccount+0xbe>
    2fd2:	60 ee       	ldi	r22, 0xE0	; 224
    2fd4:	74 e0       	ldi	r23, 0x04	; 4
    2fd6:	89 e3       	ldi	r24, 0x39	; 57
    2fd8:	93 e0       	ldi	r25, 0x03	; 3
    2fda:	9e df       	rcall	.-196    	; 0x2f18 <compareArray>
    2fdc:	89 2b       	or	r24, r25
    2fde:	29 f0       	breq	.+10     	; 0x2fea <removeAccount+0xb2>
    2fe0:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2fe4:	e6 de       	rcall	.-564    	; 0x2db2 <deleteAcc>
    2fe6:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <value>
    2fea:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <i>
    2fee:	8f 5f       	subi	r24, 0xFF	; 255
    2ff0:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <i>
    2ff4:	be cf       	rjmp	.-132    	; 0x2f72 <removeAccount+0x3a>
    2ff6:	d7 01       	movw	r26, r14
    2ff8:	8d 93       	st	X+, r24
    2ffa:	7d 01       	movw	r14, r26
    2ffc:	c0 38       	cpi	r28, 0x80	; 128
    2ffe:	d1 05       	cpc	r29, r1
    3000:	b9 f6       	brne	.-82     	; 0x2fb0 <removeAccount+0x78>
    3002:	e7 cf       	rjmp	.-50     	; 0x2fd2 <removeAccount+0x9a>

00003004 <Enroll>:
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	0e 94 de 06 	call	0xdbc	; 0xdbc <fps_SetLED>
    300e:	81 ec       	ldi	r24, 0xC1	; 193
    3010:	93 e0       	ldi	r25, 0x03	; 3
    3012:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    3016:	d0 e0       	ldi	r29, 0x00	; 0
    3018:	c0 e0       	ldi	r28, 0x00	; 0
    301a:	ce 01       	movw	r24, r28
    301c:	0e 94 05 07 	call	0xe0a	; 0xe0a <fps_CheckEnrolled>
    3020:	88 23       	and	r24, r24
    3022:	11 f0       	breq	.+4      	; 0x3028 <Enroll+0x24>
    3024:	21 96       	adiw	r28, 0x01	; 1
    3026:	f9 cf       	rjmp	.-14     	; 0x301a <Enroll+0x16>
    3028:	ce 01       	movw	r24, r28
    302a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <fps_EnrollStart>
    302e:	23 e6       	ldi	r18, 0x63	; 99
    3030:	32 e0       	ldi	r19, 0x02	; 2
    3032:	41 e0       	ldi	r20, 0x01	; 1
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	81 ec       	ldi	r24, 0xC1	; 193
    3038:	93 e0       	ldi	r25, 0x03	; 3
    303a:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    303e:	0e 94 e5 06 	call	0xdca	; 0xdca <fps_IsPressFinger>
    3042:	88 23       	and	r24, r24
    3044:	09 f4       	brne	.+2      	; 0x3048 <Enroll+0x44>
    3046:	76 c0       	rjmp	.+236    	; 0x3134 <Enroll+0x130>
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <fps_CaptureFinger>
    304e:	88 23       	and	r24, r24
    3050:	09 f4       	brne	.+2      	; 0x3054 <Enroll+0x50>
    3052:	a2 c0       	rjmp	.+324    	; 0x3198 <Enroll+0x194>
    3054:	81 ec       	ldi	r24, 0xC1	; 193
    3056:	93 e0       	ldi	r25, 0x03	; 3
    3058:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    305c:	20 e7       	ldi	r18, 0x70	; 112
    305e:	32 e0       	ldi	r19, 0x02	; 2
    3060:	41 e0       	ldi	r20, 0x01	; 1
    3062:	60 e0       	ldi	r22, 0x00	; 0
    3064:	81 ec       	ldi	r24, 0xC1	; 193
    3066:	93 e0       	ldi	r25, 0x03	; 3
    3068:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    306c:	0e 94 0c 07 	call	0xe18	; 0xe18 <fps_Enroll1>
    3070:	0e 94 e5 06 	call	0xdca	; 0xdca <fps_IsPressFinger>
    3074:	81 11       	cpse	r24, r1
    3076:	68 c0       	rjmp	.+208    	; 0x3148 <Enroll+0x144>
    3078:	81 ec       	ldi	r24, 0xC1	; 193
    307a:	93 e0       	ldi	r25, 0x03	; 3
    307c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    3080:	23 e6       	ldi	r18, 0x63	; 99
    3082:	32 e0       	ldi	r19, 0x02	; 2
    3084:	41 e0       	ldi	r20, 0x01	; 1
    3086:	60 e0       	ldi	r22, 0x00	; 0
    3088:	81 ec       	ldi	r24, 0xC1	; 193
    308a:	93 e0       	ldi	r25, 0x03	; 3
    308c:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    3090:	0e 94 e5 06 	call	0xdca	; 0xdca <fps_IsPressFinger>
    3094:	88 23       	and	r24, r24
    3096:	09 f4       	brne	.+2      	; 0x309a <Enroll+0x96>
    3098:	61 c0       	rjmp	.+194    	; 0x315c <Enroll+0x158>
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <fps_CaptureFinger>
    30a0:	88 23       	and	r24, r24
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <Enroll+0xa2>
    30a4:	79 c0       	rjmp	.+242    	; 0x3198 <Enroll+0x194>
    30a6:	81 ec       	ldi	r24, 0xC1	; 193
    30a8:	93 e0       	ldi	r25, 0x03	; 3
    30aa:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    30ae:	20 e7       	ldi	r18, 0x70	; 112
    30b0:	32 e0       	ldi	r19, 0x02	; 2
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	60 e0       	ldi	r22, 0x00	; 0
    30b6:	81 ec       	ldi	r24, 0xC1	; 193
    30b8:	93 e0       	ldi	r25, 0x03	; 3
    30ba:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    30be:	0e 94 12 07 	call	0xe24	; 0xe24 <fps_Enroll2>
    30c2:	0e 94 e5 06 	call	0xdca	; 0xdca <fps_IsPressFinger>
    30c6:	81 11       	cpse	r24, r1
    30c8:	53 c0       	rjmp	.+166    	; 0x3170 <Enroll+0x16c>
    30ca:	81 ec       	ldi	r24, 0xC1	; 193
    30cc:	93 e0       	ldi	r25, 0x03	; 3
    30ce:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    30d2:	23 e6       	ldi	r18, 0x63	; 99
    30d4:	32 e0       	ldi	r19, 0x02	; 2
    30d6:	41 e0       	ldi	r20, 0x01	; 1
    30d8:	60 e0       	ldi	r22, 0x00	; 0
    30da:	81 ec       	ldi	r24, 0xC1	; 193
    30dc:	93 e0       	ldi	r25, 0x03	; 3
    30de:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    30e2:	0e 94 e5 06 	call	0xdca	; 0xdca <fps_IsPressFinger>
    30e6:	88 23       	and	r24, r24
    30e8:	09 f4       	brne	.+2      	; 0x30ec <Enroll+0xe8>
    30ea:	4c c0       	rjmp	.+152    	; 0x3184 <Enroll+0x180>
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <fps_CaptureFinger>
    30f2:	88 23       	and	r24, r24
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <Enroll+0xf4>
    30f6:	50 c0       	rjmp	.+160    	; 0x3198 <Enroll+0x194>
    30f8:	0e 94 18 07 	call	0xe30	; 0xe30 <fps_Enroll3>
    30fc:	89 2b       	or	r24, r25
    30fe:	09 f0       	breq	.+2      	; 0x3102 <Enroll+0xfe>
    3100:	4b c0       	rjmp	.+150    	; 0x3198 <Enroll+0x194>
    3102:	81 ec       	ldi	r24, 0xC1	; 193
    3104:	93 e0       	ldi	r25, 0x03	; 3
    3106:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    310a:	2c e7       	ldi	r18, 0x7C	; 124
    310c:	32 e0       	ldi	r19, 0x02	; 2
    310e:	41 e0       	ldi	r20, 0x01	; 1
    3110:	60 e0       	ldi	r22, 0x00	; 0
    3112:	81 ec       	ldi	r24, 0xC1	; 193
    3114:	93 e0       	ldi	r25, 0x03	; 3
    3116:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    311a:	2d e8       	ldi	r18, 0x8D	; 141
    311c:	32 e0       	ldi	r19, 0x02	; 2
    311e:	42 e0       	ldi	r20, 0x02	; 2
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	81 ec       	ldi	r24, 0xC1	; 193
    3124:	93 e0       	ldi	r25, 0x03	; 3
    3126:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <fps_SetLED>
    3134:	2f ef       	ldi	r18, 0xFF	; 255
    3136:	80 e7       	ldi	r24, 0x70	; 112
    3138:	92 e0       	ldi	r25, 0x02	; 2
    313a:	21 50       	subi	r18, 0x01	; 1
    313c:	80 40       	sbci	r24, 0x00	; 0
    313e:	90 40       	sbci	r25, 0x00	; 0
    3140:	e1 f7       	brne	.-8      	; 0x313a <Enroll+0x136>
    3142:	00 c0       	rjmp	.+0      	; 0x3144 <Enroll+0x140>
    3144:	00 00       	nop
    3146:	7b cf       	rjmp	.-266    	; 0x303e <Enroll+0x3a>
    3148:	2f ef       	ldi	r18, 0xFF	; 255
    314a:	80 e7       	ldi	r24, 0x70	; 112
    314c:	92 e0       	ldi	r25, 0x02	; 2
    314e:	21 50       	subi	r18, 0x01	; 1
    3150:	80 40       	sbci	r24, 0x00	; 0
    3152:	90 40       	sbci	r25, 0x00	; 0
    3154:	e1 f7       	brne	.-8      	; 0x314e <Enroll+0x14a>
    3156:	00 c0       	rjmp	.+0      	; 0x3158 <Enroll+0x154>
    3158:	00 00       	nop
    315a:	8a cf       	rjmp	.-236    	; 0x3070 <Enroll+0x6c>
    315c:	2f ef       	ldi	r18, 0xFF	; 255
    315e:	80 e7       	ldi	r24, 0x70	; 112
    3160:	92 e0       	ldi	r25, 0x02	; 2
    3162:	21 50       	subi	r18, 0x01	; 1
    3164:	80 40       	sbci	r24, 0x00	; 0
    3166:	90 40       	sbci	r25, 0x00	; 0
    3168:	e1 f7       	brne	.-8      	; 0x3162 <Enroll+0x15e>
    316a:	00 c0       	rjmp	.+0      	; 0x316c <Enroll+0x168>
    316c:	00 00       	nop
    316e:	90 cf       	rjmp	.-224    	; 0x3090 <Enroll+0x8c>
    3170:	2f ef       	ldi	r18, 0xFF	; 255
    3172:	80 e7       	ldi	r24, 0x70	; 112
    3174:	92 e0       	ldi	r25, 0x02	; 2
    3176:	21 50       	subi	r18, 0x01	; 1
    3178:	80 40       	sbci	r24, 0x00	; 0
    317a:	90 40       	sbci	r25, 0x00	; 0
    317c:	e1 f7       	brne	.-8      	; 0x3176 <Enroll+0x172>
    317e:	00 c0       	rjmp	.+0      	; 0x3180 <Enroll+0x17c>
    3180:	00 00       	nop
    3182:	9f cf       	rjmp	.-194    	; 0x30c2 <Enroll+0xbe>
    3184:	2f ef       	ldi	r18, 0xFF	; 255
    3186:	80 e7       	ldi	r24, 0x70	; 112
    3188:	92 e0       	ldi	r25, 0x02	; 2
    318a:	21 50       	subi	r18, 0x01	; 1
    318c:	80 40       	sbci	r24, 0x00	; 0
    318e:	90 40       	sbci	r25, 0x00	; 0
    3190:	e1 f7       	brne	.-8      	; 0x318a <Enroll+0x186>
    3192:	00 c0       	rjmp	.+0      	; 0x3194 <Enroll+0x190>
    3194:	00 00       	nop
    3196:	a5 cf       	rjmp	.-182    	; 0x30e2 <Enroll+0xde>
    3198:	81 ec       	ldi	r24, 0xC1	; 193
    319a:	93 e0       	ldi	r25, 0x03	; 3
    319c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    31a0:	2d e9       	ldi	r18, 0x9D	; 157
    31a2:	32 e0       	ldi	r19, 0x02	; 2
    31a4:	41 e0       	ldi	r20, 0x01	; 1
    31a6:	bc cf       	rjmp	.-136    	; 0x3120 <Enroll+0x11c>

000031a8 <updateScreen>:
    31a8:	81 ec       	ldi	r24, 0xC1	; 193
    31aa:	93 e0       	ldi	r25, 0x03	; 3
    31ac:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    31b0:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <total_accounts>
    31b4:	24 ea       	ldi	r18, 0xA4	; 164
    31b6:	32 e0       	ldi	r19, 0x02	; 2
    31b8:	41 e0       	ldi	r20, 0x01	; 1
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	88 23       	and	r24, r24
    31be:	e1 f0       	breq	.+56     	; 0x31f8 <updateScreen+0x50>
    31c0:	20 eb       	ldi	r18, 0xB0	; 176
    31c2:	32 e0       	ldi	r19, 0x02	; 2
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	60 e0       	ldi	r22, 0x00	; 0
    31c8:	81 ec       	ldi	r24, 0xC1	; 193
    31ca:	93 e0       	ldi	r25, 0x03	; 3
    31cc:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    31d0:	29 e3       	ldi	r18, 0x39	; 57
    31d2:	33 e0       	ldi	r19, 0x03	; 3
    31d4:	41 e0       	ldi	r20, 0x01	; 1
    31d6:	62 e0       	ldi	r22, 0x02	; 2
    31d8:	81 ec       	ldi	r24, 0xC1	; 193
    31da:	93 e0       	ldi	r25, 0x03	; 3
    31dc:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    31e0:	26 eb       	ldi	r18, 0xB6	; 182
    31e2:	32 e0       	ldi	r19, 0x02	; 2
    31e4:	42 e0       	ldi	r20, 0x02	; 2
    31e6:	60 e0       	ldi	r22, 0x00	; 0
    31e8:	81 ec       	ldi	r24, 0xC1	; 193
    31ea:	93 e0       	ldi	r25, 0x03	; 3
    31ec:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    31f0:	2e ed       	ldi	r18, 0xDE	; 222
    31f2:	33 e0       	ldi	r19, 0x03	; 3
    31f4:	43 e0       	ldi	r20, 0x03	; 3
    31f6:	62 e0       	ldi	r22, 0x02	; 2
    31f8:	81 ec       	ldi	r24, 0xC1	; 193
    31fa:	93 e0       	ldi	r25, 0x03	; 3
    31fc:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    3200:	8f e4       	ldi	r24, 0x4F	; 79
    3202:	93 ec       	ldi	r25, 0xC3	; 195
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	f1 f7       	brne	.-4      	; 0x3204 <updateScreen+0x5c>
    3208:	00 c0       	rjmp	.+0      	; 0x320a <updateScreen+0x62>
    320a:	00 00       	nop
    320c:	08 95       	ret

0000320e <main>:
    320e:	0f 93       	push	r16
    3210:	1f 93       	push	r17
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	3b db       	rcall	.-2442   	; 0x288e <SetupHardware>
    3218:	68 e2       	ldi	r22, 0x28	; 40
    321a:	73 e0       	ldi	r23, 0x03	; 3
    321c:	8a e0       	ldi	r24, 0x0A	; 10
    321e:	91 e0       	ldi	r25, 0x01	; 1
    3220:	21 d7       	rcall	.+3650   	; 0x4064 <CDC_Device_CreateStream>
    3222:	78 94       	sei
    3224:	cf ef       	ldi	r28, 0xFF	; 255
    3226:	ee db       	rcall	.-2084   	; 0x2a04 <process_buttons>
    3228:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <buttonState>
    322c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <mode>
    3230:	82 30       	cpi	r24, 0x02	; 2
    3232:	49 f5       	brne	.+82     	; 0x3286 <main+0x78>
    3234:	91 11       	cpse	r25, r1
    3236:	16 c0       	rjmp	.+44     	; 0x3264 <main+0x56>
    3238:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <c_account>
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	0e 94 98 06 	call	0xd30	; 0xd30 <fram_read8>
    3244:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <total_accounts>
    3248:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <c_account>
    324c:	4f db       	rcall	.-2402   	; 0x28ec <populateArrays>
    324e:	ac df       	rcall	.-168    	; 0x31a8 <updateScreen>
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	df 91       	pop	r29
    325c:	cf 91       	pop	r28
    325e:	1f 91       	pop	r17
    3260:	0f 91       	pop	r16
    3262:	08 95       	ret
    3264:	91 30       	cpi	r25, 0x01	; 1
    3266:	79 f4       	brne	.+30     	; 0x3286 <main+0x78>
    3268:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <mode>
    326c:	81 ec       	ldi	r24, 0xC1	; 193
    326e:	93 e0       	ldi	r25, 0x03	; 3
    3270:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    3274:	2c eb       	ldi	r18, 0xBC	; 188
    3276:	32 e0       	ldi	r19, 0x02	; 2
    3278:	40 e0       	ldi	r20, 0x00	; 0
    327a:	60 e0       	ldi	r22, 0x00	; 0
    327c:	81 ec       	ldi	r24, 0xC1	; 193
    327e:	93 e0       	ldi	r25, 0x03	; 3
    3280:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    3284:	e8 cf       	rjmp	.-48     	; 0x3256 <main+0x48>
    3286:	99 23       	and	r25, r25
    3288:	59 f0       	breq	.+22     	; 0x32a0 <main+0x92>
    328a:	91 30       	cpi	r25, 0x01	; 1
    328c:	09 f4       	brne	.+2      	; 0x3290 <main+0x82>
    328e:	70 c0       	rjmp	.+224    	; 0x3370 <main+0x162>
    3290:	8a e0       	ldi	r24, 0x0A	; 10
    3292:	91 e0       	ldi	r25, 0x01	; 1
    3294:	a8 d6       	rcall	.+3408   	; 0x3fe6 <CDC_Device_ReceiveByte>
    3296:	8a e0       	ldi	r24, 0x0A	; 10
    3298:	91 e0       	ldi	r25, 0x01	; 1
    329a:	60 d6       	rcall	.+3264   	; 0x3f5c <CDC_Device_USBTask>
    329c:	b8 d5       	rcall	.+2928   	; 0x3e0e <USB_USBTask>
    329e:	c3 cf       	rjmp	.-122    	; 0x3226 <main+0x18>
    32a0:	c0 93 c0 03 	sts	0x03C0, r28	; 0x8003c0 <iByte>
    32a4:	8a e0       	ldi	r24, 0x0A	; 10
    32a6:	91 e0       	ldi	r25, 0x01	; 1
    32a8:	6f d6       	rcall	.+3294   	; 0x3f88 <CDC_Device_BytesReceived>
    32aa:	89 2b       	or	r24, r25
    32ac:	29 f0       	breq	.+10     	; 0x32b8 <main+0xaa>
    32ae:	8a e0       	ldi	r24, 0x0A	; 10
    32b0:	91 e0       	ldi	r25, 0x01	; 1
    32b2:	99 d6       	rcall	.+3378   	; 0x3fe6 <CDC_Device_ReceiveByte>
    32b4:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <iByte>
    32b8:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <iByte>
    32bc:	82 33       	cpi	r24, 0x32	; 50
    32be:	d9 f1       	breq	.+118    	; 0x3336 <main+0x128>
    32c0:	90 f4       	brcc	.+36     	; 0x32e6 <main+0xd8>
    32c2:	80 33       	cpi	r24, 0x30	; 48
    32c4:	f1 f0       	breq	.+60     	; 0x3302 <main+0xf4>
    32c6:	81 33       	cpi	r24, 0x31	; 49
    32c8:	19 f7       	brne	.-58     	; 0x3290 <main+0x82>
    32ca:	81 ec       	ldi	r24, 0xC1	; 193
    32cc:	93 e0       	ldi	r25, 0x03	; 3
    32ce:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    32d2:	2f ed       	ldi	r18, 0xDF	; 223
    32d4:	32 e0       	ldi	r19, 0x02	; 2
    32d6:	41 e0       	ldi	r20, 0x01	; 1
    32d8:	64 e0       	ldi	r22, 0x04	; 4
    32da:	81 ec       	ldi	r24, 0xC1	; 193
    32dc:	93 e0       	ldi	r25, 0x03	; 3
    32de:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    32e2:	2a de       	rcall	.-940    	; 0x2f38 <removeAccount>
    32e4:	1b c0       	rjmp	.+54     	; 0x331c <main+0x10e>
    32e6:	83 33       	cpi	r24, 0x33	; 51
    32e8:	a1 f1       	breq	.+104    	; 0x3352 <main+0x144>
    32ea:	84 33       	cpi	r24, 0x34	; 52
    32ec:	89 f6       	brne	.-94     	; 0x3290 <main+0x82>
    32ee:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <flipState>
    32f2:	60 95       	com	r22
    32f4:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <flipState>
    32f8:	81 ec       	ldi	r24, 0xC1	; 193
    32fa:	93 e0       	ldi	r25, 0x03	; 3
    32fc:	0e 94 30 04 	call	0x860	; 0x860 <u8x8_SetFlipMode>
    3300:	0d c0       	rjmp	.+26     	; 0x331c <main+0x10e>
    3302:	81 ec       	ldi	r24, 0xC1	; 193
    3304:	93 e0       	ldi	r25, 0x03	; 3
    3306:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    330a:	2d ec       	ldi	r18, 0xCD	; 205
    330c:	32 e0       	ldi	r19, 0x02	; 2
    330e:	41 e0       	ldi	r20, 0x01	; 1
    3310:	64 e0       	ldi	r22, 0x04	; 4
    3312:	81 ec       	ldi	r24, 0xC1	; 193
    3314:	93 e0       	ldi	r25, 0x03	; 3
    3316:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    331a:	78 dc       	rcall	.-1808   	; 0x2c0c <addAccount>
    331c:	81 ec       	ldi	r24, 0xC1	; 193
    331e:	93 e0       	ldi	r25, 0x03	; 3
    3320:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    3324:	25 ed       	ldi	r18, 0xD5	; 213
    3326:	32 e0       	ldi	r19, 0x02	; 2
    3328:	41 e0       	ldi	r20, 0x01	; 1
    332a:	64 e0       	ldi	r22, 0x04	; 4
    332c:	81 ec       	ldi	r24, 0xC1	; 193
    332e:	93 e0       	ldi	r25, 0x03	; 3
    3330:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    3334:	ad cf       	rjmp	.-166    	; 0x3290 <main+0x82>
    3336:	81 ec       	ldi	r24, 0xC1	; 193
    3338:	93 e0       	ldi	r25, 0x03	; 3
    333a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    333e:	27 ee       	ldi	r18, 0xE7	; 231
    3340:	32 e0       	ldi	r19, 0x02	; 2
    3342:	41 e0       	ldi	r20, 0x01	; 1
    3344:	64 e0       	ldi	r22, 0x04	; 4
    3346:	81 ec       	ldi	r24, 0xC1	; 193
    3348:	93 e0       	ldi	r25, 0x03	; 3
    334a:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    334e:	5a de       	rcall	.-844    	; 0x3004 <Enroll>
    3350:	e5 cf       	rjmp	.-54     	; 0x331c <main+0x10e>
    3352:	81 ec       	ldi	r24, 0xC1	; 193
    3354:	93 e0       	ldi	r25, 0x03	; 3
    3356:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    335a:	2f ee       	ldi	r18, 0xEF	; 239
    335c:	32 e0       	ldi	r19, 0x02	; 2
    335e:	41 e0       	ldi	r20, 0x01	; 1
    3360:	64 e0       	ldi	r22, 0x04	; 4
    3362:	81 ec       	ldi	r24, 0xC1	; 193
    3364:	93 e0       	ldi	r25, 0x03	; 3
    3366:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    336a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <fps_DeleteAll>
    336e:	d6 cf       	rjmp	.-84     	; 0x331c <main+0x10e>
    3370:	81 30       	cpi	r24, 0x01	; 1
    3372:	59 f4       	brne	.+22     	; 0x338a <main+0x17c>
    3374:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <c_account>
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	01 96       	adiw	r24, 0x01	; 1
    337c:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <total_accounts>
    3380:	70 e0       	ldi	r23, 0x00	; 0
    3382:	43 d7       	rcall	.+3718   	; 0x420a <__divmodhi4>
    3384:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <c_account>
    3388:	0b c0       	rjmp	.+22     	; 0x33a0 <main+0x192>
    338a:	84 30       	cpi	r24, 0x04	; 4
    338c:	99 f4       	brne	.+38     	; 0x33b4 <main+0x1a6>
    338e:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <c_account>
    3392:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <total_accounts>
    3396:	81 11       	cpse	r24, r1
    3398:	0a c0       	rjmp	.+20     	; 0x33ae <main+0x1a0>
    339a:	61 50       	subi	r22, 0x01	; 1
    339c:	60 93 24 03 	sts	0x0324, r22	; 0x800324 <c_account>
    33a0:	8f e4       	ldi	r24, 0x4F	; 79
    33a2:	93 ec       	ldi	r25, 0xC3	; 195
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <main+0x196>
    33a8:	00 c0       	rjmp	.+0      	; 0x33aa <main+0x19c>
    33aa:	00 00       	nop
    33ac:	71 cf       	rjmp	.-286    	; 0x3290 <main+0x82>
    33ae:	81 50       	subi	r24, 0x01	; 1
    33b0:	99 0b       	sbc	r25, r25
    33b2:	e6 cf       	rjmp	.-52     	; 0x3380 <main+0x172>
    33b4:	83 30       	cpi	r24, 0x03	; 3
    33b6:	09 f0       	breq	.+2      	; 0x33ba <main+0x1ac>
    33b8:	6b cf       	rjmp	.-298    	; 0x3290 <main+0x82>
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	0e 94 de 06 	call	0xdbc	; 0xdbc <fps_SetLED>
    33c0:	81 ec       	ldi	r24, 0xC1	; 193
    33c2:	93 e0       	ldi	r25, 0x03	; 3
    33c4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <u8x8_ClearDisplay>
    33c8:	23 e6       	ldi	r18, 0x63	; 99
    33ca:	32 e0       	ldi	r19, 0x02	; 2
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	64 e0       	ldi	r22, 0x04	; 4
    33d0:	81 ec       	ldi	r24, 0xC1	; 193
    33d2:	93 e0       	ldi	r25, 0x03	; 3
    33d4:	0e 94 b1 03 	call	0x762	; 0x762 <u8x8_DrawString>
    33d8:	06 e9       	ldi	r16, 0x96	; 150
    33da:	10 e0       	ldi	r17, 0x00	; 0
    33dc:	d0 e0       	ldi	r29, 0x00	; 0
    33de:	0e 94 e5 06 	call	0xdca	; 0xdca <fps_IsPressFinger>
    33e2:	88 23       	and	r24, r24
    33e4:	e1 f1       	breq	.+120    	; 0x345e <main+0x250>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <fps_CaptureFinger>
    33ec:	0e 94 f2 06 	call	0xde4	; 0xde4 <fps_Identify1_N>
    33f0:	88 3c       	cpi	r24, 0xC8	; 200
    33f2:	90 f5       	brcc	.+100    	; 0x3458 <main+0x24a>
    33f4:	87 ef       	ldi	r24, 0xF7	; 247
    33f6:	92 e0       	ldi	r25, 0x02	; 2
    33f8:	0e 94 50 10 	call	0x20a0	; 0x20a0 <ble_print>
    33fc:	8e ed       	ldi	r24, 0xDE	; 222
    33fe:	93 e0       	ldi	r25, 0x03	; 3
    3400:	0e 94 57 10 	call	0x20ae	; 0x20ae <ble_println_array>
    3404:	9f ef       	ldi	r25, 0xFF	; 255
    3406:	21 ee       	ldi	r18, 0xE1	; 225
    3408:	84 e0       	ldi	r24, 0x04	; 4
    340a:	91 50       	subi	r25, 0x01	; 1
    340c:	20 40       	sbci	r18, 0x00	; 0
    340e:	80 40       	sbci	r24, 0x00	; 0
    3410:	e1 f7       	brne	.-8      	; 0x340a <main+0x1fc>
    3412:	00 c0       	rjmp	.+0      	; 0x3414 <main+0x206>
    3414:	00 00       	nop
    3416:	87 ef       	ldi	r24, 0xF7	; 247
    3418:	92 e0       	ldi	r25, 0x02	; 2
    341a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <ble_print>
    341e:	87 e0       	ldi	r24, 0x07	; 7
    3420:	93 e0       	ldi	r25, 0x03	; 3
    3422:	0e 94 58 10 	call	0x20b0	; 0x20b0 <ble_println_str>
    3426:	0e 94 5e 10 	call	0x20bc	; 0x20bc <ble_waitForOK>
    342a:	87 ef       	ldi	r24, 0xF7	; 247
    342c:	92 e0       	ldi	r25, 0x02	; 2
    342e:	0e 94 50 10 	call	0x20a0	; 0x20a0 <ble_print>
    3432:	8e e5       	ldi	r24, 0x5E	; 94
    3434:	94 e0       	ldi	r25, 0x04	; 4
    3436:	0e 94 57 10 	call	0x20ae	; 0x20ae <ble_println_array>
    343a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <ble_waitForOK>
    343e:	87 ef       	ldi	r24, 0xF7	; 247
    3440:	92 e0       	ldi	r25, 0x02	; 2
    3442:	0e 94 50 10 	call	0x20a0	; 0x20a0 <ble_print>
    3446:	89 e0       	ldi	r24, 0x09	; 9
    3448:	93 e0       	ldi	r25, 0x03	; 3
    344a:	0e 94 58 10 	call	0x20b0	; 0x20b0 <ble_println_str>
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	0e 94 de 06 	call	0xdbc	; 0xdbc <fps_SetLED>
    3454:	a9 de       	rcall	.-686    	; 0x31a8 <updateScreen>
    3456:	1c cf       	rjmp	.-456    	; 0x3290 <main+0x82>
    3458:	df 5f       	subi	r29, 0xFF	; 255
    345a:	db 30       	cpi	r29, 0x0B	; 11
    345c:	c0 f7       	brcc	.-16     	; 0x344e <main+0x240>
    345e:	01 50       	subi	r16, 0x01	; 1
    3460:	11 09       	sbc	r17, r1
    3462:	09 f0       	breq	.+2      	; 0x3466 <main+0x258>
    3464:	bc cf       	rjmp	.-136    	; 0x33de <main+0x1d0>
    3466:	f3 cf       	rjmp	.-26     	; 0x344e <main+0x240>

00003468 <EVENT_USB_Device_Connect>:
    3468:	08 95       	ret

0000346a <EVENT_USB_Device_Disconnect>:
    346a:	08 95       	ret

0000346c <EVENT_USB_Device_ConfigurationChanged>:
    346c:	8a e0       	ldi	r24, 0x0A	; 10
    346e:	91 e0       	ldi	r25, 0x01	; 1
    3470:	e9 c4       	rjmp	.+2514   	; 0x3e44 <CDC_Device_ConfigureEndpoints>

00003472 <EVENT_USB_Device_ControlRequest>:
    3472:	8a e0       	ldi	r24, 0x0A	; 10
    3474:	91 e0       	ldi	r25, 0x01	; 1
    3476:	0a c6       	rjmp	.+3092   	; 0x408c <CDC_Device_ProcessControlRequest>

00003478 <EVENT_CDC_Device_ControLineStateChanged>:
    3478:	08 95       	ret

0000347a <Serial_SendData>:
	}
}

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
    347a:	68 0f       	add	r22, r24
    347c:	79 1f       	adc	r23, r25
	uint8_t* CurrByte = (uint8_t*)Buffer;

	while (Length--)
    347e:	86 17       	cp	r24, r22
    3480:	97 07       	cpc	r25, r23
    3482:	09 f4       	brne	.+2      	; 0x3486 <Serial_SendData+0xc>
	  Serial_SendByte(*(CurrByte++));
}
    3484:	08 95       	ret
	  Serial_SendByte(*(CurrByte++));
    3486:	fc 01       	movw	r30, r24
    3488:	21 91       	ld	r18, Z+
    348a:	cf 01       	movw	r24, r30
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    348c:	30 91 c8 00 	lds	r19, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    3490:	35 ff       	sbrs	r19, 5
    3492:	fc cf       	rjmp	.-8      	; 0x348c <Serial_SendData+0x12>
				UDR1 = DataByte;
    3494:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    3498:	f2 cf       	rjmp	.-28     	; 0x347e <Serial_SendData+0x4>

0000349a <TWI_StartTransmission>:
	for (;;)
	{
		bool     BusCaptured = false;
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    349a:	94 ea       	ldi	r25, 0xA4	; 164
    349c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		TimeoutRemaining = (TimeoutMS * 100);
    34a0:	94 e6       	ldi	r25, 0x64	; 100
    34a2:	69 9f       	mul	r22, r25
    34a4:	b0 01       	movw	r22, r0
    34a6:	11 24       	eor	r1, r1
    34a8:	9b 01       	movw	r18, r22
		bool     BusCaptured = false;
    34aa:	40 e0       	ldi	r20, 0x00	; 0
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    34ac:	54 ea       	ldi	r21, 0xA4	; 164
		while (TimeoutRemaining && !(BusCaptured))
    34ae:	21 15       	cp	r18, r1
    34b0:	31 05       	cpc	r19, r1
    34b2:	b1 f1       	breq	.+108    	; 0x3520 <TWI_StartTransmission+0x86>
    34b4:	44 23       	and	r20, r20
    34b6:	31 f0       	breq	.+12     	; 0x34c4 <TWI_StartTransmission+0x2a>
		{
			TWCR = (1 << TWEN);
			return TWI_ERROR_BusCaptureTimeout;
		}

		TWDR = SlaveAddress;
    34b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR = ((1 << TWINT) | (1 << TWEN));
    34bc:	84 e8       	ldi	r24, 0x84	; 132
    34be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining)
    34c2:	27 c0       	rjmp	.+78     	; 0x3512 <TWI_StartTransmission+0x78>
			if (TWCR & (1 << TWINT))
    34c4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    34c8:	97 ff       	sbrs	r25, 7
    34ca:	0a c0       	rjmp	.+20     	; 0x34e0 <TWI_StartTransmission+0x46>
				switch (TWSR & TW_STATUS_MASK)
    34cc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    34d0:	98 7f       	andi	r25, 0xF8	; 248
    34d2:	90 31       	cpi	r25, 0x10	; 16
    34d4:	21 f0       	breq	.+8      	; 0x34de <TWI_StartTransmission+0x44>
    34d6:	98 33       	cpi	r25, 0x38	; 56
    34d8:	51 f0       	breq	.+20     	; 0x34ee <TWI_StartTransmission+0x54>
    34da:	98 30       	cpi	r25, 0x08	; 8
    34dc:	59 f4       	brne	.+22     	; 0x34f4 <TWI_StartTransmission+0x5a>
						BusCaptured = true;
    34de:	41 e0       	ldi	r20, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34e0:	9a e1       	ldi	r25, 0x1A	; 26
    34e2:	9a 95       	dec	r25
    34e4:	f1 f7       	brne	.-4      	; 0x34e2 <TWI_StartTransmission+0x48>
    34e6:	00 c0       	rjmp	.+0      	; 0x34e8 <TWI_StartTransmission+0x4e>
			TimeoutRemaining--;
    34e8:	21 50       	subi	r18, 0x01	; 1
    34ea:	31 09       	sbc	r19, r1
    34ec:	e0 cf       	rjmp	.-64     	; 0x34ae <TWI_StartTransmission+0x14>
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    34ee:	50 93 bc 00 	sts	0x00BC, r21	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						continue;
    34f2:	dd cf       	rjmp	.-70     	; 0x34ae <TWI_StartTransmission+0x14>
						TWCR = (1 << TWEN);
    34f4:	84 e0       	ldi	r24, 0x04	; 4
    34f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						return TWI_ERROR_BusFault;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	08 95       	ret
		{
			if (TWCR & (1 << TWINT))
    34fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3502:	87 fd       	sbrc	r24, 7
    3504:	12 c0       	rjmp	.+36     	; 0x352a <TWI_StartTransmission+0x90>
    3506:	8a e1       	ldi	r24, 0x1A	; 26
    3508:	8a 95       	dec	r24
    350a:	f1 f7       	brne	.-4      	; 0x3508 <TWI_StartTransmission+0x6e>
    350c:	00 c0       	rjmp	.+0      	; 0x350e <TWI_StartTransmission+0x74>
			  break;

			_delay_us(10);
			TimeoutRemaining--;
    350e:	61 50       	subi	r22, 0x01	; 1
    3510:	71 09       	sbc	r23, r1
		while (TimeoutRemaining)
    3512:	61 15       	cp	r22, r1
    3514:	71 05       	cpc	r23, r1
    3516:	99 f7       	brne	.-26     	; 0x34fe <TWI_StartTransmission+0x64>
		}

		if (!(TimeoutRemaining))
		  return TWI_ERROR_SlaveResponseTimeout;
    3518:	83 e0       	ldi	r24, 0x03	; 3
    351a:	08 95       	ret

		switch (TWSR & TW_STATUS_MASK)
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	08 95       	ret
			TWCR = (1 << TWEN);
    3520:	84 e0       	ldi	r24, 0x04	; 4
    3522:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			return TWI_ERROR_BusCaptureTimeout;
    3526:	82 e0       	ldi	r24, 0x02	; 2
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
				return TWI_ERROR_SlaveNotReady;
		}
	}
}
    3528:	08 95       	ret
		switch (TWSR & TW_STATUS_MASK)
    352a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    352e:	88 7f       	andi	r24, 0xF8	; 248
    3530:	88 31       	cpi	r24, 0x18	; 24
    3532:	a1 f3       	breq	.-24     	; 0x351c <TWI_StartTransmission+0x82>
    3534:	80 34       	cpi	r24, 0x40	; 64
    3536:	91 f3       	breq	.-28     	; 0x351c <TWI_StartTransmission+0x82>
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    3538:	84 e9       	ldi	r24, 0x94	; 148
    353a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				return TWI_ERROR_SlaveNotReady;
    353e:	84 e0       	ldi	r24, 0x04	; 4
    3540:	08 95       	ret

00003542 <TWI_SendByte>:

bool TWI_SendByte(const uint8_t Byte)
{
	TWDR = Byte;
    3542:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = ((1 << TWINT) | (1 << TWEN));
    3546:	84 e8       	ldi	r24, 0x84	; 132
    3548:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
    354c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3550:	87 ff       	sbrs	r24, 7
    3552:	fc cf       	rjmp	.-8      	; 0x354c <TWI_SendByte+0xa>

	return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    3554:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3558:	98 7f       	andi	r25, 0xF8	; 248
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	98 32       	cpi	r25, 0x28	; 40
    355e:	09 f0       	breq	.+2      	; 0x3562 <TWI_SendByte+0x20>
    3560:	80 e0       	ldi	r24, 0x00	; 0
}
    3562:	08 95       	ret

00003564 <TWI_ReceiveByte>:

bool TWI_ReceiveByte(uint8_t* const Byte,
					 const bool LastByte)
{
    3564:	fc 01       	movw	r30, r24
	uint8_t TWCRMask;

	if (LastByte)
	  TWCRMask = ((1 << TWINT) | (1 << TWEN));
	else
	  TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    3566:	94 ec       	ldi	r25, 0xC4	; 196
	if (LastByte)
    3568:	61 11       	cpse	r22, r1
	  TWCRMask = ((1 << TWINT) | (1 << TWEN));
    356a:	94 e8       	ldi	r25, 0x84	; 132

	TWCR = TWCRMask;
    356c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
    3570:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3574:	87 ff       	sbrs	r24, 7
    3576:	fc cf       	rjmp	.-8      	; 0x3570 <TWI_ReceiveByte+0xc>
	*Byte = TWDR;
    3578:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    357c:	80 83       	st	Z, r24

	uint8_t Status = (TWSR & TW_STATUS_MASK);
    357e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3582:	98 7f       	andi	r25, 0xF8	; 248

	return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	66 23       	and	r22, r22
    3588:	21 f0       	breq	.+8      	; 0x3592 <TWI_ReceiveByte+0x2e>
    358a:	98 35       	cpi	r25, 0x58	; 88
    358c:	21 f0       	breq	.+8      	; 0x3596 <TWI_ReceiveByte+0x32>
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	02 c0       	rjmp	.+4      	; 0x3596 <TWI_ReceiveByte+0x32>
    3592:	90 35       	cpi	r25, 0x50	; 80
    3594:	e1 f7       	brne	.-8      	; 0x358e <TWI_ReceiveByte+0x2a>
}
    3596:	08 95       	ret

00003598 <Endpoint_Write_Control_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3598:	fc 01       	movw	r30, r24
    359a:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <USB_ControlRequest+0x6>
    359e:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <USB_ControlRequest+0x7>
    35a2:	86 17       	cp	r24, r22
    35a4:	97 07       	cpc	r25, r23
    35a6:	a0 f0       	brcs	.+40     	; 0x35d0 <Endpoint_Write_Control_Stream_LE+0x38>
    35a8:	61 15       	cp	r22, r1
    35aa:	71 05       	cpc	r23, r1
    35ac:	29 f4       	brne	.+10     	; 0x35b8 <Endpoint_Write_Control_Stream_LE+0x20>
    35ae:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35b2:	9e 77       	andi	r25, 0x7E	; 126
    35b4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	61 15       	cp	r22, r1
    35bc:	71 05       	cpc	r23, r1
    35be:	51 f4       	brne	.+20     	; 0x35d4 <Endpoint_Write_Control_Stream_LE+0x3c>
    35c0:	91 11       	cpse	r25, r1
    35c2:	08 c0       	rjmp	.+16     	; 0x35d4 <Endpoint_Write_Control_Stream_LE+0x3c>
    35c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35c8:	82 ff       	sbrs	r24, 2
    35ca:	35 c0       	rjmp	.+106    	; 0x3636 <Endpoint_Write_Control_Stream_LE+0x9e>
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	08 95       	ret
    35d0:	bc 01       	movw	r22, r24
    35d2:	f2 cf       	rjmp	.-28     	; 0x35b8 <Endpoint_Write_Control_Stream_LE+0x20>
    35d4:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <USB_DeviceState>
    35d8:	88 23       	and	r24, r24
    35da:	c9 f1       	breq	.+114    	; 0x364e <Endpoint_Write_Control_Stream_LE+0xb6>
    35dc:	85 30       	cpi	r24, 0x05	; 5
    35de:	c9 f1       	breq	.+114    	; 0x3652 <Endpoint_Write_Control_Stream_LE+0xba>
    35e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35e4:	83 fd       	sbrc	r24, 3
    35e6:	31 c0       	rjmp	.+98     	; 0x364a <Endpoint_Write_Control_Stream_LE+0xb2>
    35e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35ec:	82 fd       	sbrc	r24, 2
    35ee:	ea cf       	rjmp	.-44     	; 0x35c4 <Endpoint_Write_Control_Stream_LE+0x2c>
    35f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35f4:	80 ff       	sbrs	r24, 0
    35f6:	e1 cf       	rjmp	.-62     	; 0x35ba <Endpoint_Write_Control_Stream_LE+0x22>
    35f8:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    35fc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3600:	32 2f       	mov	r19, r18
    3602:	28 2f       	mov	r18, r24
    3604:	61 15       	cp	r22, r1
    3606:	71 05       	cpc	r23, r1
    3608:	19 f0       	breq	.+6      	; 0x3610 <Endpoint_Write_Control_Stream_LE+0x78>
    360a:	28 30       	cpi	r18, 0x08	; 8
    360c:	31 05       	cpc	r19, r1
    360e:	58 f0       	brcs	.+22     	; 0x3626 <Endpoint_Write_Control_Stream_LE+0x8e>
    3610:	91 e0       	ldi	r25, 0x01	; 1
    3612:	28 30       	cpi	r18, 0x08	; 8
    3614:	31 05       	cpc	r19, r1
    3616:	09 f0       	breq	.+2      	; 0x361a <Endpoint_Write_Control_Stream_LE+0x82>
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    361e:	2e 77       	andi	r18, 0x7E	; 126
    3620:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3624:	ca cf       	rjmp	.-108    	; 0x35ba <Endpoint_Write_Control_Stream_LE+0x22>
    3626:	81 91       	ld	r24, Z+
    3628:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    362c:	61 50       	subi	r22, 0x01	; 1
    362e:	71 09       	sbc	r23, r1
    3630:	2f 5f       	subi	r18, 0xFF	; 255
    3632:	3f 4f       	sbci	r19, 0xFF	; 255
    3634:	e7 cf       	rjmp	.-50     	; 0x3604 <Endpoint_Write_Control_Stream_LE+0x6c>
    3636:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <USB_DeviceState>
    363a:	88 23       	and	r24, r24
    363c:	41 f0       	breq	.+16     	; 0x364e <Endpoint_Write_Control_Stream_LE+0xb6>
    363e:	85 30       	cpi	r24, 0x05	; 5
    3640:	41 f0       	breq	.+16     	; 0x3652 <Endpoint_Write_Control_Stream_LE+0xba>
    3642:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3646:	83 ff       	sbrs	r24, 3
    3648:	bd cf       	rjmp	.-134    	; 0x35c4 <Endpoint_Write_Control_Stream_LE+0x2c>
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	08 95       	ret
    364e:	82 e0       	ldi	r24, 0x02	; 2
    3650:	08 95       	ret
    3652:	83 e0       	ldi	r24, 0x03	; 3
    3654:	08 95       	ret

00003656 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3656:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3658:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <USB_ControlRequest+0x6>
    365c:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <USB_ControlRequest+0x7>
    3660:	86 17       	cp	r24, r22
    3662:	97 07       	cpc	r25, r23
    3664:	a0 f0       	brcs	.+40     	; 0x368e <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3666:	61 15       	cp	r22, r1
    3668:	71 05       	cpc	r23, r1
    366a:	29 f4       	brne	.+10     	; 0x3676 <Endpoint_Write_Control_PStream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    366c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3670:	8e 77       	andi	r24, 0x7E	; 126
    3672:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3676:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3678:	61 15       	cp	r22, r1
    367a:	71 05       	cpc	r23, r1
    367c:	51 f4       	brne	.+20     	; 0x3692 <Endpoint_Write_Control_PStream_LE+0x3c>
    367e:	91 11       	cpse	r25, r1
    3680:	08 c0       	rjmp	.+16     	; 0x3692 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3682:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3686:	82 ff       	sbrs	r24, 2
    3688:	36 c0       	rjmp	.+108    	; 0x36f6 <Endpoint_Write_Control_PStream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	08 95       	ret
    368e:	bc 01       	movw	r22, r24
    3690:	f2 cf       	rjmp	.-28     	; 0x3676 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3692:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3696:	88 23       	and	r24, r24
    3698:	d1 f1       	breq	.+116    	; 0x370e <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    369a:	85 30       	cpi	r24, 0x05	; 5
    369c:	d1 f1       	breq	.+116    	; 0x3712 <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    369e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    36a2:	83 fd       	sbrc	r24, 3
    36a4:	32 c0       	rjmp	.+100    	; 0x370a <Endpoint_Write_Control_PStream_LE+0xb4>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    36a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    36aa:	82 fd       	sbrc	r24, 2
    36ac:	ea cf       	rjmp	.-44     	; 0x3682 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    36ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    36b2:	80 ff       	sbrs	r24, 0
    36b4:	e1 cf       	rjmp	.-62     	; 0x3678 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    36b6:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    36ba:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    36be:	32 2f       	mov	r19, r18
    36c0:	28 2f       	mov	r18, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    36c2:	61 15       	cp	r22, r1
    36c4:	71 05       	cpc	r23, r1
    36c6:	19 f0       	breq	.+6      	; 0x36ce <Endpoint_Write_Control_PStream_LE+0x78>
    36c8:	28 30       	cpi	r18, 0x08	; 8
    36ca:	31 05       	cpc	r19, r1
    36cc:	58 f0       	brcs	.+22     	; 0x36e4 <Endpoint_Write_Control_PStream_LE+0x8e>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    36ce:	91 e0       	ldi	r25, 0x01	; 1
    36d0:	28 30       	cpi	r18, 0x08	; 8
    36d2:	31 05       	cpc	r19, r1
    36d4:	09 f0       	breq	.+2      	; 0x36d8 <Endpoint_Write_Control_PStream_LE+0x82>
    36d6:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    36d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    36dc:	8e 77       	andi	r24, 0x7E	; 126
    36de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    36e2:	ca cf       	rjmp	.-108    	; 0x3678 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    36e4:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    36e6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    36ea:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    36ec:	61 50       	subi	r22, 0x01	; 1
    36ee:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    36f0:	2f 5f       	subi	r18, 0xFF	; 255
    36f2:	3f 4f       	sbci	r19, 0xFF	; 255
    36f4:	e6 cf       	rjmp	.-52     	; 0x36c2 <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    36f6:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    36fa:	88 23       	and	r24, r24
    36fc:	41 f0       	breq	.+16     	; 0x370e <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    36fe:	85 30       	cpi	r24, 0x05	; 5
    3700:	41 f0       	breq	.+16     	; 0x3712 <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3702:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    3706:	83 ff       	sbrs	r24, 3
    3708:	bc cf       	rjmp	.-136    	; 0x3682 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    370a:	81 e0       	ldi	r24, 0x01	; 1
}
    370c:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    370e:	82 e0       	ldi	r24, 0x02	; 2
    3710:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3712:	83 e0       	ldi	r24, 0x03	; 3
    3714:	08 95       	ret

00003716 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    3716:	98 2f       	mov	r25, r24
    3718:	97 30       	cpi	r25, 0x07	; 7
    371a:	28 f0       	brcs	.+10     	; 0x3726 <Endpoint_ConfigureEndpoint_Prv+0x10>
    371c:	8f 70       	andi	r24, 0x0F	; 15
    371e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	08 95       	ret
    3726:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    372a:	24 2f       	mov	r18, r20
    372c:	76 2f       	mov	r23, r22
    372e:	50 e0       	ldi	r21, 0x00	; 0
    3730:	98 17       	cp	r25, r24
    3732:	31 f0       	breq	.+12     	; 0x3740 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    3734:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    3738:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    373c:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    3740:	21 fd       	sbrc	r18, 1
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <Endpoint_ConfigureEndpoint_Prv+0x32>
    3744:	9f 5f       	subi	r25, 0xFF	; 255
    3746:	e8 cf       	rjmp	.-48     	; 0x3718 <Endpoint_ConfigureEndpoint_Prv+0x2>
    3748:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    374c:	3e 7f       	andi	r19, 0xFE	; 254
    374e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3752:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    3756:	3d 7f       	andi	r19, 0xFD	; 253
    3758:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    375c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3760:	31 60       	ori	r19, 0x01	; 1
    3762:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3766:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    376a:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    376e:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    3772:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    3776:	27 fd       	sbrc	r18, 7
    3778:	e5 cf       	rjmp	.-54     	; 0x3744 <Endpoint_ConfigureEndpoint_Prv+0x2e>
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	08 95       	ret

0000377e <Endpoint_ConfigureEndpointTable>:
    377e:	0f 93       	push	r16
    3780:	1f 93       	push	r17
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	06 2f       	mov	r16, r22
    3788:	ec 01       	movw	r28, r24
    378a:	10 e0       	ldi	r17, 0x00	; 0
    378c:	10 13       	cpse	r17, r16
    378e:	02 c0       	rjmp	.+4      	; 0x3794 <Endpoint_ConfigureEndpointTable+0x16>
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	0f c0       	rjmp	.+30     	; 0x37b2 <Endpoint_ConfigureEndpointTable+0x34>
    3794:	98 81       	ld	r25, Y
    3796:	91 11       	cpse	r25, r1
    3798:	03 c0       	rjmp	.+6      	; 0x37a0 <Endpoint_ConfigureEndpointTable+0x22>
    379a:	1f 5f       	subi	r17, 0xFF	; 255
    379c:	25 96       	adiw	r28, 0x05	; 5
    379e:	f6 cf       	rjmp	.-20     	; 0x378c <Endpoint_ConfigureEndpointTable+0xe>
    37a0:	2c 81       	ldd	r18, Y+4	; 0x04
    37a2:	a9 81       	ldd	r26, Y+1	; 0x01
    37a4:	ba 81       	ldd	r27, Y+2	; 0x02
    37a6:	6b 81       	ldd	r22, Y+3	; 0x03
    37a8:	89 2f       	mov	r24, r25
    37aa:	8f 70       	andi	r24, 0x0F	; 15
    37ac:	87 30       	cpi	r24, 0x07	; 7
    37ae:	30 f0       	brcs	.+12     	; 0x37bc <Endpoint_ConfigureEndpointTable+0x3e>
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	df 91       	pop	r29
    37b4:	cf 91       	pop	r28
    37b6:	1f 91       	pop	r17
    37b8:	0f 91       	pop	r16
    37ba:	08 95       	ret
    37bc:	42 e0       	ldi	r20, 0x02	; 2
    37be:	22 30       	cpi	r18, 0x02	; 2
    37c0:	08 f0       	brcs	.+2      	; 0x37c4 <Endpoint_ConfigureEndpointTable+0x46>
    37c2:	46 e0       	ldi	r20, 0x06	; 6
    37c4:	e8 e0       	ldi	r30, 0x08	; 8
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	ea 17       	cp	r30, r26
    37cc:	fb 07       	cpc	r31, r27
    37ce:	78 f0       	brcs	.+30     	; 0x37ee <Endpoint_ConfigureEndpointTable+0x70>
    37d0:	22 95       	swap	r18
    37d2:	20 7f       	andi	r18, 0xF0	; 240
    37d4:	42 2b       	or	r20, r18
    37d6:	20 e4       	ldi	r18, 0x40	; 64
    37d8:	62 9f       	mul	r22, r18
    37da:	b0 01       	movw	r22, r0
    37dc:	11 24       	eor	r1, r1
    37de:	99 1f       	adc	r25, r25
    37e0:	99 27       	eor	r25, r25
    37e2:	99 1f       	adc	r25, r25
    37e4:	69 2b       	or	r22, r25
    37e6:	97 df       	rcall	.-210    	; 0x3716 <Endpoint_ConfigureEndpoint_Prv>
    37e8:	81 11       	cpse	r24, r1
    37ea:	d7 cf       	rjmp	.-82     	; 0x379a <Endpoint_ConfigureEndpointTable+0x1c>
    37ec:	e1 cf       	rjmp	.-62     	; 0x37b0 <Endpoint_ConfigureEndpointTable+0x32>
    37ee:	2f 5f       	subi	r18, 0xFF	; 255
    37f0:	ee 0f       	add	r30, r30
    37f2:	ff 1f       	adc	r31, r31
    37f4:	ea cf       	rjmp	.-44     	; 0x37ca <Endpoint_ConfigureEndpointTable+0x4c>

000037f6 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    37f6:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <USB_ControlRequest>
    37fa:	87 ff       	sbrs	r24, 7
    37fc:	13 c0       	rjmp	.+38     	; 0x3824 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    37fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    3802:	82 ff       	sbrs	r24, 2
    3804:	06 c0       	rjmp	.+12     	; 0x3812 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3806:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    380a:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    380c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3810:	04 c0       	rjmp	.+8      	; 0x381a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3812:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <USB_DeviceState>
    3816:	81 11       	cpse	r24, r1
    3818:	f2 cf       	rjmp	.-28     	; 0x37fe <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    381a:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    381c:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <USB_DeviceState>
    3820:	88 23       	and	r24, r24
    3822:	d9 f3       	breq	.-10     	; 0x381a <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3824:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    3828:	80 ff       	sbrs	r24, 0
    382a:	f8 cf       	rjmp	.-16     	; 0x381c <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    382c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3830:	8e 77       	andi	r24, 0x7E	; 126
    3832:	ec cf       	rjmp	.-40     	; 0x380c <Endpoint_ClearStatusStage+0x16>

00003834 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3834:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    3838:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    383c:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    383e:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    3842:	90 ff       	sbrs	r25, 0
    3844:	06 c0       	rjmp	.+12     	; 0x3852 <Endpoint_WaitUntilReady+0x1e>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3846:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    384a:	90 ff       	sbrs	r25, 0
    384c:	06 c0       	rjmp	.+12     	; 0x385a <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3852:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    3856:	92 fd       	sbrc	r25, 2
    3858:	fa cf       	rjmp	.-12     	; 0x384e <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    385a:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    385e:	99 23       	and	r25, r25
    3860:	91 f0       	breq	.+36     	; 0x3886 <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3862:	95 30       	cpi	r25, 0x05	; 5
    3864:	91 f0       	breq	.+36     	; 0x388a <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3866:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    386a:	95 fd       	sbrc	r25, 5
    386c:	10 c0       	rjmp	.+32     	; 0x388e <Endpoint_WaitUntilReady+0x5a>
    386e:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    3872:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    3876:	24 17       	cp	r18, r20
    3878:	35 07       	cpc	r19, r21
    387a:	09 f3       	breq	.-62     	; 0x383e <Endpoint_WaitUntilReady+0xa>
    387c:	81 50       	subi	r24, 0x01	; 1
    387e:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    3880:	f1 f6       	brne	.-68     	; 0x383e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    3882:	84 e0       	ldi	r24, 0x04	; 4
    3884:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    3886:	82 e0       	ldi	r24, 0x02	; 2
    3888:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    388a:	83 e0       	ldi	r24, 0x03	; 3
    388c:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    388e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    3890:	08 95       	ret

00003892 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    3892:	0f 93       	push	r16
    3894:	1f 93       	push	r17
    3896:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    3898:	df 93       	push	r29
    389a:	4b d0       	rcall	.+150    	; 0x3932 <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    389c:	52 d0       	rcall	.+164    	; 0x3942 <USB_INT_ClearAllInterrupts>
    389e:	c8 ed       	ldi	r28, 0xD8	; 216
    38a0:	d0 e0       	ldi	r29, 0x00	; 0
    38a2:	88 81       	ld	r24, Y
    38a4:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
    38a6:	88 83       	st	Y, r24
    38a8:	88 81       	ld	r24, Y
    38aa:	80 68       	ori	r24, 0x80	; 128
				USBCON &= ~(1 << FRZCLK);
    38ac:	88 83       	st	Y, r24
    38ae:	88 81       	ld	r24, Y
    38b0:	8f 7d       	andi	r24, 0xDF	; 223
				PLLCSR = 0;
    38b2:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    38b4:	19 bc       	out	0x29, r1	; 41
    38b6:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    38ba:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    38be:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    38c2:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    38c6:	00 ee       	ldi	r16, 0xE0	; 224
    38c8:	10 e0       	ldi	r17, 0x00	; 0
    38ca:	f8 01       	movw	r30, r16
    38cc:	80 81       	ld	r24, Z
    38ce:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    38d0:	80 83       	st	Z, r24
    38d2:	88 81       	ld	r24, Y
    38d4:	81 60       	ori	r24, 0x01	; 1
				return Endpoint_ConfigureEndpoint_Prv(Number,
    38d6:	88 83       	st	Y, r24
    38d8:	42 e0       	ldi	r20, 0x02	; 2
    38da:	60 e0       	ldi	r22, 0x00	; 0
    38dc:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    38de:	1b df       	rcall	.-458    	; 0x3716 <Endpoint_ConfigureEndpoint_Prv>
    38e0:	e1 ee       	ldi	r30, 0xE1	; 225
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	80 81       	ld	r24, Z
    38e6:	8e 7f       	andi	r24, 0xFE	; 254
						UDIEN  |= (1 << SUSPE);
    38e8:	80 83       	st	Z, r24
    38ea:	e2 ee       	ldi	r30, 0xE2	; 226
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	81 60       	ori	r24, 0x01	; 1
						UDIEN  |= (1 << EORSTE);
    38f2:	80 83       	st	Z, r24
    38f4:	80 81       	ld	r24, Z
    38f6:	88 60       	ori	r24, 0x08	; 8
				UDCON  &= ~(1 << DETACH);
    38f8:	80 83       	st	Z, r24
    38fa:	f8 01       	movw	r30, r16
    38fc:	80 81       	ld	r24, Z
    38fe:	8e 7f       	andi	r24, 0xFE	; 254
				USBCON |=  (1 << OTGPADE);
    3900:	80 83       	st	Z, r24
    3902:	88 81       	ld	r24, Y
    3904:	80 61       	ori	r24, 0x10	; 16
}
    3906:	88 83       	st	Y, r24
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	1f 91       	pop	r17
    390e:	0f 91       	pop	r16
    3910:	08 95       	ret

00003912 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    3912:	e8 ed       	ldi	r30, 0xD8	; 216
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	8f 7e       	andi	r24, 0xEF	; 239
    391a:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    391c:	e7 ed       	ldi	r30, 0xD7	; 215
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	81 60       	ori	r24, 0x01	; 1
    3924:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    3926:	84 e0       	ldi	r24, 0x04	; 4
    3928:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <USB_IsInitialized>
    3930:	b0 cf       	rjmp	.-160    	; 0x3892 <USB_ResetInterface>

00003932 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    3932:	e8 ed       	ldi	r30, 0xD8	; 216
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	80 81       	ld	r24, Z
    3938:	8e 7f       	andi	r24, 0xFE	; 254
    393a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    393c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    3940:	08 95       	ret

00003942 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    3942:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3946:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    394a:	08 95       	ret

0000394c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    394c:	1f 92       	push	r1
    394e:	0f 92       	push	r0
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	0f 92       	push	r0
    3954:	11 24       	eor	r1, r1
    3956:	2f 93       	push	r18
    3958:	3f 93       	push	r19
    395a:	4f 93       	push	r20
    395c:	5f 93       	push	r21
    395e:	6f 93       	push	r22
    3960:	7f 93       	push	r23
    3962:	8f 93       	push	r24
    3964:	9f 93       	push	r25
    3966:	af 93       	push	r26
    3968:	bf 93       	push	r27
    396a:	ef 93       	push	r30
    396c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    396e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3972:	82 ff       	sbrs	r24, 2
    3974:	0a c0       	rjmp	.+20     	; 0x398a <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
    3976:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    397a:	82 ff       	sbrs	r24, 2
    397c:	06 c0       	rjmp	.+12     	; 0x398a <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
    397e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3982:	8b 7f       	andi	r24, 0xFB	; 251
    3984:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						return (USBINT & (1 << VBUSTI));
    3988:	41 d2       	rcall	.+1154   	; 0x3e0c <USB_Event_Stub>
    398a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    398e:	80 ff       	sbrs	r24, 0
						return (USBCON & (1 << VBUSTE));
    3990:	17 c0       	rjmp	.+46     	; 0x39c0 <__vector_10+0x74>
    3992:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    3996:	80 ff       	sbrs	r24, 0
						USBINT &= ~(1 << VBUSTI);
    3998:	13 c0       	rjmp	.+38     	; 0x39c0 <__vector_10+0x74>
    399a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    399e:	8e 7f       	andi	r24, 0xFE	; 254
    39a0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    39a4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    39a8:	19 bc       	out	0x29, r1	; 41
    39aa:	80 ff       	sbrs	r24, 0
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    39ac:	8c c0       	rjmp	.+280    	; 0x3ac6 <__vector_10+0x17a>
    39ae:	82 e0       	ldi	r24, 0x02	; 2
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    39b0:	89 bd       	out	0x29, r24	; 41
    39b2:	09 b4       	in	r0, 0x29	; 41
    39b4:	00 fe       	sbrs	r0, 0
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    39b6:	fd cf       	rjmp	.-6      	; 0x39b2 <__vector_10+0x66>
    39b8:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
    39ba:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <USB_DeviceState>
						return (UDINT  & (1 << SUSPI));
    39be:	54 dd       	rcall	.-1368   	; 0x3468 <EVENT_USB_Device_Connect>
    39c0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    39c4:	80 ff       	sbrs	r24, 0
						return (UDIEN  & (1 << SUSPE));
    39c6:	18 c0       	rjmp	.+48     	; 0x39f8 <__vector_10+0xac>
    39c8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    39cc:	80 ff       	sbrs	r24, 0
						UDIEN  &= ~(1 << SUSPE);
    39ce:	14 c0       	rjmp	.+40     	; 0x39f8 <__vector_10+0xac>
    39d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    39d4:	8e 7f       	andi	r24, 0xFE	; 254
    39d6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    39da:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    39de:	80 61       	ori	r24, 0x10	; 16
    39e0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    39e4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    39e8:	80 62       	ori	r24, 0x20	; 32
    39ea:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    39ee:	19 bc       	out	0x29, r1	; 41
    39f0:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    39f2:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <USB_DeviceState>
						return (UDINT  & (1 << WAKEUPI));
    39f6:	0a d2       	rcall	.+1044   	; 0x3e0c <USB_Event_Stub>
    39f8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    39fc:	84 ff       	sbrs	r24, 4
						return (UDIEN  & (1 << WAKEUPE));
    39fe:	27 c0       	rjmp	.+78     	; 0x3a4e <__vector_10+0x102>
    3a00:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3a04:	84 ff       	sbrs	r24, 4
				PLLCSR = USB_PLL_PSC;
    3a06:	23 c0       	rjmp	.+70     	; 0x3a4e <__vector_10+0x102>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3a08:	19 bc       	out	0x29, r1	; 41
    3a0a:	82 e0       	ldi	r24, 0x02	; 2
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3a0c:	89 bd       	out	0x29, r24	; 41
    3a0e:	09 b4       	in	r0, 0x29	; 41
    3a10:	00 fe       	sbrs	r0, 0
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3a12:	fd cf       	rjmp	.-6      	; 0x3a0e <__vector_10+0xc2>
    3a14:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    3a18:	8f 7d       	andi	r24, 0xDF	; 223
    3a1a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    3a1e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3a22:	8f 7e       	andi	r24, 0xEF	; 239
    3a24:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    3a28:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3a2c:	8f 7e       	andi	r24, 0xEF	; 239
    3a2e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    3a32:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3a36:	81 60       	ori	r24, 0x01	; 1
    3a38:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3a3c:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <USB_Device_ConfigurationNumber>
    3a40:	88 23       	and	r24, r24
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3a42:	09 f4       	brne	.+2      	; 0x3a46 <__vector_10+0xfa>
    3a44:	44 c0       	rjmp	.+136    	; 0x3ace <__vector_10+0x182>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3a46:	84 e0       	ldi	r24, 0x04	; 4
    3a48:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <USB_DeviceState>
						return (UDINT  & (1 << EORSTI));
    3a4c:	df d1       	rcall	.+958    	; 0x3e0c <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3a4e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						return (UDIEN  & (1 << EORSTE));
    3a52:	83 ff       	sbrs	r24, 3
    3a54:	27 c0       	rjmp	.+78     	; 0x3aa4 <__vector_10+0x158>
    3a56:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDINT  &= ~(1 << EORSTI);
    3a5a:	83 ff       	sbrs	r24, 3
    3a5c:	23 c0       	rjmp	.+70     	; 0x3aa4 <__vector_10+0x158>
    3a5e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3a62:	87 7f       	andi	r24, 0xF7	; 247
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3a64:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3a68:	82 e0       	ldi	r24, 0x02	; 2
		USB_Device_ConfigurationNumber = 0;
    3a6a:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <USB_DeviceState>
						UDINT  &= ~(1 << SUSPI);
    3a6e:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <USB_Device_ConfigurationNumber>
    3a72:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3a76:	8e 7f       	andi	r24, 0xFE	; 254
						UDIEN  &= ~(1 << SUSPE);
    3a78:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3a7c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3a80:	8e 7f       	andi	r24, 0xFE	; 254
						UDIEN  |= (1 << WAKEUPE);
    3a82:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3a86:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3a8a:	80 61       	ori	r24, 0x10	; 16
    3a8c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3a90:	42 e0       	ldi	r20, 0x02	; 2
						UEIENX |= (1 << RXSTPE);
    3a92:	60 e0       	ldi	r22, 0x00	; 0
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	3f de       	rcall	.-898    	; 0x3716 <Endpoint_ConfigureEndpoint_Prv>
    3a98:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3a9c:	88 60       	ori	r24, 0x08	; 8
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3a9e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    3aa2:	b4 d1       	rcall	.+872    	; 0x3e0c <USB_Event_Stub>
    3aa4:	ff 91       	pop	r31
    3aa6:	ef 91       	pop	r30
    3aa8:	bf 91       	pop	r27
    3aaa:	af 91       	pop	r26
    3aac:	9f 91       	pop	r25
    3aae:	8f 91       	pop	r24
    3ab0:	7f 91       	pop	r23
    3ab2:	6f 91       	pop	r22
    3ab4:	5f 91       	pop	r21
    3ab6:	4f 91       	pop	r20
    3ab8:	3f 91       	pop	r19
    3aba:	2f 91       	pop	r18
    3abc:	0f 90       	pop	r0
			USB_DeviceState = DEVICE_STATE_Unattached;
    3abe:	0f be       	out	0x3f, r0	; 63
    3ac0:	0f 90       	pop	r0
			EVENT_USB_Device_Disconnect();
    3ac2:	1f 90       	pop	r1
    3ac4:	18 95       	reti
    3ac6:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <USB_DeviceState>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3aca:	cf dc       	rcall	.-1634   	; 0x346a <EVENT_USB_Device_Disconnect>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3acc:	79 cf       	rjmp	.-270    	; 0x39c0 <__vector_10+0x74>
    3ace:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3ad2:	87 fd       	sbrc	r24, 7
    3ad4:	02 c0       	rjmp	.+4      	; 0x3ada <__vector_10+0x18e>
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	b7 cf       	rjmp	.-146    	; 0x3a48 <__vector_10+0xfc>
    3ada:	83 e0       	ldi	r24, 0x03	; 3
    3adc:	b5 cf       	rjmp	.-150    	; 0x3a48 <__vector_10+0xfc>

00003ade <__vector_11>:
    3ade:	1f 92       	push	r1
    3ae0:	0f 92       	push	r0
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	0f 92       	push	r0
    3ae6:	11 24       	eor	r1, r1
    3ae8:	2f 93       	push	r18
    3aea:	3f 93       	push	r19
    3aec:	4f 93       	push	r20
    3aee:	5f 93       	push	r21
    3af0:	6f 93       	push	r22
    3af2:	7f 93       	push	r23
    3af4:	8f 93       	push	r24
    3af6:	9f 93       	push	r25
    3af8:	af 93       	push	r26
    3afa:	bf 93       	push	r27
    3afc:	cf 93       	push	r28
    3afe:	ef 93       	push	r30
    3b00:	ff 93       	push	r31
    3b02:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3b06:	cf 70       	andi	r28, 0x0F	; 15
    3b08:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    3b0c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3b10:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    3b14:	87 7f       	andi	r24, 0xF7	; 247
    3b16:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    3b1a:	78 94       	sei
    3b1c:	1b d0       	rcall	.+54     	; 0x3b54 <USB_Device_ProcessControlRequest>
    3b1e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3b22:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    3b26:	88 60       	ori	r24, 0x08	; 8
    3b28:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    3b2c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3b30:	ff 91       	pop	r31
    3b32:	ef 91       	pop	r30
    3b34:	cf 91       	pop	r28
    3b36:	bf 91       	pop	r27
    3b38:	af 91       	pop	r26
    3b3a:	9f 91       	pop	r25
    3b3c:	8f 91       	pop	r24
    3b3e:	7f 91       	pop	r23
    3b40:	6f 91       	pop	r22
    3b42:	5f 91       	pop	r21
    3b44:	4f 91       	pop	r20
    3b46:	3f 91       	pop	r19
    3b48:	2f 91       	pop	r18
    3b4a:	0f 90       	pop	r0
    3b4c:	0f be       	out	0x3f, r0	; 63
    3b4e:	0f 90       	pop	r0
    3b50:	1f 90       	pop	r1
    3b52:	18 95       	reti

00003b54 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	cd b7       	in	r28, 0x3d	; 61
    3b5c:	de b7       	in	r29, 0x3e	; 62
    3b5e:	aa 97       	sbiw	r28, 0x2a	; 42
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61
    3b6a:	e6 e6       	ldi	r30, 0x66	; 102
    3b6c:	f5 e0       	ldi	r31, 0x05	; 5
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3b6e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3b72:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3b74:	25 e0       	ldi	r18, 0x05	; 5
    3b76:	ee 36       	cpi	r30, 0x6E	; 110
    3b78:	f2 07       	cpc	r31, r18
	#endif

	EVENT_USB_Device_ControlRequest();
    3b7a:	c9 f7       	brne	.-14     	; 0x3b6e <USB_Device_ProcessControlRequest+0x1a>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3b7c:	7a dc       	rcall	.-1804   	; 0x3472 <EVENT_USB_Device_ControlRequest>
    3b7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    3b82:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3b84:	10 c0       	rjmp	.+32     	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3b86:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    3b8a:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <USB_ControlRequest+0x1>
    3b8e:	95 30       	cpi	r25, 0x05	; 5
    3b90:	09 f4       	brne	.+2      	; 0x3b94 <USB_Device_ProcessControlRequest+0x40>
    3b92:	d8 c0       	rjmp	.+432    	; 0x3d44 <USB_Device_ProcessControlRequest+0x1f0>
    3b94:	00 f5       	brcc	.+64     	; 0x3bd6 <USB_Device_ProcessControlRequest+0x82>
    3b96:	91 30       	cpi	r25, 0x01	; 1
    3b98:	09 f4       	brne	.+2      	; 0x3b9c <USB_Device_ProcessControlRequest+0x48>
    3b9a:	8b c0       	rjmp	.+278    	; 0x3cb2 <USB_Device_ProcessControlRequest+0x15e>
    3b9c:	08 f4       	brcc	.+2      	; 0x3ba0 <USB_Device_ProcessControlRequest+0x4c>
    3b9e:	61 c0       	rjmp	.+194    	; 0x3c62 <USB_Device_ProcessControlRequest+0x10e>
    3ba0:	93 30       	cpi	r25, 0x03	; 3
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3ba4:	86 c0       	rjmp	.+268    	; 0x3cb2 <USB_Device_ProcessControlRequest+0x15e>
    3ba6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3baa:	83 ff       	sbrs	r24, 3
				UEINTX &= ~(1 << RXSTPI);
    3bac:	0a c0       	rjmp	.+20     	; 0x3bc2 <USB_Device_ProcessControlRequest+0x6e>
    3bae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3bb2:	87 7f       	andi	r24, 0xF7	; 247
    3bb4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    3bb8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3bbc:	80 62       	ori	r24, 0x20	; 32
    3bbe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    3bc2:	aa 96       	adiw	r28, 0x2a	; 42
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
    3bce:	df 91       	pop	r29
    3bd0:	cf 91       	pop	r28
    3bd2:	1f 91       	pop	r17
		switch (USB_ControlRequest.bRequest)
    3bd4:	08 95       	ret
    3bd6:	98 30       	cpi	r25, 0x08	; 8
    3bd8:	09 f4       	brne	.+2      	; 0x3bdc <USB_Device_ProcessControlRequest+0x88>
    3bda:	ed c0       	rjmp	.+474    	; 0x3db6 <USB_Device_ProcessControlRequest+0x262>
    3bdc:	99 30       	cpi	r25, 0x09	; 9
    3bde:	09 f4       	brne	.+2      	; 0x3be2 <USB_Device_ProcessControlRequest+0x8e>
    3be0:	f7 c0       	rjmp	.+494    	; 0x3dd0 <USB_Device_ProcessControlRequest+0x27c>
    3be2:	96 30       	cpi	r25, 0x06	; 6
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3be4:	01 f7       	brne	.-64     	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3be6:	80 58       	subi	r24, 0x80	; 128
    3be8:	82 30       	cpi	r24, 0x02	; 2
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3bea:	e8 f6       	brcc	.-70     	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3bec:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <USB_ControlRequest+0x2>
    3bf0:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <USB_ControlRequest+0x3>
    3bf4:	8c 3d       	cpi	r24, 0xDC	; 220
    3bf6:	23 e0       	ldi	r18, 0x03	; 3
    3bf8:	92 07       	cpc	r25, r18
    3bfa:	09 f0       	breq	.+2      	; 0x3bfe <USB_Device_ProcessControlRequest+0xaa>
	SignatureDescriptor.Header.Type = DTYPE_String;
    3bfc:	c6 c0       	rjmp	.+396    	; 0x3d8a <USB_Device_ProcessControlRequest+0x236>
    3bfe:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3c00:	8a 83       	std	Y+2, r24	; 0x02
    3c02:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3c04:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3c06:	4f b7       	in	r20, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    3c08:	f8 94       	cli
    3c0a:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3c0c:	13 96       	adiw	r26, 0x03	; 3
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3c10:	3e e0       	ldi	r19, 0x0E	; 14
    3c12:	51 e2       	ldi	r21, 0x21	; 33
    3c14:	e3 2f       	mov	r30, r19
    3c16:	f0 e0       	ldi	r31, 0x00	; 0
    3c18:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

					if (SerialCharNum & 0x01)
    3c1c:	e4 91       	lpm	r30, Z
    3c1e:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
    3c20:	03 c0       	rjmp	.+6      	; 0x3c28 <USB_Device_ProcessControlRequest+0xd4>
    3c22:	e2 95       	swap	r30
						SigReadAddress++;
    3c24:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    3c26:	3f 5f       	subi	r19, 0xFF	; 255
    3c28:	ef 70       	andi	r30, 0x0F	; 15
    3c2a:	8e 2f       	mov	r24, r30

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	ea 30       	cpi	r30, 0x0A	; 10
    3c30:	08 f4       	brcc	.+2      	; 0x3c34 <USB_Device_ProcessControlRequest+0xe0>
    3c32:	a9 c0       	rjmp	.+338    	; 0x3d86 <USB_Device_ProcessControlRequest+0x232>
    3c34:	c7 96       	adiw	r24, 0x37	; 55
    3c36:	8d 93       	st	X+, r24
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3c38:	9d 93       	st	X+, r25
    3c3a:	2f 5f       	subi	r18, 0xFF	; 255
    3c3c:	24 31       	cpi	r18, 0x14	; 20
				SREG = GlobalIntState;
    3c3e:	51 f7       	brne	.-44     	; 0x3c14 <USB_Device_ProcessControlRequest+0xc0>
				UEINTX &= ~(1 << RXSTPI);
    3c40:	4f bf       	out	0x3f, r20	; 63
    3c42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c46:	87 7f       	andi	r24, 0xF7	; 247
    3c48:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3c4c:	6a e2       	ldi	r22, 0x2A	; 42
    3c4e:	70 e0       	ldi	r23, 0x00	; 0
    3c50:	ce 01       	movw	r24, r28
    3c52:	01 96       	adiw	r24, 0x01	; 1
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3c54:	a1 dc       	rcall	.-1726   	; 0x3598 <Endpoint_Write_Control_Stream_LE>
    3c56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c5a:	8b 77       	andi	r24, 0x7B	; 123
    3c5c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3c60:	a2 cf       	rjmp	.-188    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3c62:	80 38       	cpi	r24, 0x80	; 128
    3c64:	99 f0       	breq	.+38     	; 0x3c8c <USB_Device_ProcessControlRequest+0x138>
    3c66:	82 38       	cpi	r24, 0x82	; 130
    3c68:	09 f0       	breq	.+2      	; 0x3c6c <USB_Device_ProcessControlRequest+0x118>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3c6a:	9d cf       	rjmp	.-198    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3c6c:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <USB_ControlRequest+0x4>

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    3c70:	8f 70       	andi	r24, 0x0F	; 15
    3c72:	87 30       	cpi	r24, 0x07	; 7
    3c74:	08 f0       	brcs	.+2      	; 0x3c78 <USB_Device_ProcessControlRequest+0x124>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c76:	97 cf       	rjmp	.-210    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3c78:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3c7c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3c80:	85 fb       	bst	r24, 5
    3c82:	88 27       	eor	r24, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c84:	80 f9       	bld	r24, 0
    3c86:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	uint8_t CurrentStatus = 0;
    3c8a:	06 c0       	rjmp	.+12     	; 0x3c98 <USB_Device_ProcessControlRequest+0x144>
    3c8c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    3c90:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <USB_Device_RemoteWakeupEnabled>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3c94:	91 11       	cpse	r25, r1
				UEINTX &= ~(1 << RXSTPI);
    3c96:	82 60       	ori	r24, 0x02	; 2
    3c98:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c9c:	97 7f       	andi	r25, 0xF7	; 247
    3c9e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3ca2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    3ca6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3caa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3cae:	8e 77       	andi	r24, 0x7E	; 126
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3cb0:	32 c0       	rjmp	.+100    	; 0x3d16 <USB_Device_ProcessControlRequest+0x1c2>
    3cb2:	28 2f       	mov	r18, r24
    3cb4:	2d 7f       	andi	r18, 0xFD	; 253
    3cb6:	09 f0       	breq	.+2      	; 0x3cba <USB_Device_ProcessControlRequest+0x166>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3cb8:	76 cf       	rjmp	.-276    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3cba:	88 23       	and	r24, r24
    3cbc:	e9 f0       	breq	.+58     	; 0x3cf8 <USB_Device_ProcessControlRequest+0x1a4>
    3cbe:	82 30       	cpi	r24, 0x02	; 2
    3cc0:	09 f0       	breq	.+2      	; 0x3cc4 <USB_Device_ProcessControlRequest+0x170>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3cc2:	71 cf       	rjmp	.-286    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3cc4:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <USB_ControlRequest+0x2>
    3cc8:	81 11       	cpse	r24, r1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3cca:	20 c0       	rjmp	.+64     	; 0x3d0c <USB_Device_ProcessControlRequest+0x1b8>
    3ccc:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    3cd0:	8f 70       	andi	r24, 0x0F	; 15
    3cd2:	2f ef       	ldi	r18, 0xFF	; 255
    3cd4:	28 0f       	add	r18, r24
    3cd6:	26 30       	cpi	r18, 0x06	; 6
    3cd8:	08 f0       	brcs	.+2      	; 0x3cdc <USB_Device_ProcessControlRequest+0x188>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3cda:	65 cf       	rjmp	.-310    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3cdc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    3ce0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3ce4:	20 ff       	sbrs	r18, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3ce6:	12 c0       	rjmp	.+36     	; 0x3d0c <USB_Device_ProcessControlRequest+0x1b8>
    3ce8:	93 30       	cpi	r25, 0x03	; 3
				UECONX |= (1 << STALLRQ);
    3cea:	c9 f4       	brne	.+50     	; 0x3d1e <USB_Device_ProcessControlRequest+0x1ca>
    3cec:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
    3cf0:	80 62       	ori	r24, 0x20	; 32
    3cf2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3cf6:	0a c0       	rjmp	.+20     	; 0x3d0c <USB_Device_ProcessControlRequest+0x1b8>
    3cf8:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <USB_ControlRequest+0x2>
    3cfc:	81 30       	cpi	r24, 0x01	; 1
    3cfe:	09 f0       	breq	.+2      	; 0x3d02 <USB_Device_ProcessControlRequest+0x1ae>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3d00:	52 cf       	rjmp	.-348    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3d02:	93 30       	cpi	r25, 0x03	; 3
    3d04:	09 f0       	breq	.+2      	; 0x3d08 <USB_Device_ProcessControlRequest+0x1b4>
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d0c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    3d10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    3d14:	87 7f       	andi	r24, 0xF7	; 247
    3d16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQC);
    3d1a:	6d dd       	rcall	.-1318   	; 0x37f6 <Endpoint_ClearStatusStage>
    3d1c:	44 cf       	rjmp	.-376    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3d1e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3d22:	90 61       	ori	r25, 0x10	; 16
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3d24:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3d28:	21 e0       	ldi	r18, 0x01	; 1
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	01 c0       	rjmp	.+2      	; 0x3d30 <USB_Device_ProcessControlRequest+0x1dc>
    3d2e:	22 0f       	add	r18, r18
    3d30:	8a 95       	dec	r24
    3d32:	ea f7       	brpl	.-6      	; 0x3d2e <USB_Device_ProcessControlRequest+0x1da>
				UERST = 0;
    3d34:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    3d38:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    3d3c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3d40:	88 60       	ori	r24, 0x08	; 8
    3d42:	d7 cf       	rjmp	.-82     	; 0x3cf2 <USB_Device_ProcessControlRequest+0x19e>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3d44:	81 11       	cpse	r24, r1
    3d46:	2f cf       	rjmp	.-418    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3d48:	10 91 68 05 	lds	r17, 0x0568	; 0x800568 <USB_ControlRequest+0x2>
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3d4c:	1f 77       	andi	r17, 0x7F	; 127
    3d4e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3d52:	80 78       	andi	r24, 0x80	; 128
    3d54:	81 2b       	or	r24, r17
				UEINTX &= ~(1 << RXSTPI);
    3d56:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3d5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    3d5e:	87 7f       	andi	r24, 0xF7	; 247
    3d60:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3d64:	48 dd       	rcall	.-1392   	; 0x37f6 <Endpoint_ClearStatusStage>
	while (!(Endpoint_IsINReady()));
    3d66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UDADDR |= (1 << ADDEN);
    3d6a:	80 ff       	sbrs	r24, 0
    3d6c:	fc cf       	rjmp	.-8      	; 0x3d66 <USB_Device_ProcessControlRequest+0x212>
    3d6e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3d72:	80 68       	ori	r24, 0x80	; 128
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3d74:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3d78:	83 e0       	ldi	r24, 0x03	; 3
    3d7a:	11 11       	cpse	r17, r1
    3d7c:	01 c0       	rjmp	.+2      	; 0x3d80 <USB_Device_ProcessControlRequest+0x22c>
    3d7e:	82 e0       	ldi	r24, 0x02	; 2
    3d80:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <USB_DeviceState>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3d84:	10 cf       	rjmp	.-480    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3d86:	c0 96       	adiw	r24, 0x30	; 48
    3d88:	56 cf       	rjmp	.-340    	; 0x3c36 <USB_Device_ProcessControlRequest+0xe2>
    3d8a:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <USB_ControlRequest+0x4>
    3d8e:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <USB_ControlRequest+0x5>
    3d92:	ae 01       	movw	r20, r28
    3d94:	4f 5f       	subi	r20, 0xFF	; 255
    3d96:	5f 4f       	sbci	r21, 0xFF	; 255
    3d98:	0e 94 d7 02 	call	0x5ae	; 0x5ae <CALLBACK_USB_GetDescriptor>
    3d9c:	bc 01       	movw	r22, r24
    3d9e:	89 2b       	or	r24, r25
				UEINTX &= ~(1 << RXSTPI);
    3da0:	09 f4       	brne	.+2      	; 0x3da4 <USB_Device_ProcessControlRequest+0x250>
    3da2:	01 cf       	rjmp	.-510    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3da4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3da8:	97 7f       	andi	r25, 0xF7	; 247
    3daa:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3dae:	89 81       	ldd	r24, Y+1	; 0x01
    3db0:	9a 81       	ldd	r25, Y+2	; 0x02
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3db2:	51 dc       	rcall	.-1886   	; 0x3656 <Endpoint_Write_Control_PStream_LE>
    3db4:	50 cf       	rjmp	.-352    	; 0x3c56 <USB_Device_ProcessControlRequest+0x102>
    3db6:	80 38       	cpi	r24, 0x80	; 128
    3db8:	09 f0       	breq	.+2      	; 0x3dbc <USB_Device_ProcessControlRequest+0x268>
    3dba:	f5 ce       	rjmp	.-534    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3dbc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3dc0:	87 7f       	andi	r24, 0xF7	; 247
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3dc2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UEDATX = Data;
    3dc6:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <USB_Device_ConfigurationNumber>
    3dca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3dce:	6d cf       	rjmp	.-294    	; 0x3caa <USB_Device_ProcessControlRequest+0x156>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3dd0:	81 11       	cpse	r24, r1
    3dd2:	e9 ce       	rjmp	.-558    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3dd4:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <USB_ControlRequest+0x2>
    3dd8:	92 30       	cpi	r25, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    3dda:	08 f0       	brcs	.+2      	; 0x3dde <USB_Device_ProcessControlRequest+0x28a>
    3ddc:	e4 ce       	rjmp	.-568    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
    3dde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3de2:	87 7f       	andi	r24, 0xF7	; 247
    3de4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    3de8:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <USB_Device_ConfigurationNumber>
	if (USB_Device_ConfigurationNumber)
    3dec:	04 dd       	rcall	.-1528   	; 0x37f6 <Endpoint_ClearStatusStage>
    3dee:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <USB_Device_ConfigurationNumber>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3df2:	88 23       	and	r24, r24
    3df4:	29 f0       	breq	.+10     	; 0x3e00 <USB_Device_ProcessControlRequest+0x2ac>
	EVENT_USB_Device_ConfigurationChanged();
    3df6:	84 e0       	ldi	r24, 0x04	; 4
    3df8:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <USB_DeviceState>
				return (UDADDR & (1 << ADDEN));
    3dfc:	37 db       	rcall	.-2450   	; 0x346c <EVENT_USB_Device_ConfigurationChanged>
    3dfe:	d3 ce       	rjmp	.-602    	; 0x3ba6 <USB_Device_ProcessControlRequest+0x52>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3e00:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3e04:	87 fd       	sbrc	r24, 7
    3e06:	f7 cf       	rjmp	.-18     	; 0x3df6 <USB_Device_ProcessControlRequest+0x2a2>
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	f6 cf       	rjmp	.-20     	; 0x3df8 <USB_Device_ProcessControlRequest+0x2a4>

00003e0c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    3e0c:	08 95       	ret

00003e0e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3e0e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3e10:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <USB_DeviceState>
    3e14:	88 23       	and	r24, r24
    3e16:	91 f0       	breq	.+36     	; 0x3e3c <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3e18:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3e1c:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3e1e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    3e22:	80 fd       	sbrc	r24, 0
    3e24:	0d c0       	rjmp	.+26     	; 0x3e40 <USB_USBTask+0x32>
    3e26:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3e28:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e2a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3e2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
    3e32:	83 fd       	sbrc	r24, 3
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e34:	8f de       	rcall	.-738    	; 0x3b54 <USB_Device_ProcessControlRequest>
    3e36:	cf 70       	andi	r28, 0x0F	; 15
    3e38:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    3e3c:	cf 91       	pop	r28
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3e3e:	08 95       	ret
    3e40:	80 e8       	ldi	r24, 0x80	; 128
    3e42:	f2 cf       	rjmp	.-28     	; 0x3e28 <USB_USBTask+0x1a>

00003e44 <CDC_Device_ConfigureEndpoints>:
void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
}
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	ec 01       	movw	r28, r24
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	70 96       	adiw	r30, 0x10	; 16
    3e4e:	8b e0       	ldi	r24, 0x0B	; 11
    3e50:	df 01       	movw	r26, r30
    3e52:	1d 92       	st	X+, r1
    3e54:	8a 95       	dec	r24
    3e56:	e9 f7       	brne	.-6      	; 0x3e52 <CDC_Device_ConfigureEndpoints+0xe>
    3e58:	82 e0       	ldi	r24, 0x02	; 2
    3e5a:	8c 83       	std	Y+4, r24	; 0x04
    3e5c:	89 87       	std	Y+9, r24	; 0x09
    3e5e:	83 e0       	ldi	r24, 0x03	; 3
    3e60:	8e 87       	std	Y+14, r24	; 0x0e
    3e62:	61 e0       	ldi	r22, 0x01	; 1
    3e64:	ce 01       	movw	r24, r28
    3e66:	01 96       	adiw	r24, 0x01	; 1
    3e68:	8a dc       	rcall	.-1772   	; 0x377e <Endpoint_ConfigureEndpointTable>
    3e6a:	88 23       	and	r24, r24
    3e6c:	61 f0       	breq	.+24     	; 0x3e86 <CDC_Device_ConfigureEndpoints+0x42>
    3e6e:	61 e0       	ldi	r22, 0x01	; 1
    3e70:	ce 01       	movw	r24, r28
    3e72:	06 96       	adiw	r24, 0x06	; 6
    3e74:	84 dc       	rcall	.-1784   	; 0x377e <Endpoint_ConfigureEndpointTable>
    3e76:	88 23       	and	r24, r24
    3e78:	31 f0       	breq	.+12     	; 0x3e86 <CDC_Device_ConfigureEndpoints+0x42>
    3e7a:	61 e0       	ldi	r22, 0x01	; 1
    3e7c:	ce 01       	movw	r24, r28
    3e7e:	0b 96       	adiw	r24, 0x0b	; 11
    3e80:	df 91       	pop	r29
    3e82:	cf 91       	pop	r28
    3e84:	7c cc       	rjmp	.-1800   	; 0x377e <Endpoint_ConfigureEndpointTable>
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	df 91       	pop	r29
    3e8a:	cf 91       	pop	r28
    3e8c:	08 95       	ret

00003e8e <CDC_Device_SendByte>:
    3e8e:	cf 93       	push	r28
    3e90:	c6 2f       	mov	r28, r22
    3e92:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <USB_DeviceState>
    3e96:	24 30       	cpi	r18, 0x04	; 4
    3e98:	f9 f4       	brne	.+62     	; 0x3ed8 <CDC_Device_SendByte+0x4a>
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	44 89       	ldd	r20, Z+20	; 0x14
    3e9e:	55 89       	ldd	r21, Z+21	; 0x15
    3ea0:	66 89       	ldd	r22, Z+22	; 0x16
    3ea2:	77 89       	ldd	r23, Z+23	; 0x17
    3ea4:	45 2b       	or	r20, r21
    3ea6:	46 2b       	or	r20, r22
    3ea8:	47 2b       	or	r20, r23
    3eaa:	b1 f0       	breq	.+44     	; 0x3ed8 <CDC_Device_SendByte+0x4a>
    3eac:	81 81       	ldd	r24, Z+1	; 0x01
    3eae:	8f 70       	andi	r24, 0x0F	; 15
    3eb0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3eb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3eb8:	85 ff       	sbrs	r24, 5
    3eba:	05 c0       	rjmp	.+10     	; 0x3ec6 <CDC_Device_SendByte+0x38>
    3ebc:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	cf 91       	pop	r28
    3ec4:	08 95       	ret
    3ec6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3eca:	8e 77       	andi	r24, 0x7E	; 126
    3ecc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3ed0:	b1 dc       	rcall	.-1694   	; 0x3834 <Endpoint_WaitUntilReady>
    3ed2:	88 23       	and	r24, r24
    3ed4:	99 f3       	breq	.-26     	; 0x3ebc <CDC_Device_SendByte+0x2e>
    3ed6:	f5 cf       	rjmp	.-22     	; 0x3ec2 <CDC_Device_SendByte+0x34>
    3ed8:	82 e0       	ldi	r24, 0x02	; 2
    3eda:	f3 cf       	rjmp	.-26     	; 0x3ec2 <CDC_Device_SendByte+0x34>

00003edc <CDC_Device_putchar>:
    3edc:	fb 01       	movw	r30, r22
    3ede:	68 2f       	mov	r22, r24
    3ee0:	84 85       	ldd	r24, Z+12	; 0x0c
    3ee2:	95 85       	ldd	r25, Z+13	; 0x0d
    3ee4:	d4 df       	rcall	.-88     	; 0x3e8e <CDC_Device_SendByte>
    3ee6:	21 e0       	ldi	r18, 0x01	; 1
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	81 11       	cpse	r24, r1
    3eec:	02 c0       	rjmp	.+4      	; 0x3ef2 <CDC_Device_putchar+0x16>
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	88 27       	eor	r24, r24
    3ef4:	99 27       	eor	r25, r25
    3ef6:	82 1b       	sub	r24, r18
    3ef8:	93 0b       	sbc	r25, r19
    3efa:	08 95       	ret

00003efc <CDC_Device_Flush>:
    3efc:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <USB_DeviceState>
    3f00:	24 30       	cpi	r18, 0x04	; 4
    3f02:	51 f5       	brne	.+84     	; 0x3f58 <CDC_Device_Flush+0x5c>
    3f04:	fc 01       	movw	r30, r24
    3f06:	44 89       	ldd	r20, Z+20	; 0x14
    3f08:	55 89       	ldd	r21, Z+21	; 0x15
    3f0a:	66 89       	ldd	r22, Z+22	; 0x16
    3f0c:	77 89       	ldd	r23, Z+23	; 0x17
    3f0e:	45 2b       	or	r20, r21
    3f10:	46 2b       	or	r20, r22
    3f12:	47 2b       	or	r20, r23
    3f14:	09 f1       	breq	.+66     	; 0x3f58 <CDC_Device_Flush+0x5c>
    3f16:	81 81       	ldd	r24, Z+1	; 0x01
    3f18:	8f 70       	andi	r24, 0x0F	; 15
    3f1a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3f1e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    3f22:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3f26:	89 27       	eor	r24, r25
    3f28:	98 27       	eor	r25, r24
    3f2a:	89 27       	eor	r24, r25
    3f2c:	89 2b       	or	r24, r25
    3f2e:	11 f4       	brne	.+4      	; 0x3f34 <CDC_Device_Flush+0x38>
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	08 95       	ret
    3f34:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3f38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3f3c:	8e 77       	andi	r24, 0x7E	; 126
    3f3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3f42:	95 fd       	sbrc	r25, 5
    3f44:	f5 cf       	rjmp	.-22     	; 0x3f30 <CDC_Device_Flush+0x34>
    3f46:	76 dc       	rcall	.-1812   	; 0x3834 <Endpoint_WaitUntilReady>
    3f48:	81 11       	cpse	r24, r1
    3f4a:	07 c0       	rjmp	.+14     	; 0x3f5a <CDC_Device_Flush+0x5e>
    3f4c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3f50:	9e 77       	andi	r25, 0x7E	; 126
    3f52:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3f56:	08 95       	ret
    3f58:	82 e0       	ldi	r24, 0x02	; 2
    3f5a:	08 95       	ret

00003f5c <CDC_Device_USBTask>:
    3f5c:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <USB_DeviceState>
    3f60:	24 30       	cpi	r18, 0x04	; 4
    3f62:	89 f4       	brne	.+34     	; 0x3f86 <CDC_Device_USBTask+0x2a>
    3f64:	fc 01       	movw	r30, r24
    3f66:	44 89       	ldd	r20, Z+20	; 0x14
    3f68:	55 89       	ldd	r21, Z+21	; 0x15
    3f6a:	66 89       	ldd	r22, Z+22	; 0x16
    3f6c:	77 89       	ldd	r23, Z+23	; 0x17
    3f6e:	45 2b       	or	r20, r21
    3f70:	46 2b       	or	r20, r22
    3f72:	47 2b       	or	r20, r23
    3f74:	41 f0       	breq	.+16     	; 0x3f86 <CDC_Device_USBTask+0x2a>
    3f76:	21 81       	ldd	r18, Z+1	; 0x01
    3f78:	2f 70       	andi	r18, 0x0F	; 15
    3f7a:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3f7e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3f82:	20 fd       	sbrc	r18, 0
    3f84:	bb cf       	rjmp	.-138    	; 0x3efc <CDC_Device_Flush>
    3f86:	08 95       	ret

00003f88 <CDC_Device_BytesReceived>:
    3f88:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <USB_DeviceState>
    3f8c:	24 30       	cpi	r18, 0x04	; 4
    3f8e:	19 f0       	breq	.+6      	; 0x3f96 <CDC_Device_BytesReceived+0xe>
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	80 e0       	ldi	r24, 0x00	; 0
    3f94:	08 95       	ret
    3f96:	fc 01       	movw	r30, r24
    3f98:	44 89       	ldd	r20, Z+20	; 0x14
    3f9a:	55 89       	ldd	r21, Z+21	; 0x15
    3f9c:	66 89       	ldd	r22, Z+22	; 0x16
    3f9e:	77 89       	ldd	r23, Z+23	; 0x17
    3fa0:	45 2b       	or	r20, r21
    3fa2:	46 2b       	or	r20, r22
    3fa4:	47 2b       	or	r20, r23
    3fa6:	a1 f3       	breq	.-24     	; 0x3f90 <CDC_Device_BytesReceived+0x8>
    3fa8:	86 81       	ldd	r24, Z+6	; 0x06
    3faa:	8f 70       	andi	r24, 0x0F	; 15
    3fac:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3fb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3fb4:	82 ff       	sbrs	r24, 2
    3fb6:	ec cf       	rjmp	.-40     	; 0x3f90 <CDC_Device_BytesReceived+0x8>
    3fb8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    3fbc:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3fc0:	89 27       	eor	r24, r25
    3fc2:	98 27       	eor	r25, r24
    3fc4:	89 27       	eor	r24, r25
    3fc6:	00 97       	sbiw	r24, 0x00	; 0
    3fc8:	31 f4       	brne	.+12     	; 0x3fd6 <CDC_Device_BytesReceived+0x4e>
    3fca:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3fce:	2b 77       	andi	r18, 0x7B	; 123
    3fd0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3fd4:	08 95       	ret
    3fd6:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    3fda:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3fde:	89 27       	eor	r24, r25
    3fe0:	98 27       	eor	r25, r24
    3fe2:	89 27       	eor	r24, r25
    3fe4:	08 95       	ret

00003fe6 <CDC_Device_ReceiveByte>:
    3fe6:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <USB_DeviceState>
    3fea:	24 30       	cpi	r18, 0x04	; 4
    3fec:	19 f0       	breq	.+6      	; 0x3ff4 <CDC_Device_ReceiveByte+0xe>
    3fee:	8f ef       	ldi	r24, 0xFF	; 255
    3ff0:	9f ef       	ldi	r25, 0xFF	; 255
    3ff2:	08 95       	ret
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	44 89       	ldd	r20, Z+20	; 0x14
    3ff8:	55 89       	ldd	r21, Z+21	; 0x15
    3ffa:	66 89       	ldd	r22, Z+22	; 0x16
    3ffc:	77 89       	ldd	r23, Z+23	; 0x17
    3ffe:	45 2b       	or	r20, r21
    4000:	46 2b       	or	r20, r22
    4002:	47 2b       	or	r20, r23
    4004:	a1 f3       	breq	.-24     	; 0x3fee <CDC_Device_ReceiveByte+0x8>
    4006:	86 81       	ldd	r24, Z+6	; 0x06
    4008:	8f 70       	andi	r24, 0x0F	; 15
    400a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    400e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4012:	82 ff       	sbrs	r24, 2
    4014:	ec cf       	rjmp	.-40     	; 0x3fee <CDC_Device_ReceiveByte+0x8>
    4016:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    401a:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    401e:	89 27       	eor	r24, r25
    4020:	98 27       	eor	r25, r24
    4022:	89 27       	eor	r24, r25
    4024:	89 2b       	or	r24, r25
    4026:	91 f0       	breq	.+36     	; 0x404c <CDC_Device_ReceiveByte+0x66>
    4028:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    4032:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4036:	23 27       	eor	r18, r19
    4038:	32 27       	eor	r19, r18
    403a:	23 27       	eor	r18, r19
    403c:	23 2b       	or	r18, r19
    403e:	29 f4       	brne	.+10     	; 0x404a <CDC_Device_ReceiveByte+0x64>
    4040:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4044:	2b 77       	andi	r18, 0x7B	; 123
    4046:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    404a:	08 95       	ret
    404c:	8f ef       	ldi	r24, 0xFF	; 255
    404e:	9f ef       	ldi	r25, 0xFF	; 255
    4050:	ee cf       	rjmp	.-36     	; 0x402e <CDC_Device_ReceiveByte+0x48>

00004052 <CDC_Device_getchar>:
    4052:	fc 01       	movw	r30, r24
    4054:	84 85       	ldd	r24, Z+12	; 0x0c
    4056:	95 85       	ldd	r25, Z+13	; 0x0d
    4058:	c6 df       	rcall	.-116    	; 0x3fe6 <CDC_Device_ReceiveByte>
    405a:	97 ff       	sbrs	r25, 7
    405c:	02 c0       	rjmp	.+4      	; 0x4062 <CDC_Device_getchar+0x10>
    405e:	8e ef       	ldi	r24, 0xFE	; 254
    4060:	9f ef       	ldi	r25, 0xFF	; 255
    4062:	08 95       	ret

00004064 <CDC_Device_CreateStream>:
    4064:	fb 01       	movw	r30, r22
    4066:	2e e0       	ldi	r18, 0x0E	; 14
    4068:	db 01       	movw	r26, r22
    406a:	1d 92       	st	X+, r1
    406c:	2a 95       	dec	r18
    406e:	e9 f7       	brne	.-6      	; 0x406a <CDC_Device_CreateStream+0x6>
    4070:	23 e0       	ldi	r18, 0x03	; 3
    4072:	23 83       	std	Z+3, r18	; 0x03
    4074:	2e e6       	ldi	r18, 0x6E	; 110
    4076:	3f e1       	ldi	r19, 0x1F	; 31
    4078:	31 87       	std	Z+9, r19	; 0x09
    407a:	20 87       	std	Z+8, r18	; 0x08
    407c:	29 e2       	ldi	r18, 0x29	; 41
    407e:	30 e2       	ldi	r19, 0x20	; 32
    4080:	33 87       	std	Z+11, r19	; 0x0b
    4082:	22 87       	std	Z+10, r18	; 0x0a
    4084:	95 87       	std	Z+13, r25	; 0x0d
    4086:	84 87       	std	Z+12, r24	; 0x0c
    4088:	08 95       	ret

0000408a <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    408a:	08 95       	ret

0000408c <CDC_Device_ProcessControlRequest>:
{
    408c:	cf 93       	push	r28
    408e:	df 93       	push	r29
    4090:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4092:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    4096:	83 ff       	sbrs	r24, 3
    4098:	10 c0       	rjmp	.+32     	; 0x40ba <CDC_Device_ProcessControlRequest+0x2e>
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    409a:	28 81       	ld	r18, Y
    409c:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <USB_ControlRequest+0x4>
    40a0:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <USB_ControlRequest+0x5>
    40a4:	28 17       	cp	r18, r24
    40a6:	19 06       	cpc	r1, r25
    40a8:	41 f4       	brne	.+16     	; 0x40ba <CDC_Device_ProcessControlRequest+0x2e>
	switch (USB_ControlRequest.bRequest)
    40aa:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <USB_ControlRequest+0x1>
    40ae:	81 32       	cpi	r24, 0x21	; 33
    40b0:	e1 f0       	breq	.+56     	; 0x40ea <CDC_Device_ProcessControlRequest+0x5e>
    40b2:	30 f4       	brcc	.+12     	; 0x40c0 <CDC_Device_ProcessControlRequest+0x34>
    40b4:	80 32       	cpi	r24, 0x20	; 32
    40b6:	09 f4       	brne	.+2      	; 0x40ba <CDC_Device_ProcessControlRequest+0x2e>
    40b8:	4d c0       	rjmp	.+154    	; 0x4154 <CDC_Device_ProcessControlRequest+0xc8>
}
    40ba:	df 91       	pop	r29
    40bc:	cf 91       	pop	r28
    40be:	08 95       	ret
	switch (USB_ControlRequest.bRequest)
    40c0:	82 32       	cpi	r24, 0x22	; 34
    40c2:	09 f4       	brne	.+2      	; 0x40c6 <CDC_Device_ProcessControlRequest+0x3a>
    40c4:	79 c0       	rjmp	.+242    	; 0x41b8 <CDC_Device_ProcessControlRequest+0x12c>
    40c6:	83 32       	cpi	r24, 0x23	; 35
    40c8:	c1 f7       	brne	.-16     	; 0x40ba <CDC_Device_ProcessControlRequest+0x2e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    40ca:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <USB_ControlRequest>
    40ce:	81 32       	cpi	r24, 0x21	; 33
    40d0:	a1 f7       	brne	.-24     	; 0x40ba <CDC_Device_ProcessControlRequest+0x2e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    40d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    40d6:	87 7f       	andi	r24, 0xF7	; 247
    40d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    40dc:	8c db       	rcall	.-2280   	; 0x37f6 <Endpoint_ClearStatusStage>
    40de:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <USB_ControlRequest+0x2>
}
    40e2:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    40e4:	df 91       	pop	r29
    40e6:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    40e8:	d0 cf       	rjmp	.-96     	; 0x408a <CDC_Device_Event_Stub>
    40ea:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <USB_ControlRequest>
    40ee:	81 3a       	cpi	r24, 0xA1	; 161
    40f0:	21 f7       	brne	.-56     	; 0x40ba <CDC_Device_ProcessControlRequest+0x2e>
    40f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    40f6:	87 7f       	andi	r24, 0xF7	; 247
    40f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    40fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				while (!(Endpoint_IsINReady()));
    4100:	80 ff       	sbrs	r24, 0
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    4102:	fc cf       	rjmp	.-8      	; 0x40fc <CDC_Device_ProcessControlRequest+0x70>
    4104:	8c 89       	ldd	r24, Y+20	; 0x14
    4106:	9d 89       	ldd	r25, Y+21	; 0x15
    4108:	ae 89       	ldd	r26, Y+22	; 0x16
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    410a:	bf 89       	ldd	r27, Y+23	; 0x17
    410c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    4110:	49 2f       	mov	r20, r25
    4112:	5a 2f       	mov	r21, r26
    4114:	6b 2f       	mov	r22, r27
    4116:	77 27       	eor	r23, r23
    4118:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
    411c:	ad 01       	movw	r20, r26
    411e:	66 27       	eor	r22, r22
    4120:	77 27       	eor	r23, r23
    4122:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
    4126:	8b 2f       	mov	r24, r27
    4128:	99 27       	eor	r25, r25
    412a:	aa 27       	eor	r26, r26
    412c:	bb 27       	eor	r27, r27
    412e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = Data;
    4132:	88 8d       	ldd	r24, Y+24	; 0x18
    4134:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4138:	89 8d       	ldd	r24, Y+25	; 0x19
    413a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    413e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4140:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4144:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4148:	8e 77       	andi	r24, 0x7E	; 126
}
    414a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
    414e:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4150:	cf 91       	pop	r28
    4152:	51 cb       	rjmp	.-2398   	; 0x37f6 <Endpoint_ClearStatusStage>
    4154:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <USB_ControlRequest>
    4158:	81 32       	cpi	r24, 0x21	; 33
				UEINTX &= ~(1 << RXSTPI);
    415a:	09 f0       	breq	.+2      	; 0x415e <CDC_Device_ProcessControlRequest+0xd2>
    415c:	ae cf       	rjmp	.-164    	; 0x40ba <CDC_Device_ProcessControlRequest+0x2e>
    415e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4162:	87 7f       	andi	r24, 0xF7	; 247
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4164:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				while (!(Endpoint_IsOUTReceived()))
    4168:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Data.Bytes[0] = UEDATX;
    416c:	82 ff       	sbrs	r24, 2
    416e:	1f c0       	rjmp	.+62     	; 0x41ae <CDC_Device_ProcessControlRequest+0x122>
				Data.Bytes[1] = UEDATX;
    4170:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
    4174:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
    4178:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    417c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4180:	3c 8b       	std	Y+20, r19	; 0x14
    4182:	2d 8b       	std	Y+21, r18	; 0x15
				return UEDATX;
    4184:	9e 8b       	std	Y+22, r25	; 0x16
    4186:	8f 8b       	std	Y+23, r24	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    4188:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    418c:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    418e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4192:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    4194:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4198:	8a 8f       	std	Y+26, r24	; 0x1a
    419a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
    419e:	8b 77       	andi	r24, 0x7B	; 123
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    41a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    41a4:	28 db       	rcall	.-2480   	; 0x37f6 <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    41a6:	ce 01       	movw	r24, r28
    41a8:	df 91       	pop	r29
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    41aa:	cf 91       	pop	r28
    41ac:	6e cf       	rjmp	.-292    	; 0x408a <CDC_Device_Event_Stub>
    41ae:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <USB_DeviceState>
    41b2:	81 11       	cpse	r24, r1
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    41b4:	d9 cf       	rjmp	.-78     	; 0x4168 <CDC_Device_ProcessControlRequest+0xdc>
    41b6:	81 cf       	rjmp	.-254    	; 0x40ba <CDC_Device_ProcessControlRequest+0x2e>
    41b8:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <USB_ControlRequest>
				UEINTX &= ~(1 << RXSTPI);
    41bc:	81 32       	cpi	r24, 0x21	; 33
    41be:	09 f0       	breq	.+2      	; 0x41c2 <CDC_Device_ProcessControlRequest+0x136>
    41c0:	7c cf       	rjmp	.-264    	; 0x40ba <CDC_Device_ProcessControlRequest+0x2e>
    41c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
    41c6:	87 7f       	andi	r24, 0xF7	; 247
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    41c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    41cc:	14 db       	rcall	.-2520   	; 0x37f6 <Endpoint_ClearStatusStage>
    41ce:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <USB_ControlRequest+0x2>
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    41d2:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <USB_ControlRequest+0x3>
}
    41d6:	99 8b       	std	Y+17, r25	; 0x11
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    41d8:	88 8b       	std	Y+16, r24	; 0x10
    41da:	ce 01       	movw	r24, r28
    41dc:	df 91       	pop	r29
    41de:	cf 91       	pop	r28
    41e0:	4b c9       	rjmp	.-3434   	; 0x3478 <EVENT_CDC_Device_ControLineStateChanged>

000041e2 <__udivmodhi4>:
    41e2:	aa 1b       	sub	r26, r26
    41e4:	bb 1b       	sub	r27, r27
    41e6:	51 e1       	ldi	r21, 0x11	; 17
    41e8:	07 c0       	rjmp	.+14     	; 0x41f8 <__udivmodhi4_ep>

000041ea <__udivmodhi4_loop>:
    41ea:	aa 1f       	adc	r26, r26
    41ec:	bb 1f       	adc	r27, r27
    41ee:	a6 17       	cp	r26, r22
    41f0:	b7 07       	cpc	r27, r23
    41f2:	10 f0       	brcs	.+4      	; 0x41f8 <__udivmodhi4_ep>
    41f4:	a6 1b       	sub	r26, r22
    41f6:	b7 0b       	sbc	r27, r23

000041f8 <__udivmodhi4_ep>:
    41f8:	88 1f       	adc	r24, r24
    41fa:	99 1f       	adc	r25, r25
    41fc:	5a 95       	dec	r21
    41fe:	a9 f7       	brne	.-22     	; 0x41ea <__udivmodhi4_loop>
    4200:	80 95       	com	r24
    4202:	90 95       	com	r25
    4204:	bc 01       	movw	r22, r24
    4206:	cd 01       	movw	r24, r26
    4208:	08 95       	ret

0000420a <__divmodhi4>:
    420a:	97 fb       	bst	r25, 7
    420c:	07 2e       	mov	r0, r23
    420e:	16 f4       	brtc	.+4      	; 0x4214 <__divmodhi4+0xa>
    4210:	00 94       	com	r0
    4212:	06 d0       	rcall	.+12     	; 0x4220 <__divmodhi4_neg1>
    4214:	77 fd       	sbrc	r23, 7
    4216:	08 d0       	rcall	.+16     	; 0x4228 <__divmodhi4_neg2>
    4218:	e4 df       	rcall	.-56     	; 0x41e2 <__udivmodhi4>
    421a:	07 fc       	sbrc	r0, 7
    421c:	05 d0       	rcall	.+10     	; 0x4228 <__divmodhi4_neg2>
    421e:	3e f4       	brtc	.+14     	; 0x422e <__divmodhi4_exit>

00004220 <__divmodhi4_neg1>:
    4220:	90 95       	com	r25
    4222:	81 95       	neg	r24
    4224:	9f 4f       	sbci	r25, 0xFF	; 255
    4226:	08 95       	ret

00004228 <__divmodhi4_neg2>:
    4228:	70 95       	com	r23
    422a:	61 95       	neg	r22
    422c:	7f 4f       	sbci	r23, 0xFF	; 255

0000422e <__divmodhi4_exit>:
    422e:	08 95       	ret

00004230 <__udivmodsi4>:
    4230:	a1 e2       	ldi	r26, 0x21	; 33
    4232:	1a 2e       	mov	r1, r26
    4234:	aa 1b       	sub	r26, r26
    4236:	bb 1b       	sub	r27, r27
    4238:	fd 01       	movw	r30, r26
    423a:	0d c0       	rjmp	.+26     	; 0x4256 <__udivmodsi4_ep>

0000423c <__udivmodsi4_loop>:
    423c:	aa 1f       	adc	r26, r26
    423e:	bb 1f       	adc	r27, r27
    4240:	ee 1f       	adc	r30, r30
    4242:	ff 1f       	adc	r31, r31
    4244:	a2 17       	cp	r26, r18
    4246:	b3 07       	cpc	r27, r19
    4248:	e4 07       	cpc	r30, r20
    424a:	f5 07       	cpc	r31, r21
    424c:	20 f0       	brcs	.+8      	; 0x4256 <__udivmodsi4_ep>
    424e:	a2 1b       	sub	r26, r18
    4250:	b3 0b       	sbc	r27, r19
    4252:	e4 0b       	sbc	r30, r20
    4254:	f5 0b       	sbc	r31, r21

00004256 <__udivmodsi4_ep>:
    4256:	66 1f       	adc	r22, r22
    4258:	77 1f       	adc	r23, r23
    425a:	88 1f       	adc	r24, r24
    425c:	99 1f       	adc	r25, r25
    425e:	1a 94       	dec	r1
    4260:	69 f7       	brne	.-38     	; 0x423c <__udivmodsi4_loop>
    4262:	60 95       	com	r22
    4264:	70 95       	com	r23
    4266:	80 95       	com	r24
    4268:	90 95       	com	r25
    426a:	9b 01       	movw	r18, r22
    426c:	ac 01       	movw	r20, r24
    426e:	bd 01       	movw	r22, r26
    4270:	cf 01       	movw	r24, r30
    4272:	08 95       	ret

00004274 <__muluhisi3>:
    4274:	09 d0       	rcall	.+18     	; 0x4288 <__umulhisi3>
    4276:	a5 9f       	mul	r26, r21
    4278:	90 0d       	add	r25, r0
    427a:	b4 9f       	mul	r27, r20
    427c:	90 0d       	add	r25, r0
    427e:	a4 9f       	mul	r26, r20
    4280:	80 0d       	add	r24, r0
    4282:	91 1d       	adc	r25, r1
    4284:	11 24       	eor	r1, r1
    4286:	08 95       	ret

00004288 <__umulhisi3>:
    4288:	a2 9f       	mul	r26, r18
    428a:	b0 01       	movw	r22, r0
    428c:	b3 9f       	mul	r27, r19
    428e:	c0 01       	movw	r24, r0
    4290:	a3 9f       	mul	r26, r19
    4292:	70 0d       	add	r23, r0
    4294:	81 1d       	adc	r24, r1
    4296:	11 24       	eor	r1, r1
    4298:	91 1d       	adc	r25, r1
    429a:	b2 9f       	mul	r27, r18
    429c:	70 0d       	add	r23, r0
    429e:	81 1d       	adc	r24, r1
    42a0:	11 24       	eor	r1, r1
    42a2:	91 1d       	adc	r25, r1
    42a4:	08 95       	ret

000042a6 <malloc>:
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
    42ae:	82 30       	cpi	r24, 0x02	; 2
    42b0:	91 05       	cpc	r25, r1
    42b2:	10 f4       	brcc	.+4      	; 0x42b8 <malloc+0x12>
    42b4:	82 e0       	ldi	r24, 0x02	; 2
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	e0 91 70 05 	lds	r30, 0x0570	; 0x800570 <__flp>
    42bc:	f0 91 71 05 	lds	r31, 0x0571	; 0x800571 <__flp+0x1>
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	b0 e0       	ldi	r27, 0x00	; 0
    42c6:	a0 e0       	ldi	r26, 0x00	; 0
    42c8:	30 97       	sbiw	r30, 0x00	; 0
    42ca:	99 f4       	brne	.+38     	; 0x42f2 <malloc+0x4c>
    42cc:	21 15       	cp	r18, r1
    42ce:	31 05       	cpc	r19, r1
    42d0:	09 f4       	brne	.+2      	; 0x42d4 <malloc+0x2e>
    42d2:	4a c0       	rjmp	.+148    	; 0x4368 <malloc+0xc2>
    42d4:	28 1b       	sub	r18, r24
    42d6:	39 0b       	sbc	r19, r25
    42d8:	24 30       	cpi	r18, 0x04	; 4
    42da:	31 05       	cpc	r19, r1
    42dc:	d8 f5       	brcc	.+118    	; 0x4354 <malloc+0xae>
    42de:	8a 81       	ldd	r24, Y+2	; 0x02
    42e0:	9b 81       	ldd	r25, Y+3	; 0x03
    42e2:	61 15       	cp	r22, r1
    42e4:	71 05       	cpc	r23, r1
    42e6:	89 f1       	breq	.+98     	; 0x434a <malloc+0xa4>
    42e8:	fb 01       	movw	r30, r22
    42ea:	93 83       	std	Z+3, r25	; 0x03
    42ec:	82 83       	std	Z+2, r24	; 0x02
    42ee:	fe 01       	movw	r30, r28
    42f0:	11 c0       	rjmp	.+34     	; 0x4314 <malloc+0x6e>
    42f2:	40 81       	ld	r20, Z
    42f4:	51 81       	ldd	r21, Z+1	; 0x01
    42f6:	02 81       	ldd	r16, Z+2	; 0x02
    42f8:	13 81       	ldd	r17, Z+3	; 0x03
    42fa:	48 17       	cp	r20, r24
    42fc:	59 07       	cpc	r21, r25
    42fe:	e0 f0       	brcs	.+56     	; 0x4338 <malloc+0x92>
    4300:	48 17       	cp	r20, r24
    4302:	59 07       	cpc	r21, r25
    4304:	99 f4       	brne	.+38     	; 0x432c <malloc+0x86>
    4306:	10 97       	sbiw	r26, 0x00	; 0
    4308:	61 f0       	breq	.+24     	; 0x4322 <malloc+0x7c>
    430a:	12 96       	adiw	r26, 0x02	; 2
    430c:	0c 93       	st	X, r16
    430e:	12 97       	sbiw	r26, 0x02	; 2
    4310:	13 96       	adiw	r26, 0x03	; 3
    4312:	1c 93       	st	X, r17
    4314:	32 96       	adiw	r30, 0x02	; 2
    4316:	cf 01       	movw	r24, r30
    4318:	df 91       	pop	r29
    431a:	cf 91       	pop	r28
    431c:	1f 91       	pop	r17
    431e:	0f 91       	pop	r16
    4320:	08 95       	ret
    4322:	00 93 70 05 	sts	0x0570, r16	; 0x800570 <__flp>
    4326:	10 93 71 05 	sts	0x0571, r17	; 0x800571 <__flp+0x1>
    432a:	f4 cf       	rjmp	.-24     	; 0x4314 <malloc+0x6e>
    432c:	21 15       	cp	r18, r1
    432e:	31 05       	cpc	r19, r1
    4330:	51 f0       	breq	.+20     	; 0x4346 <malloc+0xa0>
    4332:	42 17       	cp	r20, r18
    4334:	53 07       	cpc	r21, r19
    4336:	38 f0       	brcs	.+14     	; 0x4346 <malloc+0xa0>
    4338:	a9 01       	movw	r20, r18
    433a:	db 01       	movw	r26, r22
    433c:	9a 01       	movw	r18, r20
    433e:	bd 01       	movw	r22, r26
    4340:	df 01       	movw	r26, r30
    4342:	f8 01       	movw	r30, r16
    4344:	c1 cf       	rjmp	.-126    	; 0x42c8 <malloc+0x22>
    4346:	ef 01       	movw	r28, r30
    4348:	f9 cf       	rjmp	.-14     	; 0x433c <malloc+0x96>
    434a:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <__flp+0x1>
    434e:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <__flp>
    4352:	cd cf       	rjmp	.-102    	; 0x42ee <malloc+0x48>
    4354:	fe 01       	movw	r30, r28
    4356:	e2 0f       	add	r30, r18
    4358:	f3 1f       	adc	r31, r19
    435a:	81 93       	st	Z+, r24
    435c:	91 93       	st	Z+, r25
    435e:	22 50       	subi	r18, 0x02	; 2
    4360:	31 09       	sbc	r19, r1
    4362:	39 83       	std	Y+1, r19	; 0x01
    4364:	28 83       	st	Y, r18
    4366:	d7 cf       	rjmp	.-82     	; 0x4316 <malloc+0x70>
    4368:	20 91 6e 05 	lds	r18, 0x056E	; 0x80056e <__brkval>
    436c:	30 91 6f 05 	lds	r19, 0x056F	; 0x80056f <__brkval+0x1>
    4370:	23 2b       	or	r18, r19
    4372:	41 f4       	brne	.+16     	; 0x4384 <malloc+0xde>
    4374:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <__malloc_heap_start>
    4378:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <__malloc_heap_start+0x1>
    437c:	30 93 6f 05 	sts	0x056F, r19	; 0x80056f <__brkval+0x1>
    4380:	20 93 6e 05 	sts	0x056E, r18	; 0x80056e <__brkval>
    4384:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <__malloc_heap_end>
    4388:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <__malloc_heap_end+0x1>
    438c:	21 15       	cp	r18, r1
    438e:	31 05       	cpc	r19, r1
    4390:	41 f4       	brne	.+16     	; 0x43a2 <malloc+0xfc>
    4392:	2d b7       	in	r18, 0x3d	; 61
    4394:	3e b7       	in	r19, 0x3e	; 62
    4396:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <__malloc_margin>
    439a:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <__malloc_margin+0x1>
    439e:	24 1b       	sub	r18, r20
    43a0:	35 0b       	sbc	r19, r21
    43a2:	e0 91 6e 05 	lds	r30, 0x056E	; 0x80056e <__brkval>
    43a6:	f0 91 6f 05 	lds	r31, 0x056F	; 0x80056f <__brkval+0x1>
    43aa:	e2 17       	cp	r30, r18
    43ac:	f3 07       	cpc	r31, r19
    43ae:	a0 f4       	brcc	.+40     	; 0x43d8 <malloc+0x132>
    43b0:	2e 1b       	sub	r18, r30
    43b2:	3f 0b       	sbc	r19, r31
    43b4:	28 17       	cp	r18, r24
    43b6:	39 07       	cpc	r19, r25
    43b8:	78 f0       	brcs	.+30     	; 0x43d8 <malloc+0x132>
    43ba:	ac 01       	movw	r20, r24
    43bc:	4e 5f       	subi	r20, 0xFE	; 254
    43be:	5f 4f       	sbci	r21, 0xFF	; 255
    43c0:	24 17       	cp	r18, r20
    43c2:	35 07       	cpc	r19, r21
    43c4:	48 f0       	brcs	.+18     	; 0x43d8 <malloc+0x132>
    43c6:	4e 0f       	add	r20, r30
    43c8:	5f 1f       	adc	r21, r31
    43ca:	50 93 6f 05 	sts	0x056F, r21	; 0x80056f <__brkval+0x1>
    43ce:	40 93 6e 05 	sts	0x056E, r20	; 0x80056e <__brkval>
    43d2:	81 93       	st	Z+, r24
    43d4:	91 93       	st	Z+, r25
    43d6:	9f cf       	rjmp	.-194    	; 0x4316 <malloc+0x70>
    43d8:	f0 e0       	ldi	r31, 0x00	; 0
    43da:	e0 e0       	ldi	r30, 0x00	; 0
    43dc:	9c cf       	rjmp	.-200    	; 0x4316 <malloc+0x70>

000043de <free>:
    43de:	cf 93       	push	r28
    43e0:	df 93       	push	r29
    43e2:	00 97       	sbiw	r24, 0x00	; 0
    43e4:	e9 f0       	breq	.+58     	; 0x4420 <free+0x42>
    43e6:	fc 01       	movw	r30, r24
    43e8:	32 97       	sbiw	r30, 0x02	; 2
    43ea:	13 82       	std	Z+3, r1	; 0x03
    43ec:	12 82       	std	Z+2, r1	; 0x02
    43ee:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <__flp>
    43f2:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <__flp+0x1>
    43f6:	ed 01       	movw	r28, r26
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	10 97       	sbiw	r26, 0x00	; 0
    43fe:	a1 f4       	brne	.+40     	; 0x4428 <free+0x4a>
    4400:	20 81       	ld	r18, Z
    4402:	31 81       	ldd	r19, Z+1	; 0x01
    4404:	82 0f       	add	r24, r18
    4406:	93 1f       	adc	r25, r19
    4408:	20 91 6e 05 	lds	r18, 0x056E	; 0x80056e <__brkval>
    440c:	30 91 6f 05 	lds	r19, 0x056F	; 0x80056f <__brkval+0x1>
    4410:	28 17       	cp	r18, r24
    4412:	39 07       	cpc	r19, r25
    4414:	09 f0       	breq	.+2      	; 0x4418 <free+0x3a>
    4416:	61 c0       	rjmp	.+194    	; 0x44da <free+0xfc>
    4418:	f0 93 6f 05 	sts	0x056F, r31	; 0x80056f <__brkval+0x1>
    441c:	e0 93 6e 05 	sts	0x056E, r30	; 0x80056e <__brkval>
    4420:	df 91       	pop	r29
    4422:	cf 91       	pop	r28
    4424:	08 95       	ret
    4426:	ea 01       	movw	r28, r20
    4428:	ce 17       	cp	r28, r30
    442a:	df 07       	cpc	r29, r31
    442c:	e8 f5       	brcc	.+122    	; 0x44a8 <free+0xca>
    442e:	4a 81       	ldd	r20, Y+2	; 0x02
    4430:	5b 81       	ldd	r21, Y+3	; 0x03
    4432:	9e 01       	movw	r18, r28
    4434:	41 15       	cp	r20, r1
    4436:	51 05       	cpc	r21, r1
    4438:	b1 f7       	brne	.-20     	; 0x4426 <free+0x48>
    443a:	e9 01       	movw	r28, r18
    443c:	fb 83       	std	Y+3, r31	; 0x03
    443e:	ea 83       	std	Y+2, r30	; 0x02
    4440:	49 91       	ld	r20, Y+
    4442:	59 91       	ld	r21, Y+
    4444:	c4 0f       	add	r28, r20
    4446:	d5 1f       	adc	r29, r21
    4448:	ec 17       	cp	r30, r28
    444a:	fd 07       	cpc	r31, r29
    444c:	61 f4       	brne	.+24     	; 0x4466 <free+0x88>
    444e:	80 81       	ld	r24, Z
    4450:	91 81       	ldd	r25, Z+1	; 0x01
    4452:	02 96       	adiw	r24, 0x02	; 2
    4454:	84 0f       	add	r24, r20
    4456:	95 1f       	adc	r25, r21
    4458:	e9 01       	movw	r28, r18
    445a:	99 83       	std	Y+1, r25	; 0x01
    445c:	88 83       	st	Y, r24
    445e:	82 81       	ldd	r24, Z+2	; 0x02
    4460:	93 81       	ldd	r25, Z+3	; 0x03
    4462:	9b 83       	std	Y+3, r25	; 0x03
    4464:	8a 83       	std	Y+2, r24	; 0x02
    4466:	f0 e0       	ldi	r31, 0x00	; 0
    4468:	e0 e0       	ldi	r30, 0x00	; 0
    446a:	12 96       	adiw	r26, 0x02	; 2
    446c:	8d 91       	ld	r24, X+
    446e:	9c 91       	ld	r25, X
    4470:	13 97       	sbiw	r26, 0x03	; 3
    4472:	00 97       	sbiw	r24, 0x00	; 0
    4474:	b9 f5       	brne	.+110    	; 0x44e4 <free+0x106>
    4476:	2d 91       	ld	r18, X+
    4478:	3c 91       	ld	r19, X
    447a:	11 97       	sbiw	r26, 0x01	; 1
    447c:	cd 01       	movw	r24, r26
    447e:	02 96       	adiw	r24, 0x02	; 2
    4480:	82 0f       	add	r24, r18
    4482:	93 1f       	adc	r25, r19
    4484:	20 91 6e 05 	lds	r18, 0x056E	; 0x80056e <__brkval>
    4488:	30 91 6f 05 	lds	r19, 0x056F	; 0x80056f <__brkval+0x1>
    448c:	28 17       	cp	r18, r24
    448e:	39 07       	cpc	r19, r25
    4490:	39 f6       	brne	.-114    	; 0x4420 <free+0x42>
    4492:	30 97       	sbiw	r30, 0x00	; 0
    4494:	51 f5       	brne	.+84     	; 0x44ea <free+0x10c>
    4496:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <__flp+0x1>
    449a:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <__flp>
    449e:	b0 93 6f 05 	sts	0x056F, r27	; 0x80056f <__brkval+0x1>
    44a2:	a0 93 6e 05 	sts	0x056E, r26	; 0x80056e <__brkval>
    44a6:	bc cf       	rjmp	.-136    	; 0x4420 <free+0x42>
    44a8:	d3 83       	std	Z+3, r29	; 0x03
    44aa:	c2 83       	std	Z+2, r28	; 0x02
    44ac:	40 81       	ld	r20, Z
    44ae:	51 81       	ldd	r21, Z+1	; 0x01
    44b0:	84 0f       	add	r24, r20
    44b2:	95 1f       	adc	r25, r21
    44b4:	c8 17       	cp	r28, r24
    44b6:	d9 07       	cpc	r29, r25
    44b8:	61 f4       	brne	.+24     	; 0x44d2 <free+0xf4>
    44ba:	4e 5f       	subi	r20, 0xFE	; 254
    44bc:	5f 4f       	sbci	r21, 0xFF	; 255
    44be:	88 81       	ld	r24, Y
    44c0:	99 81       	ldd	r25, Y+1	; 0x01
    44c2:	48 0f       	add	r20, r24
    44c4:	59 1f       	adc	r21, r25
    44c6:	51 83       	std	Z+1, r21	; 0x01
    44c8:	40 83       	st	Z, r20
    44ca:	8a 81       	ldd	r24, Y+2	; 0x02
    44cc:	9b 81       	ldd	r25, Y+3	; 0x03
    44ce:	93 83       	std	Z+3, r25	; 0x03
    44d0:	82 83       	std	Z+2, r24	; 0x02
    44d2:	21 15       	cp	r18, r1
    44d4:	31 05       	cpc	r19, r1
    44d6:	09 f0       	breq	.+2      	; 0x44da <free+0xfc>
    44d8:	b0 cf       	rjmp	.-160    	; 0x443a <free+0x5c>
    44da:	f0 93 71 05 	sts	0x0571, r31	; 0x800571 <__flp+0x1>
    44de:	e0 93 70 05 	sts	0x0570, r30	; 0x800570 <__flp>
    44e2:	9e cf       	rjmp	.-196    	; 0x4420 <free+0x42>
    44e4:	fd 01       	movw	r30, r26
    44e6:	dc 01       	movw	r26, r24
    44e8:	c0 cf       	rjmp	.-128    	; 0x446a <free+0x8c>
    44ea:	13 82       	std	Z+3, r1	; 0x03
    44ec:	12 82       	std	Z+2, r1	; 0x02
    44ee:	d7 cf       	rjmp	.-82     	; 0x449e <free+0xc0>

000044f0 <strtol>:
    44f0:	b0 e0       	ldi	r27, 0x00	; 0
    44f2:	a0 e0       	ldi	r26, 0x00	; 0
    44f4:	ed e7       	ldi	r30, 0x7D	; 125
    44f6:	f2 e2       	ldi	r31, 0x22	; 34
    44f8:	ba c1       	rjmp	.+884    	; 0x486e <__prologue_saves__+0x2>
    44fa:	5c 01       	movw	r10, r24
    44fc:	6b 01       	movw	r12, r22
    44fe:	7a 01       	movw	r14, r20
    4500:	61 15       	cp	r22, r1
    4502:	71 05       	cpc	r23, r1
    4504:	19 f0       	breq	.+6      	; 0x450c <strtol+0x1c>
    4506:	fb 01       	movw	r30, r22
    4508:	91 83       	std	Z+1, r25	; 0x01
    450a:	80 83       	st	Z, r24
    450c:	e1 14       	cp	r14, r1
    450e:	f1 04       	cpc	r15, r1
    4510:	51 f0       	breq	.+20     	; 0x4526 <strtol+0x36>
    4512:	c7 01       	movw	r24, r14
    4514:	02 97       	sbiw	r24, 0x02	; 2
    4516:	83 97       	sbiw	r24, 0x23	; 35
    4518:	30 f0       	brcs	.+12     	; 0x4526 <strtol+0x36>
    451a:	40 e0       	ldi	r20, 0x00	; 0
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	71 c0       	rjmp	.+226    	; 0x4606 <strtol+0x116>
    4524:	5e 01       	movw	r10, r28
    4526:	e5 01       	movw	r28, r10
    4528:	21 96       	adiw	r28, 0x01	; 1
    452a:	f5 01       	movw	r30, r10
    452c:	10 81       	ld	r17, Z
    452e:	81 2f       	mov	r24, r17
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	f0 d0       	rcall	.+480    	; 0x4714 <isspace>
    4534:	89 2b       	or	r24, r25
    4536:	b1 f7       	brne	.-20     	; 0x4524 <strtol+0x34>
    4538:	1d 32       	cpi	r17, 0x2D	; 45
    453a:	01 f5       	brne	.+64     	; 0x457c <strtol+0x8c>
    453c:	21 96       	adiw	r28, 0x01	; 1
    453e:	f5 01       	movw	r30, r10
    4540:	11 81       	ldd	r17, Z+1	; 0x01
    4542:	01 e0       	ldi	r16, 0x01	; 1
    4544:	e1 14       	cp	r14, r1
    4546:	f1 04       	cpc	r15, r1
    4548:	09 f4       	brne	.+2      	; 0x454c <strtol+0x5c>
    454a:	d7 c0       	rjmp	.+430    	; 0x46fa <strtol+0x20a>
    454c:	f0 e1       	ldi	r31, 0x10	; 16
    454e:	ef 16       	cp	r14, r31
    4550:	f1 04       	cpc	r15, r1
    4552:	09 f0       	breq	.+2      	; 0x4556 <strtol+0x66>
    4554:	81 c0       	rjmp	.+258    	; 0x4658 <strtol+0x168>
    4556:	10 33       	cpi	r17, 0x30	; 48
    4558:	59 f4       	brne	.+22     	; 0x4570 <strtol+0x80>
    455a:	88 81       	ld	r24, Y
    455c:	8f 7d       	andi	r24, 0xDF	; 223
    455e:	88 35       	cpi	r24, 0x58	; 88
    4560:	09 f0       	breq	.+2      	; 0x4564 <strtol+0x74>
    4562:	75 c0       	rjmp	.+234    	; 0x464e <strtol+0x15e>
    4564:	19 81       	ldd	r17, Y+1	; 0x01
    4566:	22 96       	adiw	r28, 0x02	; 2
    4568:	02 60       	ori	r16, 0x02	; 2
    456a:	f0 e1       	ldi	r31, 0x10	; 16
    456c:	ef 2e       	mov	r14, r31
    456e:	f1 2c       	mov	r15, r1
    4570:	81 2c       	mov	r8, r1
    4572:	91 2c       	mov	r9, r1
    4574:	a1 2c       	mov	r10, r1
    4576:	88 e0       	ldi	r24, 0x08	; 8
    4578:	b8 2e       	mov	r11, r24
    457a:	8a c0       	rjmp	.+276    	; 0x4690 <strtol+0x1a0>
    457c:	1b 32       	cpi	r17, 0x2B	; 43
    457e:	21 f4       	brne	.+8      	; 0x4588 <strtol+0x98>
    4580:	e5 01       	movw	r28, r10
    4582:	22 96       	adiw	r28, 0x02	; 2
    4584:	f5 01       	movw	r30, r10
    4586:	11 81       	ldd	r17, Z+1	; 0x01
    4588:	00 e0       	ldi	r16, 0x00	; 0
    458a:	dc cf       	rjmp	.-72     	; 0x4544 <strtol+0x54>
    458c:	ea e0       	ldi	r30, 0x0A	; 10
    458e:	ee 16       	cp	r14, r30
    4590:	f1 04       	cpc	r15, r1
    4592:	09 f4       	brne	.+2      	; 0x4596 <strtol+0xa6>
    4594:	b8 c0       	rjmp	.+368    	; 0x4706 <strtol+0x216>
    4596:	f0 e1       	ldi	r31, 0x10	; 16
    4598:	ef 16       	cp	r14, r31
    459a:	f1 04       	cpc	r15, r1
    459c:	09 f0       	breq	.+2      	; 0x45a0 <strtol+0xb0>
    459e:	6c c0       	rjmp	.+216    	; 0x4678 <strtol+0x188>
    45a0:	e7 cf       	rjmp	.-50     	; 0x4570 <strtol+0x80>
    45a2:	78 e0       	ldi	r23, 0x08	; 8
    45a4:	e7 2e       	mov	r14, r23
    45a6:	f1 2c       	mov	r15, r1
    45a8:	81 2c       	mov	r8, r1
    45aa:	91 2c       	mov	r9, r1
    45ac:	a1 2c       	mov	r10, r1
    45ae:	60 e1       	ldi	r22, 0x10	; 16
    45b0:	b6 2e       	mov	r11, r22
    45b2:	6e c0       	rjmp	.+220    	; 0x4690 <strtol+0x1a0>
    45b4:	3f e9       	ldi	r19, 0x9F	; 159
    45b6:	31 0f       	add	r19, r17
    45b8:	3a 31       	cpi	r19, 0x1A	; 26
    45ba:	28 f4       	brcc	.+10     	; 0x45c6 <strtol+0xd6>
    45bc:	39 ea       	ldi	r19, 0xA9	; 169
    45be:	33 2e       	mov	r3, r19
    45c0:	7e c0       	rjmp	.+252    	; 0x46be <strtol+0x1ce>
    45c2:	21 e0       	ldi	r18, 0x01	; 1
    45c4:	97 c0       	rjmp	.+302    	; 0x46f4 <strtol+0x204>
    45c6:	30 2f       	mov	r19, r16
    45c8:	31 70       	andi	r19, 0x01	; 1
    45ca:	c1 14       	cp	r12, r1
    45cc:	d1 04       	cpc	r13, r1
    45ce:	31 f0       	breq	.+12     	; 0x45dc <strtol+0xec>
    45d0:	22 23       	and	r18, r18
    45d2:	01 f1       	breq	.+64     	; 0x4614 <strtol+0x124>
    45d4:	21 97       	sbiw	r28, 0x01	; 1
    45d6:	f6 01       	movw	r30, r12
    45d8:	d1 83       	std	Z+1, r29	; 0x01
    45da:	c0 83       	st	Z, r28
    45dc:	27 ff       	sbrs	r18, 7
    45de:	20 c0       	rjmp	.+64     	; 0x4620 <strtol+0x130>
    45e0:	60 e0       	ldi	r22, 0x00	; 0
    45e2:	70 e0       	ldi	r23, 0x00	; 0
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	90 e8       	ldi	r25, 0x80	; 128
    45e8:	31 11       	cpse	r19, r1
    45ea:	04 c0       	rjmp	.+8      	; 0x45f4 <strtol+0x104>
    45ec:	6f ef       	ldi	r22, 0xFF	; 255
    45ee:	7f ef       	ldi	r23, 0xFF	; 255
    45f0:	8f ef       	ldi	r24, 0xFF	; 255
    45f2:	9f e7       	ldi	r25, 0x7F	; 127
    45f4:	22 e2       	ldi	r18, 0x22	; 34
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	30 93 73 05 	sts	0x0573, r19	; 0x800573 <errno+0x1>
    45fc:	20 93 72 05 	sts	0x0572, r18	; 0x800572 <errno>
    4600:	46 2f       	mov	r20, r22
    4602:	37 2f       	mov	r19, r23
    4604:	28 2f       	mov	r18, r24
    4606:	64 2f       	mov	r22, r20
    4608:	73 2f       	mov	r23, r19
    460a:	82 2f       	mov	r24, r18
    460c:	cd b7       	in	r28, 0x3d	; 61
    460e:	de b7       	in	r29, 0x3e	; 62
    4610:	e1 e1       	ldi	r30, 0x11	; 17
    4612:	49 c1       	rjmp	.+658    	; 0x48a6 <__epilogue_restores__+0x2>
    4614:	01 ff       	sbrs	r16, 1
    4616:	04 c0       	rjmp	.+8      	; 0x4620 <strtol+0x130>
    4618:	22 97       	sbiw	r28, 0x02	; 2
    461a:	f6 01       	movw	r30, r12
    461c:	d1 83       	std	Z+1, r29	; 0x01
    461e:	c0 83       	st	Z, r28
    4620:	33 23       	and	r19, r19
    4622:	41 f0       	breq	.+16     	; 0x4634 <strtol+0x144>
    4624:	90 95       	com	r25
    4626:	80 95       	com	r24
    4628:	70 95       	com	r23
    462a:	61 95       	neg	r22
    462c:	7f 4f       	sbci	r23, 0xFF	; 255
    462e:	8f 4f       	sbci	r24, 0xFF	; 255
    4630:	9f 4f       	sbci	r25, 0xFF	; 255
    4632:	e6 cf       	rjmp	.-52     	; 0x4600 <strtol+0x110>
    4634:	97 ff       	sbrs	r25, 7
    4636:	e4 cf       	rjmp	.-56     	; 0x4600 <strtol+0x110>
    4638:	82 e2       	ldi	r24, 0x22	; 34
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <errno+0x1>
    4640:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <errno>
    4644:	6f ef       	ldi	r22, 0xFF	; 255
    4646:	7f ef       	ldi	r23, 0xFF	; 255
    4648:	8f ef       	ldi	r24, 0xFF	; 255
    464a:	9f e7       	ldi	r25, 0x7F	; 127
    464c:	d9 cf       	rjmp	.-78     	; 0x4600 <strtol+0x110>
    464e:	10 e3       	ldi	r17, 0x30	; 48
    4650:	e1 14       	cp	r14, r1
    4652:	f1 04       	cpc	r15, r1
    4654:	09 f4       	brne	.+2      	; 0x4658 <strtol+0x168>
    4656:	a5 cf       	rjmp	.-182    	; 0x45a2 <strtol+0xb2>
    4658:	28 e0       	ldi	r18, 0x08	; 8
    465a:	e2 16       	cp	r14, r18
    465c:	f1 04       	cpc	r15, r1
    465e:	09 f4       	brne	.+2      	; 0x4662 <strtol+0x172>
    4660:	a3 cf       	rjmp	.-186    	; 0x45a8 <strtol+0xb8>
    4662:	0c f0       	brlt	.+2      	; 0x4666 <strtol+0x176>
    4664:	93 cf       	rjmp	.-218    	; 0x458c <strtol+0x9c>
    4666:	81 2c       	mov	r8, r1
    4668:	91 2c       	mov	r9, r1
    466a:	a1 2c       	mov	r10, r1
    466c:	e0 e4       	ldi	r30, 0x40	; 64
    466e:	be 2e       	mov	r11, r30
    4670:	82 e0       	ldi	r24, 0x02	; 2
    4672:	e8 16       	cp	r14, r24
    4674:	f1 04       	cpc	r15, r1
    4676:	61 f0       	breq	.+24     	; 0x4690 <strtol+0x1a0>
    4678:	60 e0       	ldi	r22, 0x00	; 0
    467a:	70 e0       	ldi	r23, 0x00	; 0
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	90 e8       	ldi	r25, 0x80	; 128
    4680:	97 01       	movw	r18, r14
    4682:	0f 2c       	mov	r0, r15
    4684:	00 0c       	add	r0, r0
    4686:	44 0b       	sbc	r20, r20
    4688:	55 0b       	sbc	r21, r21
    468a:	d2 dd       	rcall	.-1116   	; 0x4230 <__udivmodsi4>
    468c:	49 01       	movw	r8, r18
    468e:	5a 01       	movw	r10, r20
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	60 e0       	ldi	r22, 0x00	; 0
    4694:	70 e0       	ldi	r23, 0x00	; 0
    4696:	cb 01       	movw	r24, r22
    4698:	27 01       	movw	r4, r14
    469a:	0f 2c       	mov	r0, r15
    469c:	00 0c       	add	r0, r0
    469e:	66 08       	sbc	r6, r6
    46a0:	77 08       	sbc	r7, r7
    46a2:	fe 01       	movw	r30, r28
    46a4:	50 ed       	ldi	r21, 0xD0	; 208
    46a6:	35 2e       	mov	r3, r21
    46a8:	31 0e       	add	r3, r17
    46aa:	39 e0       	ldi	r19, 0x09	; 9
    46ac:	33 15       	cp	r19, r3
    46ae:	40 f4       	brcc	.+16     	; 0x46c0 <strtol+0x1d0>
    46b0:	3f eb       	ldi	r19, 0xBF	; 191
    46b2:	31 0f       	add	r19, r17
    46b4:	3a 31       	cpi	r19, 0x1A	; 26
    46b6:	08 f0       	brcs	.+2      	; 0x46ba <strtol+0x1ca>
    46b8:	7d cf       	rjmp	.-262    	; 0x45b4 <strtol+0xc4>
    46ba:	49 ec       	ldi	r20, 0xC9	; 201
    46bc:	34 2e       	mov	r3, r20
    46be:	31 0e       	add	r3, r17
    46c0:	3e 14       	cp	r3, r14
    46c2:	1f 04       	cpc	r1, r15
    46c4:	0c f0       	brlt	.+2      	; 0x46c8 <strtol+0x1d8>
    46c6:	7f cf       	rjmp	.-258    	; 0x45c6 <strtol+0xd6>
    46c8:	27 fd       	sbrc	r18, 7
    46ca:	14 c0       	rjmp	.+40     	; 0x46f4 <strtol+0x204>
    46cc:	86 16       	cp	r8, r22
    46ce:	97 06       	cpc	r9, r23
    46d0:	a8 06       	cpc	r10, r24
    46d2:	b9 06       	cpc	r11, r25
    46d4:	70 f0       	brcs	.+28     	; 0x46f2 <strtol+0x202>
    46d6:	a3 01       	movw	r20, r6
    46d8:	92 01       	movw	r18, r4
    46da:	b9 d0       	rcall	.+370    	; 0x484e <__mulsi3>
    46dc:	63 0d       	add	r22, r3
    46de:	71 1d       	adc	r23, r1
    46e0:	81 1d       	adc	r24, r1
    46e2:	91 1d       	adc	r25, r1
    46e4:	61 30       	cpi	r22, 0x01	; 1
    46e6:	71 05       	cpc	r23, r1
    46e8:	81 05       	cpc	r24, r1
    46ea:	20 e8       	ldi	r18, 0x80	; 128
    46ec:	92 07       	cpc	r25, r18
    46ee:	08 f4       	brcc	.+2      	; 0x46f2 <strtol+0x202>
    46f0:	68 cf       	rjmp	.-304    	; 0x45c2 <strtol+0xd2>
    46f2:	2f ef       	ldi	r18, 0xFF	; 255
    46f4:	21 96       	adiw	r28, 0x01	; 1
    46f6:	10 81       	ld	r17, Z
    46f8:	d4 cf       	rjmp	.-88     	; 0x46a2 <strtol+0x1b2>
    46fa:	10 33       	cpi	r17, 0x30	; 48
    46fc:	09 f4       	brne	.+2      	; 0x4700 <strtol+0x210>
    46fe:	2d cf       	rjmp	.-422    	; 0x455a <strtol+0x6a>
    4700:	2a e0       	ldi	r18, 0x0A	; 10
    4702:	e2 2e       	mov	r14, r18
    4704:	f1 2c       	mov	r15, r1
    4706:	9c ec       	ldi	r25, 0xCC	; 204
    4708:	89 2e       	mov	r8, r25
    470a:	98 2c       	mov	r9, r8
    470c:	a8 2c       	mov	r10, r8
    470e:	9c e0       	ldi	r25, 0x0C	; 12
    4710:	b9 2e       	mov	r11, r25
    4712:	be cf       	rjmp	.-132    	; 0x4690 <strtol+0x1a0>

00004714 <isspace>:
    4714:	91 11       	cpse	r25, r1
    4716:	5c c0       	rjmp	.+184    	; 0x47d0 <__ctype_isfalse>
    4718:	80 32       	cpi	r24, 0x20	; 32
    471a:	19 f0       	breq	.+6      	; 0x4722 <isspace+0xe>
    471c:	89 50       	subi	r24, 0x09	; 9
    471e:	85 50       	subi	r24, 0x05	; 5
    4720:	d0 f7       	brcc	.-12     	; 0x4716 <isspace+0x2>
    4722:	08 95       	ret

00004724 <memcmp>:
    4724:	fb 01       	movw	r30, r22
    4726:	dc 01       	movw	r26, r24
    4728:	04 c0       	rjmp	.+8      	; 0x4732 <memcmp+0xe>
    472a:	8d 91       	ld	r24, X+
    472c:	01 90       	ld	r0, Z+
    472e:	80 19       	sub	r24, r0
    4730:	21 f4       	brne	.+8      	; 0x473a <memcmp+0x16>
    4732:	41 50       	subi	r20, 0x01	; 1
    4734:	50 40       	sbci	r21, 0x00	; 0
    4736:	c8 f7       	brcc	.-14     	; 0x472a <memcmp+0x6>
    4738:	88 1b       	sub	r24, r24
    473a:	99 0b       	sbc	r25, r25
    473c:	08 95       	ret

0000473e <memcpy>:
    473e:	fb 01       	movw	r30, r22
    4740:	dc 01       	movw	r26, r24
    4742:	02 c0       	rjmp	.+4      	; 0x4748 <memcpy+0xa>
    4744:	01 90       	ld	r0, Z+
    4746:	0d 92       	st	X+, r0
    4748:	41 50       	subi	r20, 0x01	; 1
    474a:	50 40       	sbci	r21, 0x00	; 0
    474c:	d8 f7       	brcc	.-10     	; 0x4744 <memcpy+0x6>
    474e:	08 95       	ret

00004750 <memset>:
    4750:	dc 01       	movw	r26, r24
    4752:	01 c0       	rjmp	.+2      	; 0x4756 <memset+0x6>
    4754:	6d 93       	st	X+, r22
    4756:	41 50       	subi	r20, 0x01	; 1
    4758:	50 40       	sbci	r21, 0x00	; 0
    475a:	e0 f7       	brcc	.-8      	; 0x4754 <memset+0x4>
    475c:	08 95       	ret

0000475e <strcmp>:
    475e:	fb 01       	movw	r30, r22
    4760:	dc 01       	movw	r26, r24
    4762:	8d 91       	ld	r24, X+
    4764:	01 90       	ld	r0, Z+
    4766:	80 19       	sub	r24, r0
    4768:	01 10       	cpse	r0, r1
    476a:	d9 f3       	breq	.-10     	; 0x4762 <strcmp+0x4>
    476c:	99 0b       	sbc	r25, r25
    476e:	08 95       	ret

00004770 <strcpy>:
    4770:	fb 01       	movw	r30, r22
    4772:	dc 01       	movw	r26, r24
    4774:	01 90       	ld	r0, Z+
    4776:	0d 92       	st	X+, r0
    4778:	00 20       	and	r0, r0
    477a:	e1 f7       	brne	.-8      	; 0x4774 <strcpy+0x4>
    477c:	08 95       	ret

0000477e <fread>:
    477e:	b0 e0       	ldi	r27, 0x00	; 0
    4780:	a0 e0       	ldi	r26, 0x00	; 0
    4782:	e4 ec       	ldi	r30, 0xC4	; 196
    4784:	f3 e2       	ldi	r31, 0x23	; 35
    4786:	78 c0       	rjmp	.+240    	; 0x4878 <__prologue_saves__+0xc>
    4788:	5b 01       	movw	r10, r22
    478a:	4a 01       	movw	r8, r20
    478c:	79 01       	movw	r14, r18
    478e:	f9 01       	movw	r30, r18
    4790:	23 81       	ldd	r18, Z+3	; 0x03
    4792:	d0 e0       	ldi	r29, 0x00	; 0
    4794:	c0 e0       	ldi	r28, 0x00	; 0
    4796:	20 ff       	sbrs	r18, 0
    4798:	16 c0       	rjmp	.+44     	; 0x47c6 <fread+0x48>
    479a:	c8 15       	cp	r28, r8
    479c:	d9 05       	cpc	r29, r9
    479e:	99 f0       	breq	.+38     	; 0x47c6 <fread+0x48>
    47a0:	8c 01       	movw	r16, r24
    47a2:	6c 01       	movw	r12, r24
    47a4:	ca 0c       	add	r12, r10
    47a6:	db 1c       	adc	r13, r11
    47a8:	08 c0       	rjmp	.+16     	; 0x47ba <fread+0x3c>
    47aa:	c7 01       	movw	r24, r14
    47ac:	14 d0       	rcall	.+40     	; 0x47d6 <fgetc>
    47ae:	8f 3f       	cpi	r24, 0xFF	; 255
    47b0:	98 07       	cpc	r25, r24
    47b2:	49 f0       	breq	.+18     	; 0x47c6 <fread+0x48>
    47b4:	f8 01       	movw	r30, r16
    47b6:	81 93       	st	Z+, r24
    47b8:	8f 01       	movw	r16, r30
    47ba:	c8 01       	movw	r24, r16
    47bc:	0c 15       	cp	r16, r12
    47be:	1d 05       	cpc	r17, r13
    47c0:	a1 f7       	brne	.-24     	; 0x47aa <fread+0x2c>
    47c2:	21 96       	adiw	r28, 0x01	; 1
    47c4:	ea cf       	rjmp	.-44     	; 0x479a <fread+0x1c>
    47c6:	ce 01       	movw	r24, r28
    47c8:	cd b7       	in	r28, 0x3d	; 61
    47ca:	de b7       	in	r29, 0x3e	; 62
    47cc:	ec e0       	ldi	r30, 0x0C	; 12
    47ce:	70 c0       	rjmp	.+224    	; 0x48b0 <__epilogue_restores__+0xc>

000047d0 <__ctype_isfalse>:
    47d0:	99 27       	eor	r25, r25
    47d2:	88 27       	eor	r24, r24

000047d4 <__ctype_istrue>:
    47d4:	08 95       	ret

000047d6 <fgetc>:
    47d6:	cf 93       	push	r28
    47d8:	df 93       	push	r29
    47da:	ec 01       	movw	r28, r24
    47dc:	2b 81       	ldd	r18, Y+3	; 0x03
    47de:	20 ff       	sbrs	r18, 0
    47e0:	1a c0       	rjmp	.+52     	; 0x4816 <fgetc+0x40>
    47e2:	26 ff       	sbrs	r18, 6
    47e4:	0c c0       	rjmp	.+24     	; 0x47fe <fgetc+0x28>
    47e6:	2f 7b       	andi	r18, 0xBF	; 191
    47e8:	2b 83       	std	Y+3, r18	; 0x03
    47ea:	8e 81       	ldd	r24, Y+6	; 0x06
    47ec:	9f 81       	ldd	r25, Y+7	; 0x07
    47ee:	01 96       	adiw	r24, 0x01	; 1
    47f0:	9f 83       	std	Y+7, r25	; 0x07
    47f2:	8e 83       	std	Y+6, r24	; 0x06
    47f4:	8a 81       	ldd	r24, Y+2	; 0x02
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	df 91       	pop	r29
    47fa:	cf 91       	pop	r28
    47fc:	08 95       	ret
    47fe:	22 ff       	sbrs	r18, 2
    4800:	18 c0       	rjmp	.+48     	; 0x4832 <fgetc+0x5c>
    4802:	e8 81       	ld	r30, Y
    4804:	f9 81       	ldd	r31, Y+1	; 0x01
    4806:	80 81       	ld	r24, Z
    4808:	08 2e       	mov	r0, r24
    480a:	00 0c       	add	r0, r0
    480c:	99 0b       	sbc	r25, r25
    480e:	00 97       	sbiw	r24, 0x00	; 0
    4810:	29 f4       	brne	.+10     	; 0x481c <fgetc+0x46>
    4812:	20 62       	ori	r18, 0x20	; 32
    4814:	2b 83       	std	Y+3, r18	; 0x03
    4816:	8f ef       	ldi	r24, 0xFF	; 255
    4818:	9f ef       	ldi	r25, 0xFF	; 255
    481a:	ee cf       	rjmp	.-36     	; 0x47f8 <fgetc+0x22>
    481c:	31 96       	adiw	r30, 0x01	; 1
    481e:	f9 83       	std	Y+1, r31	; 0x01
    4820:	e8 83       	st	Y, r30
    4822:	2e 81       	ldd	r18, Y+6	; 0x06
    4824:	3f 81       	ldd	r19, Y+7	; 0x07
    4826:	2f 5f       	subi	r18, 0xFF	; 255
    4828:	3f 4f       	sbci	r19, 0xFF	; 255
    482a:	3f 83       	std	Y+7, r19	; 0x07
    482c:	2e 83       	std	Y+6, r18	; 0x06
    482e:	99 27       	eor	r25, r25
    4830:	e3 cf       	rjmp	.-58     	; 0x47f8 <fgetc+0x22>
    4832:	ea 85       	ldd	r30, Y+10	; 0x0a
    4834:	fb 85       	ldd	r31, Y+11	; 0x0b
    4836:	09 95       	icall
    4838:	97 ff       	sbrs	r25, 7
    483a:	f3 cf       	rjmp	.-26     	; 0x4822 <fgetc+0x4c>
    483c:	2b 81       	ldd	r18, Y+3	; 0x03
    483e:	01 96       	adiw	r24, 0x01	; 1
    4840:	21 f0       	breq	.+8      	; 0x484a <fgetc+0x74>
    4842:	80 e2       	ldi	r24, 0x20	; 32
    4844:	82 2b       	or	r24, r18
    4846:	8b 83       	std	Y+3, r24	; 0x03
    4848:	e6 cf       	rjmp	.-52     	; 0x4816 <fgetc+0x40>
    484a:	80 e1       	ldi	r24, 0x10	; 16
    484c:	fb cf       	rjmp	.-10     	; 0x4844 <fgetc+0x6e>

0000484e <__mulsi3>:
    484e:	db 01       	movw	r26, r22
    4850:	8f 93       	push	r24
    4852:	9f 93       	push	r25
    4854:	0f dd       	rcall	.-1506   	; 0x4274 <__muluhisi3>
    4856:	bf 91       	pop	r27
    4858:	af 91       	pop	r26
    485a:	a2 9f       	mul	r26, r18
    485c:	80 0d       	add	r24, r0
    485e:	91 1d       	adc	r25, r1
    4860:	a3 9f       	mul	r26, r19
    4862:	90 0d       	add	r25, r0
    4864:	b2 9f       	mul	r27, r18
    4866:	90 0d       	add	r25, r0
    4868:	11 24       	eor	r1, r1
    486a:	08 95       	ret

0000486c <__prologue_saves__>:
    486c:	2f 92       	push	r2
    486e:	3f 92       	push	r3
    4870:	4f 92       	push	r4
    4872:	5f 92       	push	r5
    4874:	6f 92       	push	r6
    4876:	7f 92       	push	r7
    4878:	8f 92       	push	r8
    487a:	9f 92       	push	r9
    487c:	af 92       	push	r10
    487e:	bf 92       	push	r11
    4880:	cf 92       	push	r12
    4882:	df 92       	push	r13
    4884:	ef 92       	push	r14
    4886:	ff 92       	push	r15
    4888:	0f 93       	push	r16
    488a:	1f 93       	push	r17
    488c:	cf 93       	push	r28
    488e:	df 93       	push	r29
    4890:	cd b7       	in	r28, 0x3d	; 61
    4892:	de b7       	in	r29, 0x3e	; 62
    4894:	ca 1b       	sub	r28, r26
    4896:	db 0b       	sbc	r29, r27
    4898:	0f b6       	in	r0, 0x3f	; 63
    489a:	f8 94       	cli
    489c:	de bf       	out	0x3e, r29	; 62
    489e:	0f be       	out	0x3f, r0	; 63
    48a0:	cd bf       	out	0x3d, r28	; 61
    48a2:	09 94       	ijmp

000048a4 <__epilogue_restores__>:
    48a4:	2a 88       	ldd	r2, Y+18	; 0x12
    48a6:	39 88       	ldd	r3, Y+17	; 0x11
    48a8:	48 88       	ldd	r4, Y+16	; 0x10
    48aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    48ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    48ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    48b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    48b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    48b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    48b6:	b9 84       	ldd	r11, Y+9	; 0x09
    48b8:	c8 84       	ldd	r12, Y+8	; 0x08
    48ba:	df 80       	ldd	r13, Y+7	; 0x07
    48bc:	ee 80       	ldd	r14, Y+6	; 0x06
    48be:	fd 80       	ldd	r15, Y+5	; 0x05
    48c0:	0c 81       	ldd	r16, Y+4	; 0x04
    48c2:	1b 81       	ldd	r17, Y+3	; 0x03
    48c4:	aa 81       	ldd	r26, Y+2	; 0x02
    48c6:	b9 81       	ldd	r27, Y+1	; 0x01
    48c8:	ce 0f       	add	r28, r30
    48ca:	d1 1d       	adc	r29, r1
    48cc:	0f b6       	in	r0, 0x3f	; 63
    48ce:	f8 94       	cli
    48d0:	de bf       	out	0x3e, r29	; 62
    48d2:	0f be       	out	0x3f, r0	; 63
    48d4:	cd bf       	out	0x3d, r28	; 61
    48d6:	ed 01       	movw	r28, r26
    48d8:	08 95       	ret

000048da <_exit>:
    48da:	f8 94       	cli

000048dc <__stop_program>:
    48dc:	ff cf       	rjmp	.-2      	; 0x48dc <__stop_program>
